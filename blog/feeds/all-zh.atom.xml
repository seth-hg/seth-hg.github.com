<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Sucks</title><link href="/blog/" rel="alternate"></link><link href="/blog/feeds/all-zh.atom.xml" rel="self"></link><id>/blog/</id><updated>2014-09-26T00:00:00+08:00</updated><entry><title>是时候谈谈就业的问题了</title><link href="/blog/bat.html" rel="alternate"></link><updated>2014-09-26T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-09-26:bat.html</id><summary type="html">&lt;p&gt;首先高校、研究所就不考虑了，吃不了那碗饭，老老实实去互联网公司当民工，靠能耐吃饭。如今中国的互联网，百度、阿里、腾讯三足鼎立，俗称BAT。三家各占山头，在自家主营业务上优势比较明显，但同时又觊觎着别人盘子里的大餐。其中阿里和腾讯的市值都超过千亿美元，百度只是百亿级别。阿里巴巴上市之后，成为国内最值钱的互联网公司，其市值超过百度和腾讯之和。从 &lt;a class="reference external" href="http://www.cyzone.cn/a/20140903/262375.html"&gt;上个季度的财报&lt;/a&gt; 来看，腾讯的营收规模最大，阿里的利润最高（净利率接近80%，远高于其他两家），而百度则落后不少。&lt;/p&gt;
&lt;p&gt;百度的主要收入来自搜索广告。根据 &lt;a class="reference external" href="http://data.cnzz.com/"&gt;CNZZ的数据&lt;/a&gt; ，百度占据搜索市场50%以上的份额。但是由于业务太过单一，限制了赚钱的能力，所以无论收入还是利润，跟另外两家都有比较大的差距。&lt;/p&gt;
&lt;p&gt;百度主打工程师文化和技术创新牌，但是实际情况是，近几年来，一只眼盯着墙外的Google，亦步亦趋（翻译、图片/语音搜索，百度Eye，无人驾驶，百度大脑）；另一只眼盯着国内的互联网公司，做二次山寨（微博、百付宝、文库、BAE、网盘）。虽然说一直在尝试拓展业务，但是收效甚微。而在核心的搜索业务上，从个人使用感觉来看，搜索质量没有明显的提升。最近遭遇到360的挑战，希望百度能打起精神，护住自己的菊花。&lt;/p&gt;
&lt;p&gt;另一方面，百度虽然用户量大，但是很难绑住用户，比如我经常用百度搜索（在google和duckduckgo相继被墙的前提下），但是很少用百度帐号。网盘免费的离线下载是个好点子，但是国家一严打，李彦宏只能哭晕在厕所了。&lt;/p&gt;
&lt;p&gt;不过在移动互联网时代，百度也有新的机遇。根据今年 &lt;a class="reference external" href="http://www.iqiyi.com/w_19rso5qnn5.html?list=19rrmqsdfe#vfrm=8-8-0-1"&gt;百度世界大会&lt;/a&gt; 上透露的信息，移动搜索已经占到总流量的30%，而语音搜索也占到了10%。另外在搜索请求的类型上，搜索服务信息的请求越来越多，这是百度进军O2O业务的一个重要优势。百度世界大会上，李彦宏特别强调了传统行业的朋友，也是希望吸引更多线下商家来关注百度的广告推广。百度的另一个优势是地图，地理位置信息是移动互联网和O2O的重要资源，不过阿里在收购了高德之后，也会在这方面发力，挑战百度的地位。&lt;/p&gt;
&lt;p&gt;阿里是电商界的霸主，淘宝、天猫就是奶牛。阿里的主要收入来自交易佣金和在线营销，成交量越大，赚钱的能力也就越强，所以这几年双十一、双十二搞得不亦乐乎，在用户疯狂抢购的同时，自己也赚得盆满钵满。相比百度的分散投资，阿里近几年更多的专注于自己的电商业务，也推出了不少让用户拍手叫好的产品和服务，比如退运险、余额宝。从我使用淘宝的感受来讲，阿里确实做到了为用户的利益着想，很多改进虽然并不是很显眼，但是让人感觉非常贴心。&lt;/p&gt;
&lt;p&gt;阿里近几年的快速增长主要来自网购用户数量的增加。也有分析认为，电商市场不可能无限制的增长，一旦买家数量趋于饱和，就不可能继续增长了。目前国内网民使用网购的比例已经超过50%，再加上垂直电商的逐渐成熟，必定会限制阿里进一步增长的空间。不过目前的电商交易额只是整个零售业的冰山一角，在线下还有巨大的发展空间，这也是各家公司都特别注重移动业务和O2O的原因。在这一块儿，百度有移动搜索，占据了信息分发的重要渠道，还有地图的优势，阿里有支付宝钱包，而腾讯的微信也是一把利器。&lt;/p&gt;
&lt;p&gt;另外一个问题，电商行业可能面临 &lt;a class="reference external" href="http://research.pedaily.cn/201303/20130305344310.shtml"&gt;政策风险&lt;/a&gt; 。比如近两年一直在提的 &lt;a class="reference external" href="http://news.zol.com.cn/438/4388644.html"&gt;淘宝收税&lt;/a&gt; 的问题，一旦政策落实，必定对淘宝的业务产生一定影响。可以预见，政策的出台是必然的，不论扶持还是监管，都会对整个行业产生冲击。不过既然习总出访都带上马云了，估计也不会过度打压。马云长成那样，习总都能带出去，说明是真爱。&lt;/p&gt;
&lt;p&gt;腾讯在即时通信、社交网络和网游这三大块都占有绝对优势，但是收入70%以上来自网游。2014年第一季度，腾讯游戏的收入更是 &lt;a class="reference external" href="http://news.17173.com/content/2014-08-05/20140805114515392.shtml"&gt;冲上了世界第一&lt;/a&gt; 。近期有腾讯收购盛大的传闻，如果成真，盛大的文学和游戏将进一步强化腾讯娱乐业务的优势地位。以前挺看不起娱乐这块，但其实娱乐是人除了吃喝拉撒之外的另一个基本需求，物质生活越富足，对娱乐的需求也就越强烈，所以这块市场潜力巨大，特别实在广大人民群众生活水平提高的情况下。别的不说，就看电影市场，国产电影不管片子有多烂，只要有几个明星再好好宣传一下，票房也能上亿，就知道这个蛋糕有多大。连好莱坞都忍不住要往大片里面塞中国元素，讨好中国市场。对于这块肥肉，百度和阿里显然也不会无动于衷。百度投资爱奇异，想在视频这块分一杯羹。阿里今年也推出了手游平台，想在游戏市场抢腾讯的饭碗。&lt;/p&gt;
&lt;p&gt;说到这里顺便跑个题，前不久听了爱奇异的宣讲会，感觉现在做的真心不错。别的不说，只要把广告精准定位做好，绝对可以击败优酷。在广告这个问题上优酷简直就是战五渣。互联网公司靠广告挣钱很正常，但你这完全是漫无目的的轰炸式广告，跟传统媒体没有任何区别，哪里突出互联网的优势了？你说我一光棍，一天给我放十几二十遍杜蕾丝广告，还想留住用户？长此以往，用户反感，广告效果也不好，哪个商家还会到你这SB网站上投广告？优酷之所以看起来成功，纯粹是因为起步早，钻政策的空子，靠大量没有授权的盗版资源抢到了用户。其实那系统就是垃圾，既没有个性推荐，又没有广告定位，水平还停留在互联网石器时代，早晚有天要滚蛋。&lt;/p&gt;
&lt;p&gt;腾讯业务的优势在于业务比较综合，并且像手Q、微信这些已经成为很多人离不开的通信工具了，连电信运营商都眼红。另一方面，腾讯用户基数巨大。根据 &lt;a class="reference external" href="http://wearesocial.net/blog/2014/08/socials-monday-mashup-224/"&gt;今年8月份的一个报告&lt;/a&gt; ，QQ和QQ空间的月活跃用户数仅次于非死不可，位居全球二、三位，而微信和腾讯微博分别排在第5和第10。新浪微博则没进前十。不过这个数据可能有争议。在去年12月 &lt;a class="reference external" href="http://www.businessinsider.com/the-worlds-largest-social-networks-2013-12"&gt;Bussiness Insider发布的报告&lt;/a&gt; 里，第二位是YouTube，QQ空间排在第三，新浪微博第四，微信第10。不管怎么说，腾讯拥有庞大的用户群，这一点是毋庸置疑了。而且这些用户是通过关系网紧密的连接在一起的，并不是孤立的个体，所以不太容易出现大规模的用户叛逃。这些年来尝试过做IM的不在少数，新浪有UC，阿里有旺旺，还有舶来品MSN，没一个能撬动QQ的墙脚。有了这个用户群体，才有腾讯在营收规模上的优势。但是腾讯这些年也出过不少昏招，很多盈利能力比较差的业务拖了后腿，这可能是利润率比较低的主要原因。腾讯先后把自己的搜索和电商业务转让，就是为了剥离了不良资产，同时拉拢合作伙伴。&lt;/p&gt;
&lt;p&gt;在移动业务方面，微信算是歪打正着了，虽然功能上跟手机QQ有很大的冲突，顶着内斗的压力做出来，但是做得很用心，也得到了用户的认可。根据我了解的一些情况，有些上了年纪的人不会用QQ，但是很乐意用微信。对于腾讯来说，创造微信这个新的品牌，一改QQ给人留下的小孩儿玩具的印象，其实也是很有意义的。在增加了支付功能之后，微信也成为腾讯在移动电商领域的法宝。微信部门上升为一个独立的BG，也看得出来其受重视的程度。&lt;/p&gt;
&lt;p&gt;分析到此为止，最后提一个终极问题供大家思考：如果遭遇严重的经济危机，在大环境不景气的情况下，BAT三家谁的业务更坚挺？虽然说苦逼码农赚的只是白菜钱，但是也不妨碍我们体验一下卖白粉的感觉，意淫可比手淫过瘾多了。&lt;/p&gt;
&lt;p&gt;补充一个关于几大互联网公司员工跳槽的资料：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tech.hexun.com/2013-02-25/151443400.html"&gt;知名互联网企业员工跳槽原因揭秘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及离职创业的情况：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tech.ifeng.com/bat3m/detail_2014_08/07/37906786_0.shtml?3Sd--www.cangboyule88.com--haoern.html"&gt;创业者11派系圈大盘点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://itjuzi.com/person"&gt;IT桔子——人物列表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.36kr.com/p/215682?ref=index_feature_topics"&gt;腾讯系创业者报告&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>闪存的工作原理</title><link href="/blog/flash-memory.html" rel="alternate"></link><updated>2014-08-24T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-08-24:flash-memory.html</id><summary type="html">&lt;p&gt;闪存时当下非常热门的存储介质之一，不论是在工业界还是学术界，都&lt;/p&gt;
&lt;p&gt;闪存是用半导体集成电路实现非非易失性数据存储的设备，其基本单元是浮栅晶体管。&lt;/p&gt;
&lt;p&gt;浮栅晶体管是一种特殊结构的MOSFET。普通的MOSFET（图1）有源极、漏极和栅极三个端口，嵌在半导体硅基质里，互不联通，因此在通常情况下，MOSFET是不导电的。如果在栅极和源极之间加上一个电压Vgs，硅基质受到电场的感应就会产生自由电子，当Vgs高于某个值的时候，MOSFET变成导体，电流可以通过沟道在源极和漏极之间流通。这个电压值就是MOSFET的开启电压，也叫阈值电压，用符号VT表示。浮栅晶体管（图2）的结构跟普通MOSFET类似，不同的是它有两个栅极，上面是控制栅，下面是浮动栅。这个结构的特点是它的阈值电压VT是可变的，可以通过在浮栅中存储一定量的电子来改变阈值电压。浮栅的周围包裹这一层二氧化硅绝缘层，&lt;/p&gt;
&lt;p&gt;初始情况下，浮栅中没有电子，VT较低。&lt;/p&gt;
&lt;p&gt;如果在漏极和栅极加上高电压，使沟道是打开的，电子从源极流向漏极。由于热电子注入效应，部分高能电子会穿过硅基质和二氧化硅绝缘层之间的势垒，进入浮栅。当栅极高电压撤去之后，这些电子就被困在浮栅里，达到存储数据的目的。&lt;/p&gt;
&lt;p&gt;当浮栅中有电子时，&lt;/p&gt;
&lt;p&gt;阈值电压就会升高。浮栅其中电子的多少，决定了晶体管的阈值电压Vth的高低，闪存就是通过这种方式来存储数据的。浮栅周围包裹着一层二氧化硅绝缘层，进入其中的电子会被困住，因此可以实现非易失性存储。&lt;/p&gt;
&lt;p&gt;SLC闪存和MLC闪存在物理结构上是一样的，区别是&lt;/p&gt;
&lt;p&gt;Page 3
编程操作：在&lt;/p&gt;
&lt;p&gt;对于MLC闪存，如果要存储n个bit的信息，Vth就要有至少2^n种不同的取值。MLC闪存在进行编程的时候，采用递增的方式，逐步提高Vth到需要的值。每次的增量是∆VP，因此MLC闪存的写速度要比SLC闪存慢得多，而且写操作的时间跟∆VP成正比。&lt;/p&gt;
&lt;p&gt;擦除操作：在源极和栅极之间加上反向高电压，利用量子隧道效应将浮栅中的电子吸引到源极，Vth回复到初始状态。&lt;/p&gt;
&lt;p&gt;编程完成之后，浮栅晶体管并不能永久的保持这个状态，经过足够长的时间，FG中的电子会逐渐逸出，Vth会逐渐降低。而且擦写的过程会对器件造成破坏性的影响（热电子退化），擦写次数越多，Vth能够维持的时间也就越短。这也是闪存寿命有限的物理根源。&lt;/p&gt;
&lt;p&gt;Page 4/5
闪存中保存数据有一定的出错率，这个概率称作原始位错误率（RBER）。&lt;/p&gt;
&lt;p&gt;所谓写穿状态，是指在一定的时间范围内，发生不可纠正错误的概率高于某个阈值。&lt;/p&gt;
&lt;p&gt;近年来对闪存的研究不断升温&lt;/p&gt;
&lt;p&gt;台湾xxx使用二氧化硫做绝缘层，结合热辅助技术，实现了闪存的自我修复，将最大擦写次数提升至1亿次以上，大大延长了闪存的寿命。&lt;/p&gt;
</summary></entry><entry><title>《大数据时代》读书笔记</title><link href="/blog/big-data-revolution.html" rel="alternate"></link><updated>2014-05-11T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-05-11:big-data-revolution.html</id><summary type="html">&lt;p&gt;Updated：2014-08-31&lt;/p&gt;
&lt;p&gt;刚刚读完《大数据时代》，结合最近读的一些其他有关大数据方面的书，总结一下。本书共3大部分8个章节，讨论了大数据对人们思维模式、商业模式等所造成的影响，未来的发展趋势和挑战。书中的分析深入透彻，并且包括了大量的真实案例，值得一读。另外还有一本比较出名的《大数据云图》，主要描述了大数据在各个领域的应用前景，但是深度远不及本书，更多的只是堆砌事实，略读即可。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;一、样本=总体&lt;/h2&gt;
&lt;p&gt;统计学中的采样是个比较有争议的问题，采样方法不当可能产生具有偏见甚至完全错误的结论。但是随着数据采集、存储和处理能力的增强，采样已经不再是必须的了，可以直接把所有数据当作样本。量变产生质变，从全体数据中能够发现样本中所不能体现的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;二、混乱&lt;/h2&gt;
&lt;p&gt;大数据时代，数据的总量将成为决定性因素。为了追求数据总量，往往需要牺牲精确性。尽管如此，大数据量带来的优势将压倒不精确造成的问题。这其实是个概率问题，除非错误数据所占的比例很高，否则这些错误对整体结果的影响不会太大。比如对10000个数据点进行回归分析，其中有几十错误完全数据完全是可以忽略的。&lt;/p&gt;
&lt;p&gt;放弃对精确性可以带来两个好处：1) 大大增加了可用数据量，扩展了时间和空间尺度上的观测范围，有利于发现细微的趋势；2) 数据的实时性更好，能够及时发现变化趋势。放弃精确性转而追求数据总量的另一个理由是：简单算法用在大量数据上要比复杂算法应用在少量数据上更有效。书中举了Google翻译作为例子。Google并没有针对语言特点设计复杂的算法，而是直接利用互联网上大量不精确的网页信息作为语料，达到了更好的效果。&lt;/p&gt;
&lt;p&gt;为了增加数据总量可能遇到的另外一个问题是数据格式和结构的混乱。NoSQL数据库的兴起正是为了满足对大量非结构化数据存取的需求。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vs"&gt;
&lt;h2&gt;三、相关关系 vs 因果关系&lt;/h2&gt;
&lt;p&gt;通过数据挖掘，可以发现不同事物之间相关关系，进而利用这种关系。典型的应用就是推荐系统，如果购物网站发现用户购买商品A和购买商品B之间存在很强的相关性，就可以向购买了商品A的用户推荐商品B以增加销量。但是，我们仍然不知道也不需要知道为什么用户会同时购买A和B。&lt;/p&gt;
&lt;p&gt;相关关系并不等于因果关系，而是因果关系的一个超集。如果两个事件之间存在必然的因果关系，则在数据上一定会表现出相关性，反之则未必。由于数据的局限性，两个事件之间的相关性可能只是偶然的。《信号与噪声》里举了一个很好的例子：在1967年到1997年的31年中，股市的涨跌跟超级杯夺冠的球队具有很强的相关性，但是之后几年却出现了完全不同的结果。&lt;/p&gt;
&lt;p&gt;用相关关系代替因果关系的好处是：1）挖掘相关关系的成本更低、速度更快。要严格的证明因果关系可能需要进行复杂和昂贵的实验，甚至还会违背伦理道德，而发现相关关系只需要相对廉价的计算。而且随着技术的进步，计算的成本会越来越低，速度也越来越快。2）基于数据而得出的相关关系，可以有效的避免人类的偏见。书中认为：基于相关关系进行的预测才是大数据的核心。&lt;/p&gt;
&lt;p&gt;使用相关关系是概率思维的一种表现。两个相关的事物之间不一定有因果关系，但是这种可能性很大，特别是使用的数据量足够大的时候。因此相关关系可以成为因果关系的替代品，这跟第二章中使用不精确性数据的原因是类似的。在《信号与噪声》里，作者也提到了在进行预测的时候，需要放弃确定性思维，而改用概率的方式进行思考：预测结果不是一个孤立的点，而是在某个范围内的概率分布。所以现代版的福尔摩斯遇到华生的时候，绝对不会断言后者去过阿富汗，而是会说“你去过阿富汗的概率是99%”之类的话。就像《V字仇杀队》里说的：“There is no certainty, only opportunity”。&lt;/p&gt;
&lt;p&gt;个人认为，相关性只是暂时的解决方案，事物之间隐藏的因果关系才是终极答案。相关关系有助于帮助我们简化对世界的认识。现实世界是非常复杂的，很多潜在的因果关系由于人类认识的局限性不能够被发现，而相关关系正好解决了这个问题。随着研究的深入，越来越多的相关关系将得到合理的逻辑解释，从而转变成因果关系。从这个角度来讲，大数据完全可以作为发现新知识的一种手段。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;四、数据化&lt;/h2&gt;
&lt;p&gt;数据化是应用大数据技术的前提。数据化不等于数字化，数字化仅仅将现实世界中的信息转化成0和1表示的二进制序列。而数据化则是对信息进行量化，以便于计算机的处理。数据化从原始社会就已经开始，并且一直在不断发展，只是在计算机技术出现之后才产生了飞跃。书中举了很多不同领域的例子，比如文字、地理位置、社交关系等，来说明信息量化的重要意义。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;五、发掘数据的潜在价值&lt;/h2&gt;
&lt;p&gt;收集数据通常是为了特定的目的，达到这个目的仅仅是利用了数据的基本价值，还有更多的潜在价值有待发觉。并且数据不同于物质，可以反复使用，其价值并不会减少。相反，当越来越多新用途出现，数据的价值将会不断增加。书中列举了6中从数据中发掘潜在价值的模式：&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;二次利用，即发掘数据的新用途。&lt;/li&gt;
&lt;li&gt;数据重组，结合多个不同的数据集，产生1+1&amp;gt;2的效果。&lt;/li&gt;
&lt;li&gt;可扩展数据，收集数据的同时，把一些看似不相关的数据也一并收集。这样做所需的额外成本很低，但是却可能带来意想不到的收益。&lt;/li&gt;
&lt;li&gt;数据折旧，过时数据有时会破坏新数据的价值，在处理的过程中需要进行折旧处理。&lt;/li&gt;
&lt;li&gt;数据废气，一些通常被认为是无用的和有缺陷的数据也能够产生价值。&lt;/li&gt;
&lt;li&gt;开放数据，政府开放数据，能够催生更多的创新性应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于其巨大价值，数据将会和其他有形资产一样计入公司的总资产。比如Facebook，上市时的估价就远远高于其有形资产的价值。因为潜在价值的存在，对数据进行估值会变得更加困难。解决的办法是从使用者创造的价值中提取一定比例作为使用数据的报酬。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;六、角色&lt;/h2&gt;
&lt;p&gt;大数据价值链主要由3种角色构成：数据拥有者、技术拥有者和想法拥有者。这里跟原书里的表述有所不同，但含义是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据拥有者&lt;/strong&gt; 更多的是传统企业，包括线上的和线下的。它们在过往的运营中出于各种目的积累了大量数据，但是并不一定会使用这些数据，或者仅仅利用了数据的基本价值。它们可以出售这些数据给其它用户而获得而外的收益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术拥有者&lt;/strong&gt; 类似MapR这样专注于改进大数据平台和解决方案的公司。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想法拥有者&lt;/strong&gt; 能够创造性的使用数据，挖掘潜在价值，典型的代表就是各种创业公司。&lt;/p&gt;
&lt;p&gt;在初期阶段，改进技术的需求会比较强烈。但是技术会越来越普及、越来越廉价，单纯的技术拥有者可能很快会淡出中心舞台。大数据的价值将逐渐向这条链的两端转移，因此掌握数据和数据的使用方法才是关键。&lt;/p&gt;
&lt;p&gt;除了这三种主要角色，还会有一些其他新角色产生：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据中间商&lt;/strong&gt; 也就是经销商，他们从数据拥有者手里收购数据，转售给数据使用者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据科学家&lt;/strong&gt; 行业专家的主导地位将被数据科学家取代。作者举了很多例子来证明，只要掌握了数据技术，即使对某个领域并不了解，也能够做出显著的贡献。类似于计算机科学，虽然在产生之初只是多个学科的交叉，但是巨大的应用前景将促使数据科学发展成一个全新的学科。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;七、风险&lt;/h2&gt;
&lt;p&gt;大数据可能带来的三种风险：&lt;/p&gt;
&lt;p&gt;第一个是隐私问题。最近几年隐私问题已经引起了足够多的关注，不需要再多说了。要解决隐私问题，仅仅使用技术手段是不行的。这里有一个很有意思的例子：利用雅虎公布的匿名搜索记录鉴定出某个用户的真实身份。这说明只要拥有足够的数据，即使经过匿名化处理，也不能保证个人的隐私。所以那些在匿名社交网络上吐槽的，呵呵，不要以为不留名就没有人知道你是谁。&lt;/p&gt;
&lt;p&gt;另一个问题是用数据来判断和惩罚人类的潜在行为。大数据已经开始用于预防犯罪，如果再进一步用来惩罚潜在的犯罪行为，就会成为巨大的隐患。参见《少数派报告》。&lt;/p&gt;
&lt;p&gt;第三种可能的风险是数据独裁，也就是对数据的过度依赖。俗话说“尽信书不如无书”，对数据也一样。过度依赖数据也会适得其反。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;八、管理&lt;/h2&gt;
&lt;p&gt;正如印刷机的出现带来了相应的出版、审查、版权等制度一样，大数据时代也需要全新的管理规范。&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;隐私保护：对应上一章中第一种风险。解决这个问题需要让数据的使用者为其行为承担责任，促进使用者建立制度来评估自身的行为，从而规避或减轻伤害。隐私问题由来已久，现代社会人的各种言行都会留下不同形式的记录，这些记录一旦落到别有用心的人手里就可能对个人造成伤害。典型的案例就是最近Brandan Eich被迫辞去Mozilla CEO职务，就因为N年前捐款支持了某反同性恋的政客，被一帮跳梁小丑逼宫。在大数据时代，对数据的收集和挖掘都将达到空前的高度，隐私风险也会更加突出。&lt;/li&gt;
&lt;li&gt;保证个人动因：个人应该会其行为负责，而不是倾向。对应上一章中第二种风险。&lt;/li&gt;
&lt;li&gt;数据程序猿：不是传统意义上的程序员，而是计算机、数学家和统计学专家，职能类似于审计人员，可以对大数据系统的方方面面进行评估，以确保数据的正确使用。&lt;/li&gt;
&lt;li&gt;反垄断：防止少数组织垄断数据，保证市场活力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;思考&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;大数据的兴起是否会左右文化的发展？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先大数据会影响文化传播。信息技术发展到今天，信息的传播已经不成问题。一条爆炸性的新闻可能瞬间就传遍大半个地球。但是大数据技术的应用，会改变信息的传播方式。现在，信息更多的依赖搜索引擎、推荐引擎而传播，这会使部分热门信息更容易得到广泛的传播，也会让某些小众信息被淹没在数据洪流中。这种传播方式的改变，很可能会对文化的发展产生重大影响。&lt;/p&gt;
&lt;p&gt;大数据对文化产品也会产生影响。数据技术已经在影视作品的制作过程中发挥了的作用，比如 &lt;a class="reference external" href="http://www.nytimes.com/2013/02/25/business/media/for-house-of-cards-using-big-data-to-guarantee-its-popularity.html?pagewanted=all&amp;amp;_r=0"&gt;热播美剧《纸牌屋》&lt;/a&gt; 就是Netflix根据自己的用户统计数据投资拍摄的。而 &lt;a class="reference external" href="http://news.sina.com.cn/m/2014-02-20/095729516998.shtml"&gt;国产网络剧《爱情公寓4》&lt;/a&gt; 也使用了类似的方法。同样，数据技术也被用于电影票房的预测，以帮助制片方进行风险控制。比如 &lt;a class="reference external" href="http://www.epagogix.com/"&gt;Epagogix公司&lt;/a&gt; 就提供根据剧本预测票房的服务。《大数据云图》中也提到大数据在设计、建筑等领域的应用。不难想象，大数据技术未来也会应用到更多文化相关的领域。也许很快就会有以大数据为基础的书籍、唱片、甚至是艺术作品。这必定会对社会文化的发展产生重要的影响。说到艺术作品，我就想起了达芬奇的《维特鲁威人》，可以把它看做艺术作品，但是其中使用了相当精确的数据来展现完美的人体比例，不知道这能不能算是数据技术在艺术领域的应用案例。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;国内动态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在中国方面，近期最有影响力的事件大概要算百度大数据引擎的推出。百度已经索引了大量的中文网页，掌握了大量的用户查询信息，并且也在 &lt;a class="reference external" href="http://idl.baidu.com/"&gt;大力发展深度学习等相关技术&lt;/a&gt; 。最近还 &lt;a class="reference external" href="http://cn.wsj.com/gb/20140517/tec090509.asp"&gt;挖来了机器学习领域的大牛Andrew Ng&lt;/a&gt; ，要在硅谷建立研发中心。另一方面，百度陆续推出了一系列基于其云平台的 &lt;a class="reference external" href="http://baidu.tmall.com/"&gt;硬件产品&lt;/a&gt; 。硬件的微薄利润，百度的用意显然不在于此，而是在于这些终端设备所能够收集到的数据。相比前几年各大互联网公司一窝蜂的推自己的手机抢占移动终端，百度这一步走得很聪明。&lt;/p&gt;
&lt;p&gt;另外一个细节是，如果你注意过就会发现，以前的百度搜索结果，链接是直接指向原始网页的，但是现在已经变成了一个指向百度的链接，再通过跳转到达原始网页。Google很早就采用了这种做法，目的也是为了收集用户的点击数据。百度的这个改变表明它对用户产生的数据越来越重视了。在云计算这一次浪潮中，百度绝对是失败的，不但出手晚，方向也选错了，所以对大数据这个机遇是相当重视的。&lt;/p&gt;
&lt;p&gt;至于阿里巴巴，大数据在电子商务和商业智能中的应用已经无需多说。阿里巴巴掌握了大量的电商数据，现在已经乐得合不拢嘴。阿里上市，马云成为中国首富，充分说明了投资者的认可。&lt;/p&gt;
&lt;p&gt;大数据的另一片沃土是社交网络。不过相比电商和搜索，社交网络数据的价值密度更低。而且中国有自己的国情，很多人不喜欢公开谈论自己，微博上满世界飞的都是心灵鸡汤和小贴士，造成了虚假繁荣的假象。除此之外，社交网络还要面临政府审查的巨大压力。所以企鹅同学感觉有点儿悬，好在用户基数够大，靠着QQ和微信占领了PC和手机两大平台，发展的空间还是不小的。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="big data"></category><category term="reading"></category></entry><entry><title>喵星人偷拍DIY</title><link href="/blog/cat-watcher.html" rel="alternate"></link><updated>2014-05-02T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-05-02:cat-watcher.html</id><summary type="html">&lt;p&gt;去年有只流浪猫在隔壁院生了一窝小猫，我花了几个月成功的把它们勾搭了过来。勾了不能白勾，我决定整一个监控装置观察喵行人的活动。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;Arduino控制摄像头拍照，并通过串口把照片传输给树莓派。为了避免无意义的拍照，用红外传感器对周围进行检测，只有发现有动物活动时才开始拍照。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;准备材料&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;硬件&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Arduino：Uno、Leonardo、Mega都可以，我用的还是11年买的Duemilanove。&lt;/li&gt;
&lt;li&gt;DFRobot传感器扩展板：推荐用这个，接传感器和摄像头都比较方便。&lt;/li&gt;
&lt;li&gt;LinkSprite Y201串口摄像头：VC0706芯片，清晰度尚可，优点是自带红外补光灯，夜视效果不错；缺点是焦距短、视野小，而且价格偏高，普通USB摄像头几十块就可以搞定。&lt;/li&gt;
&lt;li&gt;数字红外传感器&lt;/li&gt;
&lt;li&gt;树莓派：换成其它单板机、Mini PC、机顶盒、路由器基本都可以，只要能运行Linux和下面的软件。&lt;/li&gt;
&lt;li&gt;USB电源：Arduino和摄像头的功耗都不算大，加上树莓派的750mA，1A电源基本够用，如果有2A的更好。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;软件&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Arduino IDE&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/adafruit/Adafruit-VC0706-Serial-Camera-Library"&gt;Adafruit VC0706 Library&lt;/a&gt; ：来自ladyada摄像头驱动。&lt;/li&gt;
&lt;li&gt;Python 2.7: Raspbian系统自带，其它可能需要自行安装。&lt;/li&gt;
&lt;li&gt;pyserial：Python串口通信。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.phash.org"&gt;phash&lt;/a&gt; + &lt;a class="reference external" href="https://github.com/acdha/python-phash"&gt;python-phash&lt;/a&gt; ：检测相似图片。&lt;/li&gt;
&lt;li&gt;Flask + jinja2 + &lt;a class="reference external" href="http://www.doknowevil.net/litebox/"&gt;Litebox&lt;/a&gt; ：实现一个简单的Web相册。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;硬件连接&lt;/h2&gt;
&lt;img alt="cat watcher camera" src="http://seth-images.qiniudn.com/cat-watcher-camera.jpg" /&gt;
&lt;p&gt;Y201有4根线，上图所示从右下到左上分别是：电源线（VCC），地线（GND），Tx和Rx，接法如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;VCC接扩展板上的5V电源，必须是5V，接3.3V补光灯不能正常工作。&lt;/li&gt;
&lt;li&gt;GND接扩展板上任意地线。&lt;/li&gt;
&lt;li&gt;Tx, Rx分别接在Arduino两个数字I/O端口上，分别记做PIN_SS_Rx和PIN_SS_Tx。由于Arduino只有一个硬件串口，用来和树莓派通信了，因此和Y201的通信只能用软串口。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;红外传感器有3根线：电源线、地线和一个数字输出口，当探测范围内有人或动物出现时，数字输出口为高电平，否则为低电平。可以直接插在传感器扩展版上的任意空闲数字端口，记做PIN_IR_SENSOR。&lt;/p&gt;
&lt;p&gt;接好线后效果如下图所示：&lt;/p&gt;
&lt;img alt="cat watcher arduino" src="http://seth-images.qiniudn.com/cat-watcher-arduino.jpg" /&gt;
&lt;p&gt;Arduino直接用数据线连接树莓派的USB接口，通信和供电一并解决。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;软件源码&lt;/h2&gt;
&lt;div class="section" id="arduino"&gt;
&lt;h3&gt;Arduino&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;Adafruit_VC0706.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PIN_IR_SENSOR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;SoftwareSerial&lt;/span&gt; &lt;span class="n"&gt;cameraconn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SoftwareSerial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PIN_SS_Rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIN_SS_Tx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Rx, Tx&lt;/span&gt;
&lt;span class="n"&gt;Adafruit_VC0706&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_VC0706&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cameraconn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;38400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// setup the camera&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;ir_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_detected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//Serial.println(&amp;quot;detected&amp;quot;);&lt;/span&gt;
                &lt;span class="c1"&gt;// take a photo&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;takePicture&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed taking picture&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// get image file size&lt;/span&gt;
                &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frameLength&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readPicture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// reset the camera&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用软串口跟相机通信速度很慢，40KB+的一张照片居然要十多秒才能读完。修改SoftwareSerial库的头文件SoftwareSerial.h，加大缓冲区（_SS_MAX_RX_BUFF），可以稍微加快一点儿。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;树莓派&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;serial&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;

&lt;span class="n"&gt;default_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/dev/ttyUSB0&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;default_baud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;38400&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Taking snapshots with arduino camera.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;baud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Serial baudrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Output directory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Serial port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_port&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_baud&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;setting up camera...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;waiting...&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed to take picture&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;detected, receiving data...&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.jpg&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;-%H-%M-%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;framelen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;framelen&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;framelen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bytes saved to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;

    &lt;span class="c"&gt;# reset camera&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reseting camera...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;一个简单的相册&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;

&lt;span class="n"&gt;photos_per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;photo_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static/photos&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total_count&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_prev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_edge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;right_current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_edge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;left_edge&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left_current&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
                &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right_current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
               &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;right_edge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
                &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;lt;int:page&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;
    &lt;span class="n"&gt;pagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Photos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_for_other_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url_for_other_page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for_other_page&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;改进方案&lt;/h2&gt;
&lt;p&gt;尽管加了红外传感器，在实际使用中还是会拍下很多没有意义的照片，原因有三：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;红外传感器检测范围比较大，而摄像头视野比较窄，经常拍不到；&lt;/li&gt;
&lt;li&gt;光线暗的时候摄像头会自动打开红外补光灯，可能会干扰红外传感器；&lt;/li&gt;
&lt;li&gt;喵星人长时间呆着不动的时候，连续拍照也没有意义。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个问题只有在树莓派上解决了，好在BCM2835还有一定的计算能力。接收到Arduino传过来的照片之后，比较新照片跟前一张照片，如果二者相似，就可以丢弃当前照片。这个可以用pHash来实现。pHash是一个用来检测媒体文件相似度的算法。普通的hash算法为了增加破解的难度需要“雪崩效应”，也就是输入数据发生一点微小的变化，输出指纹也会变得面目全非。pHash则正好相反，相似的输入会产生相似的输出，因此只要比较前后两张照片的指纹，就可以判断是否相似。&lt;/p&gt;
&lt;p&gt;下面代码实现一个异步的图片去重类。由于背景是固定的，任意两张照片之间的相似度都很高，所以这里的过滤相似图片的默认阈值也设得比较高。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;phash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cross_correlation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_digest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="n"&gt;tmpfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/run/shm/ooxxoo.jpg&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.995&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmpfile&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setDaemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c"&gt;# process all submitted jobs&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
                        &lt;span class="n"&gt;cross_correlation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;完成！&lt;/h2&gt;
&lt;p&gt;成品效果如下图，用一个纸盒子做成Arduino外壳和摄像头支架，丑了点儿，将就能用。摄像头部分放在外面窗台上，窗口留个缝让USB数据线穿过来连到屋里的树莓派。&lt;/p&gt;
&lt;img alt="cat watcher final" src="http://seth-images.qiniudn.com/cat-watcher-final.jpg" /&gt;
&lt;p&gt;这两天刚刚装上，马上就拍到两只喵星人在搞基，( ⊙ o ⊙ )。。。&lt;/p&gt;
&lt;img alt="cat watcher ooxx" src="http://seth-images.qiniudn.com/cat-watcher-ooxx.jpg" /&gt;
&lt;/div&gt;
</summary><category term="cats"></category><category term="python"></category><category term="arduino"></category></entry><entry><title>整数分解算法</title><link href="/blog/factorization-algorithm.html" rel="alternate"></link><updated>2014-04-01T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-04-01:factorization-algorithm.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Integer_factorization"&gt;整数分解&lt;/a&gt; 就是质因数分解，把一个合数分解成几个质数乘积的形式。整数分解是计算机领域的一个重要算法，在计算复杂性理论、密码学等领域有重要的应用。&lt;/p&gt;
&lt;p&gt;要分解整数N，可以用递归的方法，先找到N的一个质因数a，然后再递归的对N/a进行分解，直到剩下的数为质数不能继续分解为止。这样问题就转化为寻找N的一个质因数。一个最简单的思路是逐个测试区间(1, sqrt(N)]内的每个质数，看能否被N整除。如果N是合数，则一定能找到一个质数a使得N整除a。这种方法叫作 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Trial_division"&gt;试除法&lt;/a&gt; ，用的是穷举的思想，容易理解但是效率很低。当N比较大的时候，这个方法就会比较慢。&lt;/p&gt;
&lt;p&gt;这里介绍另外一种算法—— &lt;a class="reference external" href="http://www.csh.rit.edu/~pat/math/quickies/rho/"&gt;Pollard's Rho算法&lt;/a&gt; 。本质其实是类似的，也是对一个集合中的数字逐个进行测试，直到找到需要的质因数为止，但是测试数列产生的方法和测试的方法都不同。Pollard Rho算法并不是简单的用所有可能的质数去试，而是采用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Monte_Carlo_method"&gt;蒙特卡洛方法&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;测试数列S用递推的方式产生：定义一个多项式函数f(x)，通常采用f(x) = k * x&lt;sup&gt;2&lt;/sup&gt; + c的形式，令x&lt;sub&gt;1&lt;/sub&gt; 为最小的质数2，并且x&lt;sub&gt;n+1&lt;/sub&gt; = f(x&lt;sub&gt;n&lt;/sub&gt;)。&lt;/p&gt;
&lt;p&gt;数学常识告诉我们，函数f(x)是发散的。如果一直递推下去，S中的数无穷无尽。这里就要用到模运算，也就是取余数。在模运算里，说a = b是指a和b除以同一个数n得到的余数相同，记作：&lt;/p&gt;
&lt;blockquote&gt;
a = b (modulo n)&lt;/blockquote&gt;
&lt;p&gt;模运算具有可传递性，而且这种传递性对于加减乘除和乘方运算都成立，也就是说，对于下面等式：&lt;/p&gt;
&lt;blockquote&gt;
a + b = c (modulo n)&lt;/blockquote&gt;
&lt;p&gt;对于任意a' = a (modulo n)，把上式中的a换成a'，等式仍然成立。&lt;/p&gt;
&lt;p&gt;利用模运算对对f(x)做一下修改：&lt;/p&gt;
&lt;blockquote&gt;
f(x) = k * x&lt;sup&gt;2&lt;/sup&gt; + c (modulo N)&lt;/blockquote&gt;
&lt;p&gt;这样S就成了一个有限的数列，因为最多之可能有N-1个数。可以知道，数列中一定会出现某一项x&lt;sub&gt;j&lt;/sub&gt; = x&lt;sub&gt;i&lt;/sub&gt; ，并且i &amp;lt; j，根据模运算的传递性，则有f(x&lt;sub&gt;j&lt;/sub&gt;) = f(x&lt;sub&gt;i&lt;/sub&gt;)，数列进入一个循环。当然这个循环很可能不是从数列的第一项就开始的，而是从中间的某一项，这样就带了一个小“尾巴”，就像希腊字母ρ，这也是该算法被命名为rho的原因（Pollard是发明者的名字）。&lt;/p&gt;
&lt;p&gt;寻找质因数的测试过程如下：对S中的每一个x&lt;sub&gt;k&lt;/sub&gt; （k为奇数），算出(x&lt;sub&gt;k&lt;/sub&gt; - x&lt;sub&gt;k/2&lt;/sub&gt;)和N的最大公约数（Greatest Common Divisor）g，如果g不为1，则g是N的一个质因数。用这种方法一定可以找到N的一个质因数。该算法的Python实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pollardRho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c"&gt;#uso come funzione (x^2 + c)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16843009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pollardRho&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用Pollard's Rho算法寻找质因数的过程具有一定的随机性，也跟函数f(x)的选择是否恰当有关，对它的时间复杂度分析比较困难。一个并不严谨的结论是：对于任意n，该算法最多有1/2的概率能在O(n&lt;sup&gt;1/4&lt;/sup&gt;)步之内找到一个质因数。&lt;/p&gt;
&lt;p&gt;整数分解算法还有很多，Pollard's Rho算法只是比较有代表性的一种，有很多方法都是以它为基础进行改进的，其它方法可以参考Wikipedia。&lt;/p&gt;
</summary><category term="algorithm"></category><category term="programming"></category><category term="python"></category></entry><entry><title>带通配符的数字</title><link href="/blog/number-with-wildcards.html" rel="alternate"></link><updated>2014-03-18T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-03-18:number-with-wildcards.html</id><summary type="html">&lt;p&gt;偶尔看到CSDN英雄会上的一道 &lt;a class="reference external" href="http://hero.csdn.net/OnlineCompiler/Index?ID=351&amp;amp;ExamID=346"&gt;编程题目&lt;/a&gt; ，觉得挺有意思就试着做了一下。&lt;/p&gt;
&lt;p&gt;题目是这样的：给出一个带有通配符'?'的数字W和另一个数字X，要算出W有多少中组合大于X。其中'?'可以表示0到9的任意数字，且W和X的长度相同，在1到10之间。&lt;/p&gt;
&lt;p&gt;一个简单的思路是用递归算法，当W中包含n个'?'（n &amp;gt; 0）时，一定可以把它写成wa+?+wb这种形式，其中wa是纯数字，不含通配符，而wb包含n-1个通配符。按照同样的方式可以把X也写成类似的形式：xa+xp+xb，其中xp是W中'?'对应的位，xa、xb和wa、wb分别等长。于是有下面的递推：&lt;/p&gt;
&lt;ol class="upperalpha simple"&gt;
&lt;li&gt;如果wa &amp;lt; xa，则W一定小于X，此时结果为0&lt;/li&gt;
&lt;li&gt;如果wa &amp;gt; xa，则不论'?'取何值，W一定大于X，此时结果为10^n&lt;/li&gt;
&lt;li&gt;如果wa = xa，则考虑'?'的取值，有三种情况&lt;ol class="loweralpha"&gt;
&lt;li&gt;当'?'大于xp时，W一定大于X，这种情况下可能的组合一共有 (9-xp)*10^(n-1)。&lt;/li&gt;
&lt;li&gt;当'?'等于xp时，W是否大于X取决与wb和xb的大小关系，问题就转化成求wb有多少种组合大于xb了。可以用同样的算法递归解决。&lt;/li&gt;
&lt;li&gt;当'?'小于xp时，W一定小于X，忽略不计。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以这种情况下的最终结果由1、2两部分组成。&lt;/p&gt;
&lt;p&gt;理清了思路之后代码也就很简单了。C语言版的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                        &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                        &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// get input&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里问题还没有解决，因为性能不过关。在CSDN上测试代码的时候告诉我执行时间超过3秒。&lt;/p&gt;
</summary><category term="programming"></category></entry><entry><title>Python Challenge 2</title><link href="/blog/python-challenge-2.html" rel="alternate"></link><updated>2013-10-29T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2013-10-29:python-challenge-2.html</id><summary type="html">&lt;div class="section" id="whom"&gt;
&lt;h2&gt;15. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/uzi.html"&gt;whom?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这一关的提示信息主要来自图片中的日历，上面圈出的日期是1*6年1月26日。既然问题是“whom?”，那么答案一定是跟这一天有关的某个人。网页的源文件里有两行注释:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- he ain&amp;#39;t the youngest, he is the second --&amp;gt;&lt;/span&gt;
...
&lt;span class="c"&gt;&amp;lt;!-- todo: buy flowers for tomorrow --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不是最年轻的，是第二年轻的，那么这一天应该是生日。网上查了一下，1月26日出生的名人，出生年份末位是6的，只有几个，明显都不靠谱。再看第二条注释里写得是为明天买花，也许应该是1月27日出生的人。再查一下，还真有一个比较靠谱的：莫扎特。试试mozart.html，果然进入了下一关。不过这里根本没有用到任何编程。其实这题的本意，应该是让我们推算出年份，而不是直接去上网搜索。日历上显示1月26日是星期一，所以我们先要找出以1开头以6结尾并且1月26日是星期一的所有年份，然后其中倒数第二个就是我们要的答案。另外还有一个线索，日历右下角显示2月份有29天，那么这一年必须是闰年。我的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isleap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-me-get-this-straight"&gt;
&lt;h2&gt;16. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/mozart.html"&gt;let me get this straight&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同样是图片题，图中有很多的粉红色线段，看起来每条长度应该是一样的，并且两端都白点。“get this straight”，是不是就是指把每一行中的粉红色线段对齐呢？试一下，结果就出来了，下一关是romance。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mozart.gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="eat"&gt;
&lt;h2&gt;17. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/romance.html"&gt;eat?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;to be continued&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Data Science在线课程第1、2周</title><link href="/blog/datasci-1.html" rel="alternate"></link><updated>2013-05-17T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2013-05-17:datasci-1.html</id><summary type="html">&lt;p&gt;在Coursera上报了个Data Science的课程，一共8周。课程内容相当丰富，并且有机会参与第三方机构提供的project解决实际问题，还有一个可选的作业需要用Amazon AWS处理大约1TB的数据，相当的有点儿意思。&lt;/p&gt;
&lt;p&gt;感兴趣的请参考链接： &lt;a class="reference external" href="https://www.coursera.org/course/datasci"&gt;课程主页&lt;/a&gt;  &lt;a class="reference external" href="https://github.com/uwescience/datasci_course_materials"&gt;作业资料&lt;/a&gt;  &lt;a class="reference external" href="https://www.dropbox.com/sh/uwrt35dklb9s6db/bzET2Rz8X4/datasci"&gt;视频和幻灯片&lt;/a&gt;  &lt;a class="reference external" href="https://spark-public.s3.amazonaws.com/datasci/Coursera-Data-Science-Ubuntu.ova"&gt;课程虚拟机&lt;/a&gt; (&lt;a class="reference external" href="https://spark-public.s3.amazonaws.com/datasci/Coursera-Data-Science-Ubuntu.ova?torrent"&gt;Torrent&lt;/a&gt;)&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;第一周：导论&lt;/h2&gt;
&lt;p&gt;按照规矩，第一堂课通常是扯淡为主，装B为辅。讲一讲概念和意义，再举几个栗子，轻松写意，不在话下。根据我的理解，所谓Data Science，是指综合运用 &lt;strong&gt;多种技术&lt;/strong&gt; ，加上一点 &lt;strong&gt;hacking&lt;/strong&gt; 技巧，针对某一 &lt;strong&gt;特定领域&lt;/strong&gt; 的问题，从原始数据中提取有价值信息的过程。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;多种技术&lt;/strong&gt; 几乎包括了当下所有热门的技术，比如关系数据库、NoSQL、并行处理、云计算、统计学、机器学习、数据挖掘、可视化等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hacking&lt;/strong&gt; 在面对海量数据的时候，常规手段很难满足性能的要求，需要深度优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定领域&lt;/strong&gt; 并非纯粹的计算机科学，而是计算机技术在其他学科的应用，属于交叉学科。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前在研究领域，各个学科都面临者数据处理的挑战。比如太空望远镜返回的图片，生物基因序列，传感器网络的监控数据，社交网络产生的信息等等，都是重要的研究素材，需要能够及时、有效的处理。Data Science以这些数据为主要研究对象，关注的是对数据的整理、解读以及重新表述。从这个角度来将，未来所有的科学都会是data science，重要性不言而喻。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="twitter"&gt;
&lt;h2&gt;作业1：Twitter情感分析&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题1：抓取twitter数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个问题是热身的，课程材料里面已经提供了Python代码，只要在twitter创建一个app，把key和secret填到代码里，然后运行就ok了。得到的数据都是json格式的，用python的json.loads()函数可以转换成dictionary。为了方便后面的工作，我改了一下代码，过滤掉了所有非英语的条目。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题2： 计算tweet的情感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AFINN-111.txt文件里包括了一些常见的英文词汇的情感值，取值在-5到5之间。以此为基础，可以通过对tweet中所有词汇的情感值求和来估算其情感值。未知词汇情感值按0来计算。具体做法是：提取出tweet的text属性，用正则表达式（re.findall()）找出其中所有连续的英文字符（不考虑非英语内容），统一转换成小写，然后在AFINN里面查找相应的情感值，求和。目前只能做这么多了，如果要考虑拼写错误或者非标准的写法，问题就复杂了。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题3： 计算新词语的情感值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据已知词汇的情感值，可以算出tweet的情感值，反过来根据tweet的情感值，也可以大致估算未知词汇的情感值。这里没有给出具体的算法，只给了一个 &lt;a class="reference external" href="http://www.cs.cmu.edu/~rbalasub/publications/oconnor_balasubramanyan_routledge_smith.icwsm2010.tweets_to_polls.pdf"&gt;参考文献&lt;/a&gt; 。参考其中的方法，我的做法是这样的：对每一个未知词汇，统计它在积极和消极的tweet中出现的次数，用前者除以后者，得到的就是这个词汇的近似情感值。为了跟AFINN的表示方法保持已知，我取了个对数，这样结果的正数表示积极，负数表示消极。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题4： 计算词频&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个问题在3里已经解决了。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题5： 哪个州最姓福？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在问题2的基础上，对来自不同州的tweet的情感值分别求和，结果最大的州最姓福，要求输出两个字母的州名缩写。这里涉及的主要问题是如何判断tweet发出的位置。问题1得到的数据里包括了两个属性place和coordinates，可作为判断依据。优先使用place，这个是经过twitter解析之后的位置，格式规范而且比较准确，直接检查里面是否包括某个州的名字就可以了。&lt;/p&gt;
&lt;p&gt;如果只有coordinates，可以用下面方法大致判断其所在的州：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dev.maxmind.com/geoip/legacy/codes/state_latlon"&gt;这个表&lt;/a&gt; 给出了美国各个州的平均坐标。对于一个给定的坐标点，可以计算出它跟表中每个点的距离（按照球面算，算法参考 &lt;a class="reference external" href="http://stackoverflow.com/questions/6366408/calculating-distance-between-two-latitude-and-longitude-geocoordinates"&gt;这里&lt;/a&gt; ），距离哪个州最近，就认为该点属于哪个州。&lt;/p&gt;
&lt;p&gt;当然这个方法很不精确，不过对于这个作业来说足够了。&lt;/p&gt;
&lt;p&gt;当place和coordinates属性都为空的时候，可以参考user信息，用user的location属性来代替。因为这个信息是用户自己填写的，所以既不能保证真实可靠，也不能保证格式规范，要处理起来非常麻烦，这里只能偷懒了，“假定”用户诚实而又严谨。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题6： Top 10 hash tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计hash tag出现的频率，输出频率最高的10个。跟4差不多，只是多了一个计算top 10的步骤。这个做起来也很简单，python的heapq模块提供了函数nlargest()。假设之前统计的hash tags出现次数保存在一个名为tag_counts的dictionary，那么只需要一句话就可以搞定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlargest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个参数10是输出结果的个数。第二个是输入数据，必须是iterable对象。最后一个参数key是一个callable对象，简单说就是函数，在排序的时候用这个函数来取得比较大小用的键值，这里用一个匿名函数实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;第二周：关系数据库和关系代数&lt;/h2&gt;
&lt;p&gt;这周的课程信息量略大。读本科的时候关系数据库这门课上了有大半个学期。而这里涉及到的内容似乎比上课时讲得还多，不但讲了关系代数、SQL语言，还对DBMS的内部原理进行了一点简单的介绍。具体就不总结了，写不过来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;作业2：基于数据库的文本分析&lt;/h2&gt;
&lt;p&gt;前面几个题目很无聊，就是复习一下SQL。后面两个是模拟搜索引擎的原理，还比较有意思。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(h) 计算相似性矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表frequency: &amp;lt;docid, term, count&amp;gt;记录了一些文档中词汇出现的次数。把这个表看作一个稀疏矩阵D(docid为行，term为列)，相似性矩阵就是D跟自己的转置相乘。前面一题里已经解决了 &lt;a class="reference external" href="http://stackoverflow.com/questions/6582191/sql-query-for-multiplication"&gt;用SQL实现矩阵乘法&lt;/a&gt; 的问题，这里无非是多了一个转置而已，做起来也很简单，只要把SQL语句里的行和列互换一下就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;计算完整的相似性矩阵要花很长时间，可以在from语句后面加个条件where a.docid &amp;lt; b.docid，这样可以只计算一般，另一半是完全对称的。不过这样还是要用很长时间，而题目只要求提交10080_txt_crude和17035_txt_earn两个文档的相关性，所以完全可以用where a.docid='10080_txt_crude' and b.docid='17035_txt_earn'。&lt;/p&gt;
&lt;p&gt;这里得到的是未经正规化的相似性，实际中使用的通常是余弦相似性。把词频矩阵D中的每一行看作一个文档的N维特征向量，那么两个文档的相似性就是它们各自的特征向量在N维空间的夹角的余弦，夹角越小，相似性越高。关于余弦相似性可以参考 &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html"&gt;阮一峰的博客&lt;/a&gt; , 讲得很细致。这里只要稍微扩展一下，实现起来并不困难。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(i) 关键词搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了相似性矩阵的算法，关键词搜索就变得很简单。把关键词列表也当作一个特殊的文档，加入到frequency表中，计算相似性矩阵。这里只关心包含关键词列表的结果，跟关键词列表相似性比较高的文档就是搜索结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;washington&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;taxes&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;treasury&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="big data"></category><category term="online courses"></category></entry><entry><title>Profiling Python</title><link href="/blog/profiling-python.html" rel="alternate"></link><updated>2013-03-29T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2013-03-29:profiling-python.html</id><summary type="html">&lt;p&gt;最近用Python写一些实验工具，性能不是很满意。开始以为是I/O问题，后来发现运行的时候CPU wait时间之占很少一部分，看来瓶颈还是在计算本身。于是想profile一下找一找瓶颈。Python下已经又了不少profiling的工具，这里介绍两种：cProfile和Line Profiler。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;cProfile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;cProfile是Python内置的分析工具，用C语言实现，开销比较小。cProfile可以进行函数级别的profiling，能够统计程序运行过程中在每个函数上花费的时间。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m cProfile -o output my_script.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行该命令，将运行my_script.py脚本，统计每个函数的执行时间并记录在output文件中。&lt;/p&gt;
&lt;p&gt;推荐使用cProfile的另一个原因是它有一个很好的可视化工具，RunSnakeRun。RunSnakeRun可以用pip安装。运行&amp;quot;runsnake output&amp;quot;，可以很直观的看到每个函数花费时间的多少。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Line Profiler&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有时候仅仅进行函数级的profiling还不够，需要更高精度的分析。Line Profiler是一个第三方的工具，可以精确的记录每一行代码的执行时间。&lt;/p&gt;
&lt;p&gt;Line Profiler也可以用pip安装。使用时在需要profiling的函数前面加上decorator: &amp;#64;profile。然后执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;kernprof.py -l my_script.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;脚本运行结束后，结果将输出到文件my_script.py.lprof中。查看结果，可以调用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m line_profiler my_script.py.lprof
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出的结果是每一行python代码的运行时间占总时间的百分比。&lt;/p&gt;
&lt;p&gt;使用line profiler进行高精度的分析会增加很多额外的开销，大大的增加程序执行时间。在实际发现，在一个大几百行的程序中，对一个不到十行（有一个循环）的函数进行profiling，居然让整个程序的执行时间增加了几乎一倍。&lt;/p&gt;
</summary><category term="performance"></category><category term="python"></category></entry><entry><title>关于CPU Cache零碎</title><link href="/blog/cpu-cache.html" rel="alternate"></link><updated>2012-10-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-10-05:cpu-cache.html</id><summary type="html">&lt;p&gt;读SCM方面的paper，经常要涉及到CPU Cache的一些东西，以前只关注外存了，对这些方面了解很少，这里把一些知识记录下来备忘。&lt;/p&gt;
&lt;div class="section" id="cache-mode"&gt;
&lt;h2&gt;Cache Mode&lt;/h2&gt;
&lt;p&gt;CPU Cache通常支持三种模式，Write-through、Write-back和Write-combining。前两种就比较常见，不需要解释了。Write-combining就比较特殊，按照我的理解它是一种针对大量写操作而优化的模式。对于写，它跟WB类似，把数据缓存起来，然后用burst方式一起写到memory，提高带宽的利用率。但是这种模式不保证指令按正确顺序执行，特别是对于读写混合的操作，比如写/读/写这样的指令序列，实际执行起来可能变成了读/写/写，如果前后指令之间存在数据依赖，执行结果就会出错。所以Write-combining不能用于普通的内存。目前这种模式的唯一应用是显存，因为有大量数据要写，而且对顺序性要求不高。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mtrr-pat"&gt;
&lt;h2&gt;MTRR &amp;amp; PAT&lt;/h2&gt;
&lt;p&gt;现代处理器通常都支持对不同的内存地址范围指定不同的cache模式，实现的方法就是MTRR和PAT。MTRR全称是Memory Type Range Registers，是CPU提供的一组特殊寄存器，用来指定某些内存地址范围的缓存模式。在Linux下可以通过/proc/mtrr文件查看当前的状体。比如我的是这样的：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
reg00: base=0x000000000 (    0MB), size= 2048MB, count=1: write-back
reg01: base=0x07ff00000 ( 2047MB), size=    1MB, count=1: uncachable
reg02: base=0x0d0000000 ( 3328MB), size=  256MB, count=1: write-combining
&lt;/pre&gt;
&lt;p&gt;前面2GB是主存，之后的1MB大概是映射给了BIOS ROM，最后256MB是显存。&lt;/p&gt;
&lt;p&gt;PAT全称是Page Attribute Table，可以认为是MTRR的升级版，二者的关系类似于分段(segmentation)和分页(paging)的关系，MTRR只能粗粒度的指定某个地址范围，而且数量有限，但是PAT可以跟页表一样精确到页，为每个页面分别设置缓存模式。Intel从Pentium III开始支持PAT，很多其他CPU也支持。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="physically-or-virtually-indexed"&gt;
&lt;h2&gt;Physically or Virtually Indexed&lt;/h2&gt;
&lt;p&gt;CPU Cache是用地址来索引的，当访问某个内存地址时，只要在索引里查找是否有这个地址，就知道请求的数据在不在cache里。但是现代处理器都是有分页机制的，内存地址有物理地址和虚拟地址两种，用哪种地址来做cache索引就成了一个问题。Either way has its pros and cons. Physically indexed cache is simple, but it's also slow for lookups. Because it depends on MMU to translate virtual address to physical address. Things will get worse when TLB miss. Virtually indexed cache is much faster. However, it must deal with alias problem, i.e. a single physical address is mapped to multiple virtual addresses.&lt;/p&gt;
&lt;p&gt;x86是用物理地址做索引的 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clflush-mfence"&gt;
&lt;h2&gt;clflush &amp;amp; mfence&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;clflush&lt;/em&gt; instruction invalidate a cache line through all cache levels. If the cache line contains uncommited data, it will be written to memory first.&lt;/p&gt;
&lt;p&gt;Similar to barrier I/O(BIO_BARRIER) at block level, the &lt;em&gt;mfence&lt;/em&gt; instruction is a mechanism to implement write ordering. It enforces that data updated before the instruction is commited before subsequent ones.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.motherboardpoint.com/l1-l2-caches-and-mmu-t152345.html"&gt;http://www.motherboardpoint.com/l1-l2-caches-and-mmu-t152345.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="cache"></category><category term="scm"></category></entry><entry><title>Linux中的Buffer和Cache</title><link href="/blog/linux-buffer-cache.html" rel="alternate"></link><updated>2012-10-04T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-10-04:linux-buffer-cache.html</id><summary type="html">&lt;p&gt;在Linux系统中查看内存使用情况（free，vmstat，/proc/meminfo）的时候，会有buffer和cache两项数据，一直搞不清这两个有什么区别，最近看到Robert Love &lt;a class="reference external" href="http://www.quora.com/What-is-the-difference-between-Buffers-and-Cached-columns-in-proc-meminfo-output"&gt;在Quora上的解答&lt;/a&gt; ，总算是明白了。&lt;/p&gt;
&lt;p&gt;在Linux内核中，cache是指文件系统的page cache，所有对普通文件（不包括设备文件）的I/O都是通过page cache进行的。读文件时，会直接从page cache中返回数据。如果缓存不命中，则从磁盘读取请求的页面并加入到page cache中，然后返回。写文件则直接把page cache中对应的页面标记位dirty，然后由后台线程pdflush完成写回磁盘的操作。有一种情况例外：当进程使用direct I/O方式进行文件读写，此时会不会经过page cache。Linux对page cache采用惰性回收机制，只有当可用内存不足时才会从page cache中回收，因此系统中常常有大量内存空间被page cache占用。这样的做法最大限度的减少了磁盘I/O。&lt;/p&gt;
&lt;p&gt;Buffer则是指块设备I/O的缓冲区，其中保存的是不属于任何文件的一些数据块，比如文件系统的元数据，还有进行direct I/O所产生的缓存数据，也会存储在buffer里。Buffer的寿命要比cache短很多，通常当块级I/O请求完成，buffer就会很快释放，因此buffer所占用的空间通常很小。但是也有例外情况：如果开启了laptop-mode，内核对写入磁盘的数据会缓存比较常的时间，然后再一次性写入磁盘。这种方式适用于笔记本，可以让磁盘较长时间的保持spin down状态，以减少磁盘能耗。从2.4开始的内核实现中，buffer和page cache已经不做区分，可以把buffer理解成属于设备文件的page cache。&lt;/p&gt;
</summary><category term="linux"></category><category term="memory"></category></entry><entry><title>Python Challenge</title><link href="/blog/python-challenge.html" rel="alternate"></link><updated>2012-09-29T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-09-29:python-challenge.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.pythonchallenge.com/"&gt;Python Challenge&lt;/a&gt; 是一个python编程游戏。游戏里的每一关通过图片和文字给出提示信息，需要通过推理和编程来找到通往下一关的线索。网站还提供了一个wiki，汇总了各个关卡的不同解答方法，不过你需要先解出当前关卡之后才能看到。查看方法参见wiki首页上的说明。这些代码是学习python编程的好材料，值得细细推敲。&lt;/p&gt;
&lt;div class="section" id="warm-up"&gt;
&lt;h2&gt;0. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/0.html"&gt;warm up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;计算2的38次方，方法多多，最简单的是用python的乘方运算符“**”。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-making-trans"&gt;
&lt;h2&gt;1. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/map.html"&gt;what about making trans?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;很容易看出来，规则是每个字符的ASCII码加2得到新字符，所以有了下面代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;#the given text#&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后来想了一下，转换过程还可以换中写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解码出来一看，提示可以用maketrans()。。。水平太菜，否则看到本页的标题，就应该联想到这个方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocr"&gt;
&lt;h2&gt;2. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/ocr.html"&gt;ocr&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;数据和提示都在本页源码里，要求是找出出现次数最少的字符，也就是要对文本里面出现过的各种字符进行计数。于是有了下面代码：&lt;/p&gt;
&lt;p&gt;打印出结果一看，有几个字母只都出现了一次，显然它们组合起来就是下一关的地址。因为之前看了一点资料，所以我已经知道这里的结果是equality。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是我这里的解法实际上看不出来这几个字母在文本出的出现顺序，于是想办法改进一下。把字母出现的次数乘以100，再加上出现的次序，这样最后一排序，结果一目了然。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="re"&gt;
&lt;h2&gt;3. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/equality.html"&gt;re&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一看提示，觉得必须是正则表达式啊，何况本页的标题都提示了。不过还是犯傻了，以为只有一组匹配。后来看了别人的解答才明白是要找出所有的匹配组合，然后把每组中的small letter连起来。。。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="follow-the-chain"&gt;
&lt;h2&gt;4. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/linkedlist.php"&gt;follow the chain&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提示已经很明显了，“follow the chain”。用urllib.urlopen()读取页面“&lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=XXXX"&gt;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=XXXX&lt;/a&gt;”，得到的文本里面会有next nothing的提示。一直迭代直到没next为止。中间到80多次的时候会出现一个中断，不碍事，按照提示除以2继续。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;urlbase&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlbase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里直接用s.spilt()[-1]的方法取nothing的值其实不太准确，更准确的做法是找到“next nothing”串。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="peak-hell"&gt;
&lt;h2&gt;5. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/peak.html"&gt;peak hell&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个比第一关更坑爹。第一关不知道maketrans()至少还有笨办法可以解出来，这题不知道pickle根本没戏。我这种水平也只能靠google了。&lt;/p&gt;
&lt;p&gt;数据文件banner.p是一个经过pickle序列化的list，用pickle.loads()可以把文本转换成python对象（这个跟之前用过的json是一样的），转换的结果是一个list。然后根据这个list“画出”banner，就可以去下一关了。&lt;/p&gt;
&lt;p&gt;代码我就不剽窃了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-there-are-pairs"&gt;
&lt;h2&gt;6. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/channel.html"&gt;now there are pairs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;到这一关，我才知道第5关神马的简直弱爆了：这里没有任何文本提示。总是作弊就没意思了，自己先琢磨一下吧！&lt;/p&gt;
&lt;p&gt;老规矩查看页面源码，发现第一行注释里有个zip的提示，图片内容又是zip（拉链），那么解题的关键一定就是zip。&lt;/p&gt;
&lt;p&gt;Python里有个zip()函数，是不是需要用zip()进行处理得到结果呢？可是处理什么？这里没有给出任何需要处理的数据啊。&lt;/p&gt;
&lt;p&gt;本着破罐破摔的态度，我试了一下zip.html，居然有结果！得到的是一条提示信息：&lt;/p&gt;
&lt;p&gt;yes. find the zip.&lt;/p&gt;
&lt;p&gt;看来zip的方向是对了，不过还是不知道zip指什么。。。&lt;/p&gt;
&lt;p&gt;一觉醒来之后突然来了灵感，既然可以把channel换成zip，为什么不能把html换成zip呢？find the zip，是不是指zip压缩包呢？试了一下，果然！真正的题目原来在channel.zip里。&lt;/p&gt;
&lt;p&gt;跟第4关差不多，也是要不断找next nothing。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;90052&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果，在46145.txt里终止，有一句话：Collect the comments。文本里面没有comment，那应该就是zip文件里的comments了，看来还要处理压缩文件。搜索之，python还真能处理zip文件。提取出每个文件的注释，得到的还是一串没有意义的字符。观察了一下，里面出现的字母只有E、Y、O、N、G、X这6个，虽然不知道规律是什么，但是已经可以猜到结果就是oxygen了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smarty"&gt;
&lt;h2&gt;7. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/oxygen.html"&gt;smarty&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;第7关唯一的提示信息就是图片了，看来少不了要用PIL了。本来以为有什么捷径，调用某个函数就能解析出图片中类似条码的那一块东西，但是找来找去也没发现什么。只好再一次祭出笨办法。&lt;/p&gt;
&lt;p&gt;分析了一下，图片中的“条码”是许多块深浅不同的灰色块组成的，把这些块的颜色打出来一看，发现每一块的颜色值都是(x, x, x, 255)的形式，试着把所有的x按ASCII码表转换成字符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oxygen.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;608&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;果然得到了信息：&lt;/p&gt;
&lt;p&gt;smart guy, you made it. the next level is [105, 10, 16, 101, 103, 14, 105, 16, 121]&lt;/p&gt;
&lt;p&gt;这个list里共有9个元素，其中100以上的几个可以翻译成字符i、e、g、i、y，这显然不是答案。&lt;/p&gt;
&lt;p&gt;仔细想想就发现前面的解法有问题，如果两个连续的色块颜色一致，按上面的算法就会被识别成一个。所以这里的10实际上可能是110。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;“”&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;替换之后再转成字符，得到下一关的地址integrity。&lt;/p&gt;
&lt;p&gt;话说这题还真不能单靠程序来解，必须先找通过观察找到一些参数，比如“条码”的覆盖范围和每个色块的宽度。不过看过别人给的标准答案之后，还是自叹不如，倒不是不会用，是真想不起来还有这些用法。熟悉python，还需再接再厉！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-hard"&gt;
&lt;h2&gt;8. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/integrity.html"&gt;working hard?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;图片上隐藏着一个连接，不过需要用户名和密码才能打开。用户名和密码在页面源码的注释里，当然也是编码之后的。提示是inflate，应该跟压缩有关。观察发现un和pw的开头都是”BZ”，莫非是bzip2压缩过的？Google一下，python里面有模块bz2，试解压之，得到huge和file。记住用户名和密码，因为以后关卡的网页都需要这个账号才能打开。&lt;/p&gt;
&lt;p&gt;这一关还是比较容易的，标题大概就是暗示我们在hard working之余稍微放松一下吧！Next level！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-the-dots"&gt;
&lt;h2&gt;9. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/good.html"&gt;connect the dots&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看到这个标题，我以为跟图片上那些个黑点有关。后来发现源码里给出的first和second，里面的数值似乎是两两一组的，并且是渐变的。莫非这才是坐标？用PIL里面的画线函数试一下，果然，画出了一头牛！第一反应是cow，结果不对，它告诉我“it’s a male”。那就是bull了，过关！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;ImageDraw&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;good.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;first_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;second_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写完重新看了一下，觉得first到first_p的转换是不是有点儿多余了？有一种强烈的直觉告诉我：python如此强大的语言应该不会强迫我写这些没什么含金量的语句的。仔细看了一下PIL的文档，line()函数的参数xy不一定要是tuple的list，也可以直接用数值的list，那么这里其实可以直接用first和second作参数，根本不需要转换。有点好奇line()函数是怎么同时支持两种不同类型参数的，要判断参数类型，还是有其他办法？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-you-looking-at"&gt;
&lt;h2&gt;10. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/bull.html"&gt;what are you looking at?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提示：len(a[30]) = ? 图片隐藏链接指向sequence.txt，里面有一个数列a，看来是要找出a[30]的值，这个只能靠人脑了。很遗憾，i failed！搜索了一下这个数列，发现居然还是个比较有名的问题，数学上叫做外观数列（look-and-say sequence），也叫莫里斯数列，规律就是后一项是对前一项的描述，比如1211表示前一项是“1个2，1个1”。如果用纯数学的方法来求解，需要用到非常复杂的公式，不过对于计算机和人脑来说，就是个重复应用规则的过程，一个递归函数就可以搞定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mycount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好吧，从python的角度来看，这段代码一点儿也不sexy，特别是当我看了参考答案之后，这里正则表达式用得太妙了。另外wikipedia上给出的代码使用了generator，但是本质上跟参考答案是一样的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="odd-even"&gt;
&lt;h2&gt;11. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/5808.html"&gt;odd even&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;又是坑爹的一关，有用的信息只有一张图片，还有含义不甚明了的标题。不过仔细来看，这图片好像是两张不同图片合成的？是不是要把他们分离出来？经过反复试验，发现只要把奇数行奇数列或者偶数行偶数列的像素提取出来组成新的图片，就可以得到答案。这大概就是标题“odd even”的含义吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cave.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.bmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外我还不幸的发现，在Windows下用PIL，貌似最后保存文件只能用bmp格式，是我安装有问题？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dealing-evil"&gt;
&lt;h2&gt;12. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/evil.html"&gt;dealing evil&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;又是一个纯图片的谜题，我讨厌这个。开始以为跟上一关一样，要从图片里分离出隐藏信息，结果折腾了N久没有结果，只好求助于网络。结果发现要找的居然不是这个evil1.jpg。。。&lt;/p&gt;
&lt;p&gt;打开evil2.jpg，显示not jpg, gfx。下载evil2.gfx，得到一个数据文件。这里就要用到evil1.jpg了，上面显示的是将扑克牌分成5份，所以这里要做的是把evil2.gfx分成5份，就是5张不同的图片。&lt;/p&gt;
&lt;p&gt;下面的代码也是借来的，写得真是简洁，学习了！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;evil2.gfx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;.jpg&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看了官方给出的参考答案，要更完善一点。这里的5幅图片格式不同，需要用PIL来判断。这里用StringIO把字符串模拟成文件，然后通过Image.open()方法导入为图像。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;evil2.gfx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# every fifth byte, starting at i&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="call-him"&gt;
&lt;h2&gt;13. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/disproportional.html"&gt;call him&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;图片上的5键里隐藏了链接，指向../phonebook.php，打开得到一个XML，显示错误“Invalid document end at line 1, column 1”，显然是要提交参数。提示信息是“phone that evil”，“that evil”是不是指上一关中的evil2.gfx？试试把这个POST上去。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.pythonchallenge.com/pc/phonebook.php&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;evil2.gfx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果还是错误：“XML error: Not well-formed (invalid token) at line 1, column 1”。看起来是要提交一个XML文档。仔细看前面得到的XML，methodResponse比较眼熟，有点儿像是RPC，想起来有个叫XML-RPC的东西，上Wikipedia上一看，果然，返回的结果正好符合XML-RPC的定义，再看python的文档里面，有xmlrpclib。看来错不了，这里的“call him”指的是XML-RPC call。现在只需要搞清楚method和params。&lt;/p&gt;
&lt;p&gt;提示给的是“phone that evil”，那么method大概就是phone()，先试一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xmlrpclib&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.pythonchallenge.com/pc/phonebook.php&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmlrpclib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;disproportional&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到结果：He is not the evil。路子对了，参数不对。试过能想到的各种情况都不成功，只好求助网络，发现上一关里还有个evil4.jpg，用IE打开能看到“Bert is evil! go back!”（chrome里只能看到一个图片显示失败的标志）。把参数换成“Bert”，得到“555-ITALY”。。。居然还没结束。&lt;/p&gt;
&lt;p&gt;想想电话号码应该全是数字，按照手机键盘把ITALY换成数字“48259”，再试，还是不对。再次求助网络，原来结果就是italy，囧。。。&lt;/p&gt;
&lt;p&gt;那就去意大利吧！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="walk-around"&gt;
&lt;h2&gt;14. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/italy.html"&gt;walk around&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面是面包，下面是一张10000×1的图片，变形成100×100（否则还真看不见）。页面源码的注释里还有提示：remember: 100*100 = (100+99+99+98) + (…&lt;/p&gt;
&lt;p&gt;是不是要把这10000×1的图片按某种规则转换成100×100的？上面图片里的面包是一圈一圈向里收缩的，看起来这就是规律，注释里面的等式就是这个规律，100, 99, 99, 98四个数分别是第一圈四条边的长度，最后组合起来应该是这么一个序列：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="4"&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规律还是很明显，我的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wire.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的图片是一只猫，把上个本关链接中的italy换成cat，进入的页面上有一只猫的照片，上方的文字说：它的名字叫uzi。找了很久，发现这个网页上没有任何提示信息，最后才发现，原来下一关的题目不再这里，而是在uzi.html。&lt;/p&gt;
&lt;p&gt;&amp;lt;未完待续…&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Chinatown-Chijmes-Esplanade</title><link href="/blog/chinatown-chijmes-esplanade.html" rel="alternate"></link><updated>2012-09-15T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-09-15:chinatown-chijmes-esplanade.html</id><summary type="html">&lt;div class="section" id="chinatown"&gt;
&lt;h2&gt;牛车水（Chinatown）&lt;/h2&gt;
&lt;p&gt;牛车水是早期中国移民聚居的地方，因此保留了很多传统中国文化元素，现在也是比较著名的景点。乘地铁到紫线Chinatown站（NE4），从A口出就到了牛车水的步行街，狭窄的街道两边都是卖各种工艺品、纪念品的小店。在这里逛街的老外比较多，估计愿意花钱买东西的也大多是老外，所以这里出售的纪念品相比国内的景点要更国际化。既有中国特色的书画、筷子，日式的招财猫，也有印着Facebook，Youtube的文化衫。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="chinatown streets" src="http://seth-images.qiniudn.com/20120915/street2.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;人气还是挺旺的&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="english names in chinese calligraphy" src="http://seth-images.qiniudn.com/20120915/english_names.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;中西合璧，毛笔写的洋名字&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="heritage center" src="http://seth-images.qiniudn.com/20120915/heritage.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;Heritage Centre，门前这辆车大概也是古董&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="tintin shop" src="http://seth-images.qiniudn.com/20120915/tintin.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;Tintin Shop，里面全是《丁丁历险记》的周边产品，都不便宜&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="food street" src="http://seth-images.qiniudn.com/20120915/food.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;牛车水的美食街，有很多特色小吃，比如炒粿条，就是《初恋红豆冰》里面打架鱼的妈妈炒的那个东西，跟河粉差不多，加上鸡蛋、豆芽、鲜蛤之类的配料炒，有不少老外在哪儿吃&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在拥挤的步行街里一通瞎转，就到了佛牙寺。第一感觉是真热闹，充分体现了中国人多的特点，不过多的不是游客，而是和尚。大堂里坐得满满当当的全是僧人（可能也不全是，还有俗家弟子之类的），由中间法台上的大和尚带着一起念经。不过很多信佛的人还是很虔诚的，在门口会烧几株香拜两拜。这里进佛堂不能穿得太暴露，穿短裙、短裤、背心的，门外有提供专门的毛毯，包起来才能进。佛堂里不能拍照，不知道是不是跟旁边的POS机有关。。。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="temple" src="http://seth-images.qiniudn.com/20120915/temple.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;佛牙寺&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="people's park" src="http://seth-images.qiniudn.com/20120915/peoples_park.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;珍珠坊，里面有百货、小吃，还有很多旅行社，更有不少专门办理汇款的店面，估计很多在这边打工的中国人都会来这里汇款吧&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="mid-autumn decoration" src="http://seth-images.qiniudn.com/20120915/mid-autumn.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;中秋节要到了，这里早早的就开始准备&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="lanterns" src="http://seth-images.qiniudn.com/20120915/lanterns.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;街上挂的全是彩灯&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;比较意外的是，居然还发现了一座印度寺庙。其实就是一个小院子，中间有个小厅供着佛像。这里要冷清很多，只有少数几个工作人员，参观的人也不多。进门必须赤脚，带相机拍照还要交钱，所以里面就没拍了。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="indian temple" src="http://seth-images.qiniudn.com/20120915/indian_temple.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;不知名的印度寺庙，上面的雕像比较精致，也不知道都是些什么含义&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在离印度庙不远的地方，碰到一个印度哥们儿，跟我打听chinese temple怎么走，这时候就觉得初中学的英语还是有点用的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chijmes"&gt;
&lt;h2&gt;赞美广场（Chijmes）&lt;/h2&gt;
&lt;p&gt;从牛车水出来，回到Chinatown地铁站，坐地铁紫线两站到Dhoby Ghaut（NE6），转环线到Bras Basan（CC2），出站向东走没多远，在Victoria Street路口就是赞美广场了。这里就是典型的欧洲范儿了，哥特式建筑，很有历史韵味。以前是天主教圣婴女修院，现在教堂已经改成了Chijmes Hall，有时会举办音乐会之类的活动，据说也是结婚的好地方。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="chijmes" src="http://seth-images.qiniudn.com/20120915/chijmes.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;路对面就是赞美广场&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="chijmes2" src="http://seth-images.qiniudn.com/20120915/chijmes2.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;Chijmes Hall&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="chijmes courtyard" src="http://seth-images.qiniudn.com/20120915/chijmes_courtyard2.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;后面的院子，貌似都是各种餐厅，没事可以过来小资一下&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;赞美广场对面是教堂，正好赶上有活动。到门口的时候牧师正在带着大家祷告，等祷告完了我就溜进去凑热闹。之后有两位姐妹（不知道是不是神职人员）带着大家读圣经，英文很标准，声音很好听。读过几段之后牧师就开始讲道，情绪饱满，绘声绘色，但是没听懂多少，就听到一直讲“kill the ego”。我没兴趣听这些冗长的演说，坐了20多分钟就闪了。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="church" src="http://seth-images.qiniudn.com/20120915/church.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;隐隐约约可以看到里面人不少&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="esplanade"&gt;
&lt;h2&gt;Esplanade&lt;/h2&gt;
&lt;p&gt;如果从Dhoby Ghaut沿着紫线再往前一站，就可以到印度人聚居的Little India，不过今天有别的安排，不去了，直接去滨海湾。这段时间的经验告诉我，新加坡真的很小，地图上的距离完全不可怕，所以我决定走过去，顺便欣赏街景。从赞美广场出来沿街向南走，到Stamford Road再左转向东。快到滨海湾的时候，发现路边都有很高的防护网，甚至还有看台，不知道是做什么用的。后来才知道，这里就是F1新加坡站的滨海湾赛道。。。干，我横穿了F1赛道。。。F1新加坡站的比赛已经在上周末（9月23日）举办了，德国车手维特尔在混乱之中拿下冠军，可惜木有银子买票去看。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="f1 grandstand" src="http://seth-images.qiniudn.com/20120915/grandstand.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;路边看台，就这么个破座位也得几百新元&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="f1 marina" src="http://seth-images.qiniudn.com/20120915/f1_marina.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;网上的图，感受一下世界上唯一的F1夜间公路赛&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="pique advertisement" src="http://seth-images.qiniudn.com/20120915/pique.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;公交站的广告牌，听说这位帅哥把夏姨的肚子搞大了？&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;看到榴莲壳的时候，就差不多到了。榴莲壳是新加坡著名的 &lt;a class="reference external" href="http://www.esplanade.com"&gt;滨海湾艺术中心&lt;/a&gt; ，有剧院、音乐厅等好几个场馆，硬件设施一流，有机会要去见识一下。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="esplanade" src="http://seth-images.qiniudn.com/20120915/esplanade.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;榴莲壳，也有人说像苍蝇的眼睛&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="underpass" src="http://seth-images.qiniudn.com/20120915/underpass.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;看到这个标志我就下去了&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="carpark" src="http://seth-images.qiniudn.com/20120915/carpark.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;结果直接到了Esplanade的地下停车场，里面几乎没有人，感觉毛毛的，像恐怖片场景&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;今天要去的是榴莲壳旁边的露天剧场，有马来艺术节的免费演出（榴莲壳和露天剧场，吊丝和高富帅的距离），Songs from Movies，由新加坡本地的一个乐团Orkestra Melayu Singapura重新演绎经典马来西亚电影中的歌曲。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="malaysian music show" src="http://seth-images.qiniudn.com/20120915/show.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;表演即将开始，最右边的高妹挺可爱的，朕决定临时册封她做了45分钟的女神&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;欢快的开场曲目&lt;br&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/BOAHl2GrIo4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;div&gt;女神出场了&lt;br&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/cL0RO6mfZhQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;虽然一句听不懂，但还是觉得马来西亚的音乐挺给力的。可能因为华人也比较多，所以在审美观上比较接近。另外也有一些印度音乐的影子，比较热情欢快。看来马来西亚的音乐氛围不错，难怪能为华语乐坛贡献不少人才。&lt;/p&gt;
&lt;div&gt;我唯一记住名字的就是这首“Isabella”，是90年同名电影的主题曲吧，好像是讲两个地位悬殊的男女之间的爱情故事，影片结尾男主角为女主角唱这首歌的片段很感人。这个视频是04年的演唱会版本，演唱者貌似就是电影主演，岁月是那啥啊！&lt;br&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/_SrQRnQtpI8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;最后附送一个财富之泉，据说是世界上最大的喷泉。从滨海湾向北走，过两条街就可以到达。不过这里的马路上没有人行道，过第一条街要走天桥，之后下Esplanade地铁站，下面有通道直接通往财富之泉的地下广场。去的时候没有激光表演，只在水幕上打了一行welcome，很遗憾。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="fountain of wealth" src="http://seth-images.qiniudn.com/20120915/fountain.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;自称“largest”，不知道有没有过时&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="fountain of wealth" src="http://seth-images.qiniudn.com/20120915/fountain2.png" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;地方太小，拍不到全景&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="travel"></category><category term="singapore"></category></entry><entry><title>狮城印象</title><link href="/blog/singapore-impression.html" rel="alternate"></link><updated>2012-09-08T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-09-08:singapore-impression.html</id><summary type="html">&lt;p&gt;准备3个月，8月底成行。下午的高铁到广州，转地铁去机场，再坐凌晨的廉价航班（这个大概是最便宜的路线），一番折腾，次日清晨终于到达新加坡。出机场第一感觉是天气有点闷热，跟武汉比较像，住过几天才知道，这天气比武汉（夏天）舒服多了，白天没有那么热，晚上更是凉快，睡觉的时候电扇开最低档还有点儿凉，根本不需要空调。比较烦的是雨多，到这里头两三天，就连续下雨，而且一下就是大到暴雨，马上十月就到雨季了，雨会更多。不过雨水是这里重要的淡水来源，本地人应该会觉得多多益善。新加坡最低气温也有20多度，我终于可以像毛伟人一样全年冷水浴了！&lt;/p&gt;
&lt;p&gt;新加坡的人还是比较热情和友好的，第一天报到的时候，在电梯里就有人用中文跟我们打招呼，还有个老外主动帮忙指路。服务人员的态度也都很好，当然这种友好是职业性的。新加坡人都比较守规矩（这大概要得益于比较严格的法律，新加坡的鞭刑貌似是很出名的），比如过马路的时候，在没有红绿灯或者路边有黄灯的地方，是车让人的，按照国内的习惯，当然是安全第一，等车先过，但即使我们已经在路边站定，司机也会停下来等我们，还挺尴尬的。这里各种条条框框也很多，到处都能看到罚款标志。今天下午在纪念品商店看到一个马克杯，上面印满了新加坡的各种罚款标志，然后颇具调侃意味的写上一句：Singapore is a &amp;quot;fine&amp;quot; place。&lt;/p&gt;
&lt;p&gt;虽然这边华人很多，但英语还是很重要的，因为很多工作人员，比如超市收银员，前台接待、管理员、保安等都不是华人，还有大街上如果要问路什么的，有些看着像华人的其实也不讲中文，所以还是要习惯用英语交流。不过各种带口音的英语真的不大容易听懂，估计要过一段时间才会习惯。有时候我搞不清楚对方的情况就讲英文，结果对方跟我讲中文，也挺尴尬的。讲英语最重要的是单词，只要词对了，语法不对基本也还可以理解，有时候甚至根本不需要说整句，只要几个单词就可以完成基本的交流。说到单词，用来表示街道的词汇好多，我已经见过八种：avenue，road，crescent，way，highway, street，link，rise。&lt;/p&gt;
&lt;p&gt;新加坡号称是人口密度最大的国家，但是完全感觉不出来人多，办什么事情都不怎么排队，去办TEP card的时候，感觉坐下没有两分钟就到我了。等得最久的是在DBS开户，其实我前面也只有4、5个人，而且有两个counter一起办理，最后还是等了1个多小时，因为办理的时候都讲得比较详细，所以花的时间比较多。街上也看不到很多人，即使是在景点比较集中的市政区，也不觉得人多。公交车站基本上不需要排队，因为人都很少，地铁有时候人会多一点儿，但是也算不上拥挤。最挤的大概要算国大里的免费班车了，这个跟国内有一拼。&lt;/p&gt;
&lt;p&gt;公交和地铁全世界都差不多，不过这里的地铁里禁止吃喝。公交就比较坑爹，它竟然不报站，甚至连个电子显示牌都没有。人少的时候很多站不停，下车必须提前按铃，之前完全没有准备，所以第一次就坐过站了。后来再坐公交，基本都是拿着手机开着GPS才敢坐。&lt;/p&gt;
&lt;p&gt;我在这边的实习的薪水跟在学校差不多（当然单位不一样），按照这个收入水平来算，这边的物价还是比较便宜的。附近的餐厅$5就可以吃的比较丰盛了，如果在国大里面吃，据说会更便宜。去过clementi mall，貌似一般的衣服二、三十块就可以搞定。不过如果在国内挣银子到这边消费，还是很心疼的。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="milk" src="http://seth-images.qiniudn.com/singapore/milk.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;这么大一瓶新西兰纯牛奶，1升装，不到$2&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;新加坡多元文化真不是盖的，东洋鬼子、西洋鬼子、烤肉棒子、印度阿三还有东南亚地区的各国人随处可见。公共场所，比如地铁站的标志牌，四种语言（中文、英文、马来文、印度文）是基本配置。民以食为天，这里聚集了各国人等的同时，也聚集了亚洲乃至世界各地的美食，可以算是吃货的天堂，基本上随便找个地方都能吃到中餐、西餐、印度、穆斯林、东南亚还有日韩的各种风味，不过正宗与否还要另当别论，反正我见过的中餐大部分跟国内的区别还是挺大的，只在国大里面吃过一顿比较够劲的川菜，可能这边的中餐以南方饮食为主吧。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="nus" src="http://seth-images.qiniudn.com/singapore/nus.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;NUS的运动场，基本上能想到的体育活动都有。那天晚上跟两个老外打球，一个胸部比女生还丰满，另外一个肩膀到我头顶，老子还跟他们抢篮板有木有！&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;不同的民族还带来了各种的宗教，这里很多人都是有信仰的，比如我们房东夫妻俩就是信基督的。新加坡有很多教堂、寺庙和清真寺。我们楼下就有一坐教堂，教堂的主日崇拜还分英语、华语、厦语。不远的地方还有一所卫理会小学。今天在市政区还碰到有人发法X功的宣传小册子……这个不算宗教，反正我不承认。新加坡一年有十几个公共假日，涵盖了各个民族/宗教的重要节日。不过即使过节也只会多一天假期，没有黄金周神马的，而且作为苦逼的实习生也没有年假，想来个东南亚一条龙还是有点难度。&lt;/p&gt;
&lt;p&gt;说到过节，上周刚好赶上中元节，见到很多人自己搭个小台子烧香摆供品祭奠先人，有的供品很丰盛，不但有鸡鸭水果点心，甚至还有奶茶之类的饮品。牛车水那边貌似还有活动。在国内反正我是没有见过有人过中元节的，只有我等高校男吊丝偶尔会拿鬼节说一下事。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="bucket" src="http://seth-images.qiniudn.com/singapore/bucket.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;小区楼下专门放了铁桶供大家烧香烛&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;新加坡的房子貌似是很贵的。这边的住房一般分组屋（HDB）、公寓（Condo）和别墅三种，组屋是比较便宜的，大概相当于经济适用房，但是其实条件也不错，每过几年都会重新粉刷，所以即使是比较老的房子，看起来也很新。卫生就更不用说了，一年有好几次定期的清洗，还有pest control部门会定期灭蚊。而公寓一般都会有免费的游泳池、健身房、BBQ甚至是桑拿。房子一楼是不住人的，沿街的就做店面，其他的就空出来供人休息。靠近西海岸有别墅区，都是三层小楼。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="bulletin" src="http://seth-images.qiniudn.com/singapore/bulletin.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;楼下公告栏，左上角是wash schedule，右下角是灭蚊的通知&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="puss" src="http://seth-images.qiniudn.com/singapore/puss.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;小区里的猫，眼神特别萌，还会乘电梯，每次都让我想到puss in boots&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;+++++++++++++++++++++++ 分割线：西海岸 ++++++++++++++++++++++++&lt;/p&gt;
&lt;p&gt;西海岸主要是巴西班让集装箱港口，貌似以前是军港，没什么好玩的地方。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="west coast highway" src="http://seth-images.qiniudn.com/singapore/west_coast_highway.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;West Coast Highway&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="how par villa" src="http://seth-images.qiniudn.com/singapore/how_par_villa.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;虎豹别墅，靠近西海岸的一个别墅区&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="west coast park" src="http://seth-images.qiniudn.com/singapore/west_coast_park.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;West Coast Park，像这样的公园很多，都是免费的，不少人在里面跑步或者骑车&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="sea" src="http://seth-images.qiniudn.com/singapore/sea.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;到海边儿就该回头了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;++++++++++++++++++ 分割线：市政区（Civic District）+++++++++++++++++&lt;/p&gt;
&lt;p&gt;市政区在新加坡河的下游，接近入海口的地方，是游客比较集中的区域。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="clarke quay" src="http://seth-images.qiniudn.com/singapore/clarke_quay.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;新加坡河上的克拉码头，这里可以坐游船沿河转一圈&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="marina bay" src="http://seth-images.qiniudn.com/singapore/marina_bay.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;Marina Bay，远处三栋楼上顶条船，很有特点&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="car" src="http://seth-images.qiniudn.com/singapore/car.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;这是高富帅&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="merlion" src="http://seth-images.qiniudn.com/singapore/merlion.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;标志性的鱼尾狮&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="malay arts" src="http://seth-images.qiniudn.com/singapore/malay_arts.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;马来艺术节的表演，正在彩排，虽然看不懂，但是音乐很好听，节奏感很强&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="korean girl" src="http://seth-images.qiniudn.com/singapore/korean.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;棒子妞儿，偷偷拍下&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="bank of china" src="http://seth-images.qiniudn.com/singapore/pbc.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;中国人民很行！左边MayBank，右边citibank，背后是汇丰&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="acm" src="http://seth-images.qiniudn.com/singapore/acm.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;亚洲文明博物馆，应该是要收费的，不过今天是免费开放，人品爆发？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="painting" src="http://seth-images.qiniudn.com/singapore/color.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;博物馆前的广场上有很多人在用彩色粉笔涂地砖，不知道是神马活动&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="million dollar duck" src="http://seth-images.qiniudn.com/singapore/million_dollar_duck.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;这只鸭子值100万，因为赢得了一个什么鸭子漂流比赛的冠军。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="general fan" src="http://seth-images.qiniudn.com/singapore/general_fan.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;黑白无常，我今天才知道左边那个矮的是“范将军”。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="parliament" src="http://seth-images.qiniudn.com/singapore/parliament.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;国会大厦&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="bugis" src="http://seth-images.qiniudn.com/singapore/bugis.jpg" style="width: 90%;" /&gt;
&lt;p class="caption"&gt;武吉士街，这里的夜市比较有名，据说小吃很多（我们只找到了一点点。。。），也是购物好去处，卖得大部分是服装，时尚而且价格不贵，妹子应该会比较喜欢。当然如果是高富帅就直接带妹子去乌节路扫货吧。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="travel"></category><category term="singapore"></category></entry><entry><title>Google怎样做研究</title><link href="/blog/google-hybrid-research.html" rel="alternate"></link><updated>2012-07-25T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-07-25:google-hybrid-research.html</id><summary type="html">&lt;p&gt;Google的三位大牛Alfred Spector、Peter Norvig、Slav Petrov在7月份的ACM Communication上发表了 &lt;a class="reference external" href="http://cacm.acm.org/magazines/2012/7/151226-googles-hybrid-approach-to-research/fulltext"&gt;一篇短文&lt;/a&gt; ，探讨在Google公司里如何开展研究工作。Google称自己的研究方法为“混合式研究”（Hybrid Research），即新技术研究和产品开发不做区分，鼓励项目团队在研究和工程之间寻找最合适的平衡点。总结了一下，有几个要点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Google进行的研究目的在于快速改进其产品，为用户提供更高质量的服务。因此Google的研究主要集中在与其产品密切相关的领域，其中大部分都不是特别新的研究领域，但是仍然有改进空间，特别是考虑到Google的数据量和用户规模。过于关注产品本身可能会错失一些发展机会，因此Google也设置了访问学者、实习生、员工科研奖励等一系列的政策，鼓励开拓新的研究领域。&lt;/li&gt;
&lt;li&gt;基于服务的分发模式保证即使一个小团队也能够迅速创建强大的系统，并为用户提供服务。这个一方面得益于强大的基础架构，系统的设计、开发、测试和维护过程都得到了简化。另一方面也得益于庞大的用户群体，Google可以很容易获得数据，方便进行实证研究（empirical research），在系统复杂度越来越高、规模越来越大、分析技术难以描述的情况下，实证研究的方法越来越重要。&lt;/li&gt;
&lt;li&gt;迭代式研究，研究过程从一开始就要求编写产品代码或者接近产品级的代码，不会专门设计一个用于研究的原型系统。通常由一个团队自始至终负责整个迭代过程，从研究思路的探索，到软件的开发和维护，甚至还要帮助服务的运维。这种模式减少了从研究到工程的技术转换风险，也保证了其产品真正能够从研究成果中受益。&lt;/li&gt;
&lt;li&gt;把长期研究任务分割成短期、可度量的部分。这种方法有利于激励团队，同时也能够更早的带来商业效益。如果某个项目过于复杂难以细分，也能够坚持长期的投入力量进行研究，比如Google Translate、Chrome和Google Health。如果长期项目的方向出现问题，敢于调整工作重心，即使项目已经向公众发布。&lt;/li&gt;
&lt;li&gt;鼓励学术交流。Google认为，通过跟学术界的交流，可以获得有益的反馈信息，培养未来的员工，创造合作机会，发现新的研究方向等等。因此Google愿意公开很多研究成果，包括GFS、MapReduce这样的基础性研究的成果。Google衡量一项研究是否成功，标准之一是看其是否对学术接产生了重大的影响。这里的影响一方面是通过发表论文（Google在2003年发表了13篇论文，2006年130篇，2011年279篇，其中很多已经成为准教科书），也包括发布开源项目（最具代表性的莫过于Android和Chromium）以及参与标准的制定(比如spdy协议和webm等)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文中列举了Google的五种常见研究模式：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;以产品开发为主的团队在项目中提出了具有突破性的方案，变成了研究成果。Google的业务需要处理世界上最大的数据集，同时也要为大量用户提供服务，规模可谓空前，因此在产品开发的过程中遇到的问题很可能本身就是一个极有挑战性的研究课题。MapReduce、GFS、BigTable就是典型代表。&lt;/li&gt;
&lt;li&gt;研究团队的项目转化成新的产品或服务。Google翻译和语音搜索就是这样的项目。如果持续的研究能够进一步改进和扩展该产品，那么这种模式最合适不过了。&lt;/li&gt;
&lt;li&gt;研究团队的成果应用到现有的产品里。这是传统的研究模式，Google有大量真实的数据可以为研究提供支持，比如YouTube的声音和视频指纹算法，是在研究人员用大量真实数据进行测试之后，才投入生产应用的。&lt;/li&gt;
&lt;li&gt;工程团队和研究团队的合作项目，成果由工程团队转化到产品中。很多产品都需要新算法来提供高性能，在工程和研究两方面都有很大的挑战性。比如我们的市场算法研究小组和广告系统组，他们一起设计、优化和分析用于广告选择和优化的核心算法和市场机制。&lt;/li&gt;
&lt;li&gt;工程团队中的研究项目移交给研究团队。通常是一些具备通用性的研究项目，对多个产品都有重要意义，这种移交机制可以为这样的项目分配更多的时间和资源。比如YouTube的推荐算法，在多个工程团队里都遇到了同样的问题，于是就被转交给专门的研究小组，进行更加深入的研究。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="google"></category></entry><entry><title>关于今日项目演示的总结</title><link href="/blog/presentation-lessons.html" rel="alternate"></link><updated>2012-07-08T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-07-08:presentation-lessons.html</id><summary type="html">&lt;p&gt;演示是推广和展示的好机会，除了做得东西本身要靠谱，怎么去陈述也很重要。再好的东西也需要包装，说白了就是要吹。但是吹也是很讲水平的，吹不好牛皮容易破。&lt;/p&gt;
&lt;p&gt;陈述的关键在于短时间内让人明白你做的是什么东西，意义何在。虽然听众都是砖家，但是砖家也不是啥都懂，讲的不好不清楚，砖家就真的变砖了。今天的演示不算成功，总结下来，有如下收获：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;专有名词、英文缩写的使用要慎重，如果是已经广为人知的名词或缩写，比如ftp之类的，当然没有问题。但是如果是比较小众的，除非是必不可少，否则尽量不要用。陈述中忽然蹦出来这么一个词，很容易吸引听众的注意力，然后他又不明白这个词是什么意思，就会影响对整个陈述的理解。如果必须要用，就要解释清楚。&lt;/li&gt;
&lt;li&gt;少讲技术细节。有限的时间内不可能把技术细节讲清楚，对于不懂具体技术的人，讲得越多越难理解，而所谓专家，大部分都是这种人。而他们绝大多数情况下也不会关心这些细节。讲述中主要关注工作的内容、成果，还有目的和意义。具体实现细节，除非有人问，否则就不要提。&lt;/li&gt;
&lt;li&gt;重点讲做成了的东西，正在做的和打算做的最多提一下。现在讲的是成果，做出来才算，总是讲没做成的东西，会让人觉得你心里没底。&lt;/li&gt;
&lt;li&gt;尽量跟大家熟知（或者可能熟知）的东西联系起来。比如要说云计算，就要尽可能跟亚马逊、Google扯上关系。大树底下好乘凉，把自己的东西跟这些成功的产品联系起来，会让更有说服力。同时，从心理学的角度来讲，如果砖家在一大堆自己闻所未闻的东西中间，突然听到这么一个自己知道的，也更容易留下深刻的印象。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term=""></category></entry><entry><title>为什么读博士？</title><link href="/blog/why-phd.html" rel="alternate"></link><updated>2012-07-07T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-07-07:why-phd.html</id><summary type="html">&lt;p&gt;本文的主要内容来自 &lt;a class="reference external" href="http://pgbovine.net/PhD-memoir-epilogue.htm"&gt;这里&lt;/a&gt;  。作者是Philip J. Guo，他在MIT花了6年读完EECS的本科和硕士，然后去Stanford读了6年博士，今年刚毕业。他写了一份100多页回忆录《The Ph.D. Grind》来回顾自己的博士生涯，这是结语部分。&lt;/p&gt;
&lt;p&gt;大多数博士毕业以后都不会跟他们的导师一样去当教授，那为什么还要浪费精力去读博士？每个人都有各自的理由，其中可能的原因之一是，博士阶段的学习能让人超越心智的极限，变得更强大。（不过不是每个博士都能从中这个过程中获益，很多人会在挣扎中日渐疲惫，最终厌倦。也有很多人不需要读博士就可以达到一样的效果。） &lt;a class="footnote-reference" href="#id12" id="id3"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做个不太恰当的类比：为什么有人不打算做职业运动员，还要花很多年去练习铁人三项？简单的说，它可以让人超越身体的极限，变得更强壮。某种角度来讲，读博士就是智力上的强化训练。&lt;/p&gt;
&lt;p&gt;读博士的这些年，我最大的收获有有20点。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;结果导向 &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[2]&lt;/a&gt; 。只要得到好的结果，就不会有人质疑你的意图。我的博士阶段并没有什么所谓的“精神追求”：我读博士是因为不满足于搞工程；我做自己的项目是因为害怕不能按期毕业；我在HCI的项目里帮忙是为了留条后路。但是我成功了，我取得了足够的成果：5个原型工具，还有很多论文。在这个过程里，我对自己的工作产生了强烈的热情和自豪感。相反，我认识一些“有抱负”的学生，他们梦想能够为自己的领域带来革命，结果成果寥寥，梦想成空。&lt;/li&gt;
&lt;li&gt;输出导向 &lt;a class="footnote-reference" href="#id14" id="id5"&gt;[3]&lt;/a&gt; 。要拿到博士学位必须出成果（发表论文），光上课或者读论文是不行的。虽然在产出之前必须要先吸收，但是搞不好也很容易营养过剩。我曾经在博士的第一年误入歧途，那时我在近乎真空的环境下读了上百篇论文，但是这种盲目的阅读没有带来任何成果。相反，为学位论文搜集相关文献就要有效率的多，因为目标很明确。&lt;/li&gt;
&lt;li&gt;寻找资料。博士学习教会我如何寻找相关资料。研究跟课堂教学不一样，没有教材，没有课堂笔记，也没有老师给参考答案。我需要的东西可能在某篇论文里，可能在某段古老的代码里，可能在网络上的某个犄角旮旯，也可能还在别人的脑袋里，我得找到他求助。&lt;/li&gt;
&lt;li&gt;碰碰运气。我的运气很不错，特别是能到哈佛和Margo &lt;a class="footnote-reference" href="#id15" id="id6"&gt;[4]&lt;/a&gt; 共度最后一年的美好时光。如果不是之前反复的展示自己的工作——演讲、跟同事聊天、请求和给与帮助以及表达感谢，根本就不会有这些机会。我的大多数工作并没有带来这样的好运，但是如果没有反复的尝试，我可能不会有现在的运气。&lt;/li&gt;
&lt;li&gt;遵守游戏规则 &lt;a class="footnote-reference" href="#id16" id="id7"&gt;[5]&lt;/a&gt; 。博士生处在“啄序”的最底层，改变不了“学术游戏”的规则。特别是在发论文这个问题上，虽然我很害怕自己的文章反复被拒，但是我别无选择，只能不断学习以发挥自己的最大潜能。不过，我很高兴在读博士的后半段，终于能够用自己的方式来玩这个游戏，我做了一些非同一般的项目，又让它们能够符合规则从而保证了论文的发表和毕业。&lt;/li&gt;
&lt;li&gt;驾驭上级。如果能洞悉师兄、教授以及其他上级同事的想法和个性，即使身在最底层，也能推行自己的主张。比如，我从Margo的论文和基金申请里了解到她对研究的品味，然后想出了一个我们都感兴趣的项目。如果无视她的兴趣，就很难想符合她胃口的点子。&lt;/li&gt;
&lt;li&gt;教授也是人。这是很容易被忽视的一点。教授不只是研究机器，他们也有自己的品味、偏好、兴趣、目标、缺点和畏忌。即使是倍受尊崇的学者也会有一些主观和无理的怪癖。对学生来说，教授是发表论文、毕业和未来工作的把关人，所以不但要理解作为教授的他们，也要理解作为普通人的他们。&lt;/li&gt;
&lt;li&gt;做个受欢迎的人。跟喜欢自己的人一起工作，会更开心而且更有效率。不过人的性格有异，想要讨所有同事的欢心是不可能的。我只会找到合得来的人，然后多花时间培养我们之间的关系。&lt;/li&gt;
&lt;li&gt;交点儿学费。菜鸟们往往都要先交点儿学费，不能一开始就提出放肆的要求。在MIT读本科和硕士的时候，我为导师批准的一个基金项目干了两年半，而没有做自己的项目。这些“学费”帮我拿到了顶级博士学位的录取通知，还有两个资助我5年研究生学习的奖学金。到了斯坦福，我又在Klee项目上花了太多时间。我用了好几年才搞清楚什么时候该服从领导，什么时候要自私一点儿做自己的事。&lt;/li&gt;
&lt;li&gt;拒绝默认 &lt;a class="footnote-reference" href="#id17" id="id8"&gt;[6]&lt;/a&gt; 。默认选择对底层的人来说往往不是最好的，该拒绝就要拒绝。虽然没有什么阴谋，但是默认选择往往是为了当权者的利益而设置的。比如像Dawson这样知名的终身教授很容易拿到基金来资助为“默认的”Klee项目工作的学生。只要隔三差五的发表几篇论文，教授和项目就算是成功的，不管有多少学生迷失其中。作为学生必须自己判断项目是否有前景，如果不是，想办法走人。&lt;/li&gt;
&lt;li&gt;适时退出。在第三年末退出Klee是我整个研究生阶段最重要的决定。如果没有退出，就不会有IncPy、SlopPy、CDE、ＰroWrangler和Burrito，只会徒增三年痛苦的经历然后勉强混个毕业。&lt;/li&gt;
&lt;li&gt;面对失败。失败在所难免。我前三年做的东西没有一样写进学位论文，后三年里尝试过的很多方案也不了了之。还好学校是个可以容忍失败的地方，跟真正的工作相比，失败的成本很低。在头几年，失败让我心烦意乱。之后我学会把愤怒转换成有目的的行为，我管它叫“多产的愤怒”。每次拒绝、质疑和批评都让我更努力的工作，以证明这些反对者是错的。失败里得到的教训造就了之后的成功。【后面例子不写了】&lt;/li&gt;
&lt;li&gt;跟大牛合作 &lt;a class="footnote-reference" href="#id18" id="id9"&gt;[7]&lt;/a&gt; 。跟大牛合作的时候，我发论文总是比较容易的。他们知道在自己的领域里怎样才能让顺利发表论文。我跟这些大牛合作的5篇论文都是一投即中。不过作为菜鸟挣扎的日子也很有意义，虽然反复被拒容易让人沮丧。&lt;/li&gt;
&lt;li&gt;多做演讲。在我的博士阶段，我做了数十次演讲，既有学校实验室小组会议上的非正式演讲，也有酒店宴会厅里的会议演讲。项目起步阶段的演讲能带来一些设计上的建议和反馈；投出论文之前的演讲能帮我发现论文之中需要解决的一些常见的。演讲能提升公众演说技巧，还有应对提问（有时是带有敌意的）的能力。演讲有时也能激发更深入的讨论并带来意外收获。【例子省略】&lt;/li&gt;
&lt;li&gt;推销、推销、还是推销 &lt;a class="footnote-reference" href="#id19" id="id10"&gt;[8]&lt;/a&gt; 。我的大部分时间都用来实现自己的想法了，但是我发现有说服力的推销才是发表论文、获得认可以及最终毕业的关键。发表论文竞争激烈，能否被录用的关键往往要看文章的“市场宣传”能否符合审稿人的品味。所以，如果不能恰当的向学术界前辈们宣传其的宏观意义，我之前的努力工作就白费了。更广泛的说，很多人都在某个方面有好的想法，只有善于推销的人才更容易得到认可。作为一个地位较低的研究生，最有效的推销办法之一就是让Margo这样有影响力的人对我的想法和项目感兴趣，进而帮我推销。&lt;/li&gt;
&lt;li&gt;慷慨助人。在读博士这个问题上，我最喜欢的一点是不必和同学们竞争。我们之间并不是此消彼长的关系。所以我们很多人都乐于帮助对方，特别是关于研究思路和论文草稿的反馈。&lt;/li&gt;
&lt;li&gt;善于求助。过去6年，我学会了何时、向谁以及如何请求帮助。特别是当陷入困境的时候，我总能找到达人帮我解脱。有时候求助只需要问问院系里的朋友，有时需要转介，有时还要面对陌生人冷冰冰的电子邮件。&lt;/li&gt;
&lt;li&gt;诚心致谢。虽然获得博士学位主要靠自己努力，但是如果没有同事的帮助我很难成功。人们乐于看到自己的建议和反馈起到了实实在在的作用。所以我总是尽可能感谢每个人的帮助。哪怕只是一封简单的感谢邮件也好。&lt;/li&gt;
&lt;li&gt;用想法产生更多想法。第一年之后，我发现真空环境下几乎不可能产生什么实质性的想法。每一个想法都是建立在其他想法基础上的，所以选择一个好的起点很重要。【例子省略】&lt;/li&gt;
&lt;li&gt;要勤奋也要精明 &lt;a class="footnote-reference" href="#id20" id="id11"&gt;[9]&lt;/a&gt; 。没有上万小时枯燥而顽强的刻苦努力，就不会有博士学位。这段历程让我明白，创造性的思想，如果不下苦功把它们变成成果，就没有任何意义。不过，精明也跟勤奋一样重要。我见过很多学生把经历浪费在一些注定不会有好结果的事情上，有的研究角度不好，有的用的工具不对，有的忙于毫无意义的跑腿工作。精明需要敏锐的洞察力，直觉和乐于求助。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;读博士好玩吗？&lt;/p&gt;
&lt;p&gt;某些方面确实很好玩，比如灵光乍现的时候，比如在白板上勾画软件设计的时候，比如跟同事喝着咖啡扯着淡的时候，比如在开会期间结伴闲游，比如发表演讲引发热烈讨论，比如收到CDE用户热情洋溢的邮件。不过在6年里，我花在这些事情上的时间只有几百个小时，不到工作时间的5%。&lt;/p&gt;
&lt;p&gt;相比之下，我花了差不多一万小时在电脑前独自奋战：编程、测试、实验、折腾工具，寻找资料，还有撰写、编辑和重写论文。从事创造性工作的人都知道日复一日的苦熬有多无聊：要精神高度集中，严守纪律，苛求细节、忍受痛苦，以及对成果近乎于强迫的渴望。&lt;/p&gt;
&lt;p&gt;那么，读博士到底好不好玩？&lt;/p&gt;
&lt;p&gt;有时好玩，不过更重要的是，很有成就感。快乐是轻浮和短暂的，很容易获得，但是真正的成就只有战胜了巨大的而有意义的挑战才能获得。&lt;/p&gt;
&lt;p&gt;【译文到此结束】&lt;/p&gt;
&lt;p&gt;总结一下，读博士并不是单纯的智力冒险，而是对EQ、AQ以及人际关系等能力的全面挑战。有句话说：先做人，后做事，这里可以补充一句：最后做学问。我觉得读博士最大的好处之一，就是在学校相对宽松的环境下，可以有更多的时间去思考，而不用担心像巴神一样错失单刀。在混迹了四年之后，对上面的部分内容也算略有心得。客观来讲，有做得不错的方面，但是很多方面已经screwed up了。更长远一点来讲，在来到这个世界20多年之后，已经有很多事情被我screw up了。好在还有改过自新的机会，现在基因都能改了，还有什么改不了的？&lt;/p&gt;
&lt;p&gt;写完这篇日志，忽然觉得，像我这样吊儿郎当、不务正业，博士读得貌合神离，居然也开始有一点点味道了。求人品，求转运，求接下来一年给力！&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;这个套路很耳熟吧？欲练神功，必先自宫；如若自宫，未必成功；不必自宫，也可成功。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;现实就是这样，像比尔盖茨、乔布斯这种成功人士，在创业之初也是不择手段，没少做让人不齿的事。但是人家成功了，这些都被选择性的无视了。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;我觉得我还一直没从这个坑里出来。有时候知道得不是太多反而更好，认准方向去做就行了，等结果出来，即使之前有了类似的东西，换个角度去讨论，或者放在特定的背景下，一样可以有新的成果。Ignorance is bliss。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Margo Seltzer，伯克利博士毕业，现在哈佛任教，Berkeley DB的作者，也是文件系统这一块的大牛，从学术的角度来看，绝对是我等吊丝朝思暮想的白富美。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;就算对社会再不满，也要先活下来，而且还要活得好，才有机会改变啊！&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;其实有很多事情，比如大学转院系、研究生换导师，虽然都有明确的办法，但是出于各种原因，学校一般是不会告诉你，更不会鼓励你，如果觉得这样更有利于自己的发展，就要自己主动去问，去要求，不要被“默认”了。我认识的人里就有成功的案例。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;可惜在国内的环境下缺少这样的大牛，更缺少“传帮带”的传统，至少我这几年的感觉是这样的。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id19" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;我知道曾经有一篇文章，两轮审稿下来争议比较大，最后因为一个大牛的力挺，还是被录用了。可见大牛的支持是多么重要。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id20" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;使蛮力不如用巧劲，虽然有投机取巧的嫌疑，但是就像第一点里说的，结果才是最重要的。不过在写论文这方面，我是一直没有摸到门道，瞎折腾倒是颇有心得。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="phd"></category><category term="tanslation"></category></entry><entry><title>用FlameGraph进行可视化性能分析</title><link href="/blog/flamegraph.html" rel="alternate"></link><updated>2012-07-01T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-07-01:flamegraph.html</id><summary type="html">&lt;p&gt;程序性能分析的一种常用方法是栈采样：定期中断处理器，收集函数调用栈，然后进行分析。一个函数在采样结果中出现的次数越多，说明这个函数被调用的次数越多，或者执行的时间更长，也越有可能成为性能瓶颈。不过采样数据量很大，分析起来很耗时。为此，Dtrace开发人员Brendan Gregg发明了一种 &lt;a class="reference external" href="http://dtrace.org/blogs/brendan/2011/12/16/flame-graphs/"&gt;FlameGraph&lt;/a&gt; 用来对采样结果进行可视化，使得分析结果变得非常简单直观。&lt;/p&gt;
&lt;p&gt;FlameGraph的例图请看 &lt;a class="reference external" href="http://www.beginningwithi.com/brendan/mysql-flame.svg"&gt;这里&lt;/a&gt; 。解释如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;图中每一个方块代表栈里的一个函数。&lt;/li&gt;
&lt;li&gt;Y轴代表调用深度，最上面的是当前正在CPU上执行的函数，下面的都是其祖先。每个函数都是由它下方的函数调用的。&lt;/li&gt;
&lt;li&gt;X轴不是按照时间先后排列的，它只代表样本数目。方块越宽，代表该函数出现的次数越多。&lt;/li&gt;
&lt;li&gt;在有多个并发线程同时被采样，样本总数可能超过采样所用的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用FlameGraph，需要先用工具对目标程序进行栈采样，然后用Brendan的 &lt;a class="reference external" href="https://github.com/brendangregg/FlameGraph"&gt;脚本&lt;/a&gt; 对采样结果进行处理并绘图。可以完成采样的工具很多，比如Solaris下的dtrace，linux下的 &lt;a class="reference external" href="http://oprofile.sourceforge.net"&gt;oprofile&lt;/a&gt; ， &lt;a class="reference external" href="http://sourceware.org/systemtap/"&gt;systemtap&lt;/a&gt; ， &lt;a class="reference external" href="https://perf.wiki.kernel.org/index.php/Main_Page"&gt;perf&lt;/a&gt; 等，不过Brendan目前没有提供针对oprofile的脚本。&lt;/p&gt;
&lt;p&gt;具体做法分三步（当然不是把大象关进冰箱那三步）：采样、折叠、绘图。对应的命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;perf record -a -g -F 1000 sleep 60
perf script | ./stackcollapse-perf.pl &amp;gt; out.perf-folded
cat out.perf-folded | ./flamegraph.pl &amp;gt; perf-kernel.svg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一行是用perf工具进行采样。参数-a表示对整个系统进行采样，如果只需要分析某个进程，可以不要这个选项。-g表示记录函数调用栈。-F 指定采样频率。最后是采样过程中要执行的命令，如果要针对某个程序进行分析，这里就执行你要分析的程序。更详细的用法参考perf的文档。&lt;/p&gt;
&lt;p&gt;后面两行调用Brendan的脚本，依葫芦画瓢即可。&lt;/p&gt;
</summary><category term="performance"></category><category term="linux"></category></entry><entry><title>文件系统一致性机制</title><link href="/blog/fs-consistency.html" rel="alternate"></link><updated>2012-06-03T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-06-03:fs-consistency.html</id><summary type="html">&lt;p&gt;文件系统存储在设备上的数据主要包括两部分，一部分是用户数据，另一部分是管理用户数据所需的元数据，主要包括三种信息：一是资源（主要是存储空间）的分配情况；二是文件系统的名字空间，也就是目录结构；三是文件索引，记录了文件内偏移地址和磁盘块地址的映射关系。由于一个文件系统操作通常涉及多个数据结构，需要修改多个磁盘扇区。以创建文件为例，既要分配和初始化索引节点，又要在父目录中插入新的目录项，还有可能要预分配一些磁盘块，这一个操作需要修改索引节点表、索引节点位图、父目录、磁盘块位图等等。但是磁盘并不支持跨越多个扇区的原子更新，要保证这个操作的原子性（操作或者成功，或者完全没有发生），就必须在文件系统中提供额外的机制，否则就有可能造成数据不一致。&lt;/p&gt;
&lt;p&gt;文件系统一致性可以分成三个层次。第一个层次是元数据一致，即元数据中的各种数据结构之间没有冲突，不存在已被分配但没有被引用的孤立inode或者block，也不存在错误或者重复的引用。仍然以创建文件为例，如果索引节点分配并初始化成功，但是父目录还没有修改，这个索引节点就成了孤立的，既不能被访问，也不能被回收。第二个层次是数据一致，不但要求元数据一致，还要求元数据中引用的数据块必须是属于该文件的，而不是垃圾数据，或者其他文件的数据。&lt;/p&gt;
&lt;p&gt;对于多数应用，达到第二层次就已经足够了。但是在某些特殊应用下，对文件的版本有比较严格的要求，比如用make编译软件，要根据源码文件的版本确定是否需要重新编译该文件。因此就有了第三个层次——版本一致，要求元数据中引用的数据块不但属于该文件，还要跟元数据中所标明的版本保持一致。虽然多数文件系统并不支持多版本，没有显式的版本号，但是inode中还有一个最后修改时间可以表示文件当前版本。&lt;/p&gt;
&lt;p&gt;常用的文件系统一致性机制有下面几种。&lt;/p&gt;
&lt;div class="section" id="fsck"&gt;
&lt;h2&gt;fsck&lt;/h2&gt;
&lt;p&gt;扫描文件系统的所有元数据，逐个检查各个数据结构之间是否匹配，修正可能存在的不一致。这种方法最简单，而且只有发生故障之后才需要进行，对文件系统的性能没有影响。不过缺点也很明显，一是必须离线进行，检查过程中不能提供服务；二是耗时长，由于要扫描整个卷，数据量越大，耗时越久；最后，这种方法只能保证元数据一致。常用的文件系统都提供了fsck工具。Valerie Henson设计了chunkfs &lt;a class="footnote-reference" href="#id9" id="id2"&gt;[1]&lt;/a&gt; ，用分治的策略改进一致性检查过程。把一个卷划分成若干相对独立的chunk，一个文件操作只需要更新一个chunk之内的磁盘块。这样即使更新操作意外中断，也只有少数几个chunk是不一致的，只需要扫描这些chunk即可，大大缩短了检查的时间。&lt;/p&gt;
&lt;p&gt;Fsck是基于预先制定的规则的，而这些规则往往是来自于经验，比如指向文件数据块的指针不能超过设备地址范围，标记为已分配的资源必须被引用等等。根据这些规则进行的一致性检查，缺乏全局观，只能发现局部问题，而对某些问题则无能为力。比如，文件A的inode中的块指针出错，原本该指向一个间接块的，现在指向了一个错误的数据块，在进行fsck时，只能发现这个数据块中的内容违背了规则，但无法查出错误的原因是inode的错误。为了解决这个问题，Wang et al. &lt;a class="footnote-reference" href="#id10" id="id3"&gt;[2]&lt;/a&gt; 提出了利用快照，通过比较structural edit distance，找到跟文件系统当前状态最为接近的快照，辅助进行修复。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="journaling"&gt;
&lt;h2&gt;Journaling&lt;/h2&gt;
&lt;p&gt;Journal又称作Write-ahead log，即在实际更新数据之前先把更新操作记录在日志里，这种方法严格要求日志的更新在实际更新操作之前完成。这种方法能达到的一致性层次取决与日志里记录的内容，如果日志中只记录元数据操作，则只能保证元数据一致，如果记录日志中包含数据，就可以保证版本一致。由于每次更新操作都要增加额外的写日志开销，对文件系统写性能的影响比较大。Ext3/4文件系统采用了这种方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="copy-on-write"&gt;
&lt;h2&gt;Copy-on-write&lt;/h2&gt;
&lt;p&gt;每次更新操作都复制原有数据并把更新写到新的位置，而不会覆盖旧数据，因而能够保证版本一致，也没有额外的写日志开销。支持CoW的文件系统通常又称作write anywhere file system &lt;a class="footnote-reference" href="#id11" id="id4"&gt;[3]&lt;/a&gt; 。由于文件系统中的数据是采用树状结构进行索引的，对其中一个数据块的CoW，会导致更新操作逐层向上扩散直到树根。例如，在文件写操作的时候修改了一个数据块，进行CoW的同时，需要修改文件索引节点中的指针以指向新的磁盘块，又会触发对索引节点的CoW，接着又要触发对父目录的CoW……一直到根目录，因此目录层次越深，更新的开销也就越大。为了解决这个问题，支持CoW的文件系统通常采用B+树作为磁盘索引结构 &lt;a class="footnote-reference" href="#id12" id="id5"&gt;[4]&lt;/a&gt; ，所有的数据都存放在叶子节点中，当修改一个叶子节点时，需要拷贝从根结点到该节点之间的整条路径，这样更新操作的开销只取决于树的深度，也就是文件系统中实际存储数据的多少。CoW的实现通常比较复杂，需要大量的代码，支持这种方式的文件系统有Solaris的ZFS和Linux的btrfs。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="soft-updates"&gt;
&lt;h2&gt;Soft updates&lt;/h2&gt;
&lt;p&gt;这是BSD大牛Marshall Kirk McKusick &lt;a class="footnote-reference" href="#id13" id="id6"&gt;[5]&lt;/a&gt; 提出的方法，通过跟踪缓存在内存里的文件系统数据结构之间的依赖关系，控制磁盘更新的顺序，以保证磁盘上的数据总是处于一致的状态。相比前面两种方法，即没有写日志的开销，也不会造成链式的更新，只有在某些情况下可能需要对更新操作进行回滚，然后重新执行，因此这种方法的性能开销是最低的。由于正确的控制磁盘更新的顺序非常复杂，目前只有BSD的UFS里实现了这种算法。&lt;/p&gt;
&lt;p&gt;从以上这些常用的方法中不难看出，磁盘块的更新顺序是保证文件系统一致性的一个重要的问题，因为文件系统本质上是依靠指针关系建立起来的索引结构，所以要保证一致性，必须要被引用的数据块在指针更新之前到达磁盘。基于这个观点，Frost et al. &lt;a class="footnote-reference" href="#id14" id="id7"&gt;[6]&lt;/a&gt; 提出了一种通用的write-before语义，并实现了基于patch的更新方法，在保证一致性的基础上，简化了文件系统的开发。另一方面，Chidambaram et al. &lt;a class="footnote-reference" href="#id15" id="id8"&gt;[7]&lt;/a&gt; 通过实验发现，严格要求磁盘块按照一定的顺序进行更新会限制磁盘带宽的利用率，降低文件系统的性能，因此提出了用反向指针（back pointer）保证一致性的方法，这种方法为每一个inode、dentry和数据块增加一个指向其引用者的反向指针，在更新的时候，只需要一个I/O操作就可以同时更新被引用对象和其反向指针，通过对比指针和反向指针，可以实时发现文件系统的异常，并修正某些错误，避免了耗时的离线fsck，同时也提升了写性能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://static.usenix.org/events/hotdep06/tech/prelim_papers/henson/henson.pdf"&gt;Chunkfs: using divide-and-conquer to improve file system reliability and repair&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://research.microsoft.com/apps/pubs/?id=80943"&gt;Crystal: The Power of Structure Against Corruptions&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://ng.gnunet.org/sites/default/files/10.1.1.40.3691.pdf"&gt;File system design for an NFS file server appliance&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://static.usenix.org/event/lsf07/tech/rodeh.pdf"&gt;B-trees, shadowing, and clones&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://static.usenix.org/event/usenix99/full_papers/mckusick/mckusick.pdf"&gt;Soft updates: A technique for eliminating most synchronous writes in the fast filesystem&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.sosp2007.org/papers/sosp169-frost.pdf"&gt;Generalized File System Dependencies&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://static.usenix.org/events/fast12/tech/full_papers/Chidambaram.pdf"&gt;Consistency Without Ordering&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="file system"></category><category term="reliability"></category></entry><entry><title>Dynamic Information Flow Tracking</title><link href="/blog/dynamic-info-flow-tracking.html" rel="alternate"></link><updated>2012-05-18T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-05-18:dynamic-info-flow-tracking.html</id><summary type="html">&lt;p&gt;Dynamic Information Flow Tracking &lt;a class="footnote-reference" href="#id8" id="id1"&gt;[1]&lt;/a&gt; ，就是通过分析进程执行过程中各个数据对象之间的因果关系（causality），跟踪某些敏感或可疑数据在程序执行过程中的传播，将受到影响的所有数据标记出来，并根据预定的策略执行相应的操作。近几年，有很多研究表明DIFT可以成功的应用在安全领域，有效的提高软件系统抵御入侵的能力。&lt;/p&gt;
&lt;p&gt;用论文 &lt;a class="footnote-reference" href="#id9" id="id2"&gt;[2]&lt;/a&gt; 中一个例子来说明一下。图中给出的代码存在漏洞，在第5行进行字符串拷贝的时候没有检查参数arg2的长度，攻击者可以用缓冲区溢出的方法，给出一个很长的arg2，从而覆盖掉localIP，获得执行非法操作的权限。&lt;/p&gt;
&lt;img alt="buffer overflow example" src="http://seth-images.qiniudn.com/buffer-overflow-exp.png" style="height: 350px;" /&gt;
&lt;p&gt;有了DIFT，只需要将用户输入的参数当作可疑数据源，这样当字符串拷贝越界时，localIP就会被打上标记，在后面使用localIP的时候，只需要检查localIP的标记，就可以检测到攻击行为。除此之外，如果将网络作为可疑数据源，跟踪从网络获取的数据在进程执行过程中的传播，阻止这些数据被当作指令执行，可以有效的预防很多诸如cross-site scripting和SQL injection之类的入侵。&lt;/p&gt;
&lt;p&gt;DIFT不但可以用于入侵检测，还可以用于被入侵之后的数据恢复 &lt;a class="footnote-reference" href="#id10" id="id3"&gt;[3]&lt;/a&gt; 。入侵者通常会修改文件系统中的数据，比如删除系统日志隐藏入侵行为或者留个后门什么的。当发现系统被入侵之后，需要及时的将系统恢复到入侵之前的状态。简单的将整个系统回滚到入侵点之前的状态，不但效率低，而且会损失一部分合法的数据。如果能够的识别哪些进程、哪些操作受到了入侵行为的影响，就可以有选择的进行恢复。&lt;/p&gt;
&lt;p&gt;除了抵御入侵，DIFT还可以用来保护用户隐私，防止恶意程序泄露用户数据。比如TaintEraser &lt;a class="footnote-reference" href="#id11" id="id4"&gt;[4]&lt;/a&gt; 就是通过跟踪数据流，阻止敏感数据向外传输。TaintDroid &lt;a class="footnote-reference" href="#id12" id="id5"&gt;[5]&lt;/a&gt; 则在Android手机上实现了类似的功能。&lt;/p&gt;
&lt;p&gt;当然，这种技术的用途并不局限于安全领域。比如 &lt;a class="footnote-reference" href="#id13" id="id6"&gt;[6]&lt;/a&gt; 就把它用在了配置故障诊断上。很多的开源软件都有数量繁多的配置参数，出现配置错误时，诊断和查找错误原因是一个很头疼的工作。通过跟踪配置文件中每个token在进程执行过程中的数据流，以及它们对控制流的影响，可以确定每一个数据对象所依赖的token。如果一个数据对象导致程序执行出错，那么它所依赖的这些token就很可能是造成错误的原因。&lt;/p&gt;
&lt;p&gt;近几年比较热门的Provenance &lt;a class="footnote-reference" href="#id14" id="id7"&gt;[7]&lt;/a&gt; ，我认为也应该算作是DIFT的一种形式，不过针对的是持久存储的数据对象，比如文件或数据库记录。相对与进程内部的数据流，provenance的粒度要粗一些。&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=1042&amp;amp;context=ece"&gt;Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1381306.1382156"&gt;From Speculation to Security: Practical and Efficient Information Flow Tracking Using Speculative Hardware&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1924943.1924950"&gt;Intrusion recovery using selective re-execution&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1945023.1945039"&gt;TaintEraser: protecting sensitive data leaks using application-level taint tracking&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1924943.1924971"&gt;TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1924943.1924960"&gt;Automating configuration troubleshooting with dynamic information flow analysis&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.eecs.harvard.edu/syrah/pass/pubs/usenix06.pdf"&gt;Provenance-Aware Storage Systems&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="security"></category></entry><entry><title>Linux下音频格式转换</title><link href="/blog/linux-audio.html" rel="alternate"></link><updated>2012-05-13T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-05-13:linux-audio.html</id><summary type="html">&lt;p&gt;网上下载了不少音乐，各种格式都有，为了能够在手机、MP3等各种设备下都能播放，时常需要进行格式转换。这里总结一下常用的音频编解码工具，全部都是开源软件，可以在Linux下使用。&lt;/p&gt;
&lt;div class="section" id="ffmpeg"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://ffmpeg.org"&gt;ffmpeg&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;超强的开源多媒体处理工具，像Kmplayer、暴风影音之类的播放器里面大量盗用了ffmpeg的成果。Ffmpeg集编码、解码、串流、混合、分离等多项功能于一身，音频格式转换当然不成问题。自带的命令行工具可以进行音频和视频的格式转换，ffmpeg -codecs可以看到当前系统支持的格式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mac"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://supermmx.org/linux/mac/"&gt;mac&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Monkey's Audio（也就是APE格式）的codec，官方只有win版，但是公开了源代码，所以有了非官方的Linux移植版。自带命令行前端可以进行编码和解码，执行mac可以看到用法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flac"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://flac.sourceforge.net/"&gt;flac&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Flac是开放的格式，自然有相应的开源工具包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lame"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://lame.sourceforge.net/"&gt;lame&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;开源的mp3编码工具。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shntool"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.etree.org/shnutils/shntool/"&gt;shntool&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多功能音频处理工具，本身只支持wav波形文件，但是通过helper program可以支持多种音频格式。Shntool最有用的功能大概是音频分割了。网上下载的很多音乐都是整张CD一个文件，然后用cue文件区分音轨，shntool可以直接根据cue文件进行分割。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="audio"></category></entry><entry><title>CPU降温</title><link href="/blog/cpupower.html" rel="alternate"></link><updated>2012-05-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-05-05:cpupower.html</id><summary type="html">&lt;p&gt;夏天来了，气温越来越高，笔记本风扇吭哧吭哧的转个不停，听着实在揪心。现在的笔记本处理器都支持频率调整，可以在负载不重的情况下降低运行频率，减少能耗和发热。虽然Linx内核驱动已经相当完善，支持各种主流CPU的调频功能，但是默认的管理策略好像并不给力，总感觉运行Linux的时候温度要比运行windows的时候略高一些，还好可以自己调整。&lt;/p&gt;
&lt;p&gt;Linux内核中管理CPU频率的模块是cpufreq，这个模块提供了sysfs接口，通过/sys/devices/system/cpu/cpu[n]/cpufreq/目录里的文件，可以查看CPU运行状态。修改设置可以用命令行工具cpupower（也就是以前的cpufrequtils）。Fedora 17里这个工具包含在kernel-tools里。&lt;/p&gt;
&lt;p&gt;有两种方式可以达到降温的目的，一是把governor设置为powersave：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cpupower --cpu [n] frequency-set -g powersave
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--cpu指定CPU，对于多核处理器可以为每个核心分别进行设置。一般默认的governor是ondemand，但仍然是性能优先。很多情况下，比如看资料、写文档的时候，CPU的使用率都不是很高，完全可以切换到powersave模式，效果相当明显，在我的笔记本上，把两个核都调成powersave，能降温10度以上。如果这样有点慢的话，可以只调一个核。&lt;/p&gt;
&lt;p&gt;另外一种方法是直接设定CPU的运行频率或者频率上限，频率不能任意调整，CPU支持频率可以在scaling_available_frequencies文件里看到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cpupower --cpu[n] --frequency-set -f [freq]
cpupower --cpu[n] --frequency-set -u [max_freq]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;补充一个工具 &lt;a class="reference external" href="http://lm-sensors.org/"&gt;lm-sensors&lt;/a&gt; ，可以通过硬件传感器监控CPU和显卡等硬件的温度，调整完之后可以用sensors命令看一下效果。&lt;/p&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;2013-10-30&lt;/p&gt;
&lt;p&gt;从3.9开始，Linux内核对比较新的Intel处理器（Sandy Bridge和Ivy Bridge）提供了专门的模块intel_pstat进行管理，只有powersave和performance两种governor可以选择。&lt;/p&gt;
&lt;p&gt;参考资料：
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/CPU_Frequency_Scaling"&gt;https://wiki.archlinux.org/index.php/CPU_Frequency_Scaling&lt;/a&gt;&lt;/p&gt;
</summary><category term="linux"></category><category term="cooling"></category></entry><entry><title>乙肝科普</title><link href="/blog/hepatitis-b.html" rel="alternate"></link><updated>2012-04-15T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-15:hepatitis-b.html</id><summary type="html">&lt;p&gt;前段时间被误诊为乙肝，小紧张了一下。那段时间也查阅了不少关于乙肝的资料，既然看了就不能白看，稍微总结一下，写点儿东西。&lt;/p&gt;
&lt;p&gt;了解乙肝，首先要了解肝脏的重要性。肝脏是人体最重要的解毒器官，对于人体健康至关重要。从外界摄入的有毒有害物质（比如酒精、某些药物中的有害成分），还有人体代谢产生的废弃物，很多都需要通过肝脏进行代谢转换，否则就会危害人体。肝脏解毒的机制，可以认为是“自杀式”的，肝细胞牺牲自己，跟有毒有害物质同归于尽。大量饮酒或者生病吃药，都可能造成肝细胞大量死亡，不过对于正常人来说，只需休息数日，很快就会恢复。而对于乙肝患者，人体免疫细胞会主动攻击被感染的肝细胞，而这种攻击造成的损害，要比喝酒严重得多。肝细胞大量死亡的表现，就是血液中谷丙转氨酶（ALT）的升高，所以有肝病的人对这个指标都比较重视，因为它直接反应了肝脏的健康状况。&lt;/p&gt;
&lt;p&gt;造成乙肝的罪魁祸首是乙肝病毒。乙肝病毒主要由外壳和核心2部分组成。外壳是完全无害的，但是它经常是伴随着病毒出现的，所以被用来作为诊断乙肝的标准之一，也就是“两对半”里的表面抗原。另外乙肝疫苗的有效成分其实也是这个东西，通过注射这些无害的病毒外壳，诱导人体产生抗体，获得免疫力。对于注射过疫苗有抵抗力的人，病毒一进入血液，就会被抗体中和，不会造成感染。而没有抗体的人，如果体质较弱，就很容易被感染，变成患者或携带者。&lt;/p&gt;
&lt;p&gt;病毒的核心包括一层衣壳和里面的病毒DNA，其中DNA是造成感染的关键。乙肝病毒进入肝脏以后，病毒DNA会跟肝细胞结合，把健康的肝细胞变成病毒生产线，开始批量生产病毒零件。这个过程中的一些中间产物，会诱发人体免疫，产生另一种抗体，也就是“两对半”里的核心抗体，不过这种抗体没有中和作用，只能作为诊断标准。通常感染乙肝之后，核心抗体会一直存在。病毒零件主要是外壳和衣壳所需的蛋白质。在乙肝活跃期间，这两种成分都会大量存在于血液里，也就是“两对半”里的表面抗原和E抗原，加上前面说的核心抗体，就是俗称的“大三阳”。这是最危险的情况，全速运转的生产线会制造大量病毒，不但会感染更多健康肝细胞，也会通过各种方式传染给其他人。&lt;/p&gt;
&lt;p&gt;乙肝治疗的目标，就是切断这条病毒生产线，突破口就在E抗原。通过自身的免疫，或者合理的治疗，可以成功的抑制E抗原的合成，阻止病毒的自我复制。这时会产生另外一种蛋白质，被称作E抗体。虽然E抗体也跟核心抗体一样，不具备中和性，但是E抗体的出现表明E抗原的合成已经基本终止，病毒生产线被切断。E抗体加上表面抗原、核心抗体，就是俗称的“小三阳”，也是乙肝患者治疗的目标。&lt;/p&gt;
&lt;p&gt;大小三阳只是乙肝感染者比较稳定的两种状态，其他还有一些诸如“小二阳”之类的不稳定状态。如果“两对半”检查出现这种状况，需要进行额外的检查来确定具体的病情，通常是乙肝病毒DNA检测，通过扩增直接测量血液中的病毒DNA含量。如果含量超标，说明乙肝病毒处于活跃期，需要积极治疗。&lt;/p&gt;
&lt;p&gt;乙肝病毒之所以让人闻之色变，除了其对肝细胞的损害，还有两个重要的原因：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;无法彻底清除。乙肝病毒的清除只能依靠人体自身的免疫力，目前还没有其他办法。有一些比较有希望的方法也还在研究阶段。而乙肝病毒的DNA一旦跟肝细胞结合，人体免疫就对它没有办法了。所以如果不幸感染，就只能终身携带。虽然有一些病例表明，患者在感染乙肝很多年之后，还是有可能通过自身免疫彻底清除病毒的，不过这个周期就很长了，多数人这辈子是等不到了。&lt;/li&gt;
&lt;li&gt;变异率高。乙肝病毒变异率很高，因此也很容易产生抗药性。乙肝患者如果症状严重，需要用药物进行抗病毒治疗，避免肝脏严重受损。而长期使用抗病毒药就很容易导致病毒变异产生抗药性，那就悲剧了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;毛主席说过：“战略上要蔑视敌人，战术上要重视敌人”。对于乙肝，首先要意识到它不是绝症，乙肝患者的身体未必就比正常人差，更不要说很多人只是病毒携带，并没有肝脏受损明显的症状。&lt;/p&gt;
&lt;p&gt;其次，根据上面对于乙肝病理的介绍，乙肝患者和携带者要注意自己的健康状况，定期检查，如果有发病现象及时治疗。另外还要注意饮食，绝对不能喝酒，少吃刺激性食物；要多休息，少做剧烈运动，因为代谢产生的废物也会加重肝脏的负担；避免熬夜，因为晚上是肝脏自我恢复的最佳时间；去医院看病的时候，即使是感冒，也要主动把自己的情况告诉医生，因为有些药物对肝脏损害极大，需要避免。&lt;/p&gt;
&lt;p&gt;最后，我不是专业人士，这里的内容难免有疏漏，仅供参考。&lt;/p&gt;
</summary><category term="health"></category></entry><entry><title>Note Anywhere的修改</title><link href="/blog/note-anywhere.html" rel="alternate"></link><updated>2012-04-14T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-14:note-anywhere.html</id><summary type="html">&lt;p&gt;Note Anywhere是一个用来做笔记的chrome扩展，可以在网页的任意位置添加便签做笔记。不过在Linux下运行不起来，启动之后立刻崩溃。看了一下它的代码，发现问题出在WebSQL。Note Anywhere用WebSQL存储笔记，但是chrome的Linux版貌似不支持WebSQL。单独写了一个js脚本，结果也一样，只要一执行到WebSQL初始化，立刻会崩溃。&lt;/p&gt;
&lt;p&gt;不过没关系，Note Anywhere功能简单，根本用不到复杂的查询操作，所以完全没有必要动用SQL，直接用html5的local storageh同样可以搞定。&lt;/p&gt;
&lt;p&gt;Note Anywhere只用了一个表来存储笔记，主键是一个全局唯一的note id，其余字段包括网页的url、便签的位置、笔记内容等等。显然，最直接的改法，就是把这个表存到local storage里，用note id做key，剩余字段可以封装成JSON对象存储为value。&lt;/p&gt;
&lt;p&gt;虽然我对数据库并不怎么感冒，不过好歹也是学过的，对关系数据库的哪些个范式还有点印象。这个做法并不好，因为会存储很多冗余数据，如果一个网页上有很多笔记，它的url就会被存储很多次，应该要分表。而且每次载入一个网页的时候，都要用SQL查询url跟这个网页相等的所有记录，效率也比较低。&lt;/p&gt;
&lt;p&gt;我把数据分成了两个表：一个笔记表和一个页面表。笔记表存储笔记，用note id作key。页面表存储页面和笔记之间的关系，用url做key，value是笔记id的数组。虽然有两个表，但是由于两种类型的key很容易区分，所以完全可以一起存在local storage里面。&lt;/p&gt;
&lt;p&gt;另外原本的Note Anywhere没有导入导出的功能，不方便备份。我自己加了一个导出功能。因为html5功能有限的，chrome插件对本地存储的访问只限制在浏览器内进行，不能直接操作本地文件系统，所以无法直接把插件数据写到备份文件。不过这并不表示完全不能导出。我的解决办法是把local storage里的数据转换成json字符串，显示在option页面上，这样用户可以用手动复制粘贴的方法把数据保存到文件里。虽然有点麻烦，但总归是实现了功能。&lt;/p&gt;
&lt;p&gt;修改过之后的版本在这里 &lt;a class="reference external" href="http://life-sucks.net/download/note-anywhere.zip"&gt;下载&lt;/a&gt; 。&lt;/p&gt;
</summary><category term="chrome"></category><category term="linux"></category></entry><entry><title>Speculative &amp; Lazy Execution</title><link href="/blog/speculative-lazy-execution.html" rel="alternate"></link><updated>2012-04-13T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-13:speculative-lazy-execution.html</id><summary type="html">&lt;div class="section" id="speculative-execution"&gt;
&lt;h2&gt;Speculative Execution&lt;/h2&gt;
&lt;p&gt;Speculative Execution，直译过来就是“投机执行”（通常的说法貌似是“预测执行”，不过我觉得直译的更有味道一些），是一种性能优化方法。提高性能的重要方法之一是并行，比如流水线，利用不同部件之间的并行来屏蔽延迟，提高整体性能。但是如果前后两个任务之间存在依赖关系，比如下面这种情况，condition()和do_something()/do_something_else()之间不能并行，流水线就失效了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;do_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;投机执行就是解决这个问题的。虽然后续的操作依赖于condition()的结果，但是在特定的情况下，condition()的结果是可以预测的，比如99%是true，那么就可以让condition()和do_something()并发执行。很明显，这种方法依赖于预测的准确率，准确率越高，性能提升也就越大。这种投机的思想在计算机系统里应用很广。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;分支预测（branch prediction）&lt;/strong&gt; 。现代处理器里面常用的一种技术，当执行到形如“if-then-else”的分支指令时，通过预测的方法提高指令的并行度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Splitstream&lt;/strong&gt; 。这也是处理器中的一种技术，不过相比前者还不够成熟，应用也较少。采用这种技术的处理器在执行程序的时候会启动两个流程分别执行，一个叫做A-stream，会过滤掉程序中一些不重要的指令，只执行少部分指令。另一个是R-stream，执行原始程序。因为A-stream中少了很多指令，所以执行更快。在A-stream执行的时候，已经把指令和数据载入到处理器的cache里，当R-stream执行的时候，就无需访问内存，因此这种方法可以屏蔽内存访问的部分延迟，提高执行效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件预取（prefetch）&lt;/strong&gt; 。文件系统通常假定用户对文件的访问是顺序的，因此用户读取某一块的时候，也会顺便把后面若干块一起读到缓存，这样当用户请求后面的块时，就可以直接从缓存获取数据，大大降低了延迟。顺序预取是最常见的预取方式，但是只适用于顺序访问占主导的情况，如果是随机访问为主，这种预取反而会降低性能。CMU的Fay Chang提出了一种 &lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=296806.296807&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;CFID=97289604&amp;amp;CFTOKEN=10555591"&gt;预取算法&lt;/a&gt; ，采用的是另外一种投机执行的方式。我们知道大多数程序采用的是阻塞式I/O，程序会阻塞直到I/O完成。Chang的方法在进程阻塞时，会fork出一个新进程代替原进程继续执行，不过这个新进程不会执行实际的I/O操作，而是会产生一些hints给文件系统。文件系统根据hints进行预取。这种方法不局限于顺序访问，适用性更广，不过具体效果就要看投机的成功率了。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;strong&gt;Optimistic Concurrency Control&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避让算法&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前面几种只是比较常见的应用，其实投机执行的应用远不止这些。比如密歇根大学的Edmund B. Nightingale就把这种方法用在了 &lt;a class="reference external" href="http://dl.acm.org/citation.cfm?id=1095810.1095829&amp;amp;coll=DL&amp;amp;dl=ACM&amp;amp;CFID=97289604&amp;amp;CFTOKEN=10555591"&gt;分布式文件系统&lt;/a&gt; 里。分布式文件系统里存在很多具有依赖关系的操作，比如NFS里，文件写操作分成了write和commit两步，write把数据写到服务器，而commit确保数据永久存储到设备上。显然commit必须在write成功之后才能进行。在网络正常，尤其是在局域网内的情况下，write操作是很少会失败的，因此可以假定write操作成功，在其返回之前就发出commit请求，这样就屏蔽了部分等待时间，减少了整个操作的延迟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要是存在因依赖造成等待的地方，就有投机的可能&lt;/strong&gt; 。不过要想提高性能，还要求投机的成功率比较高，换句话说就是对所依赖的结果预测比较准确，否则大量无效的执行反而会浪费资源，降低性能。另外在有些情况下，特别是涉及I/O操作的时候，错误的投机执行可能会造成一些副作用，比如修改文件，因此在这种情况下还要求能够正确的将系统恢复到之前的状态，以确保结果正确。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lazy-execution"&gt;
&lt;h2&gt;Lazy Execution&lt;/h2&gt;
&lt;p&gt;跟speculative execution相反，前者是在前途并不明朗的情况下投机冒进，而后者则是将本来可以完成的任务延后执行。Lazy execution的典型应用就是写缓存。将数据缓暂存在缓存空间，一方面可以屏蔽掉实际写操作的延迟，因为缓存的速度通常要快得多；另一方面也可以把对同一数据单元的多次更新，以及对多个连续单元的更新合并成一个写操作，达到更高的写性能。当然这样也会增加风险，如果缓存失效，那么缓存中还没有写下去的数据就丢失了。&lt;/p&gt;
&lt;p&gt;Lazy execution的另一个例子是日志（logging）。在更新数据的时候，并不直接更新现有的数据，而是将更新操作以日志的形式记录下来。这样做的好处就是可以避免由于更新操作意外中断（比如突然断电）造成数据不一致，ext3文件系统里的journaling和日志文件系统（log-structured file system）就是这个原理。&lt;/p&gt;
&lt;p&gt;总结一下，不管是speculative execution还是lazy execution，都是通过改变某些操作的执行时机来获益。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="performance"></category></entry><entry><title>用Pelican建静态博客</title><link href="/blog/blog-with-pelican.html" rel="alternate"></link><updated>2012-04-08T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-08:blog-with-pelican.html</id><summary type="html">&lt;p&gt;用了一段时间Wordpress，觉得很不爽。Web编辑环境本来体验就比较差，再加上网络经常不给力，让我实在无法忍受。碰巧在网上看到有人介绍静态blog工具 ，心里有点痒痒。静态博客的好处在于可以完全离线编辑，用任何自己喜欢的编辑器，写好之后转换成网页发布到网站上。另外一方面备份和迁移也比较方便，不像wp还要折腾数据库。以前知道有个Jekyll，是ruby写的，我不会ruby，也懒得去折腾。后来发现了 &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/"&gt;pelican&lt;/a&gt; ，觉得还不错。&lt;/p&gt;
&lt;p&gt;Pelican是采用Python开发的，跟现在很多python project一样，可以通过 &lt;a class="reference external" href="http://pypi.python.org"&gt;pip&lt;/a&gt; 安装，非常方便。我用virtualenv的方式把它安装在用户主目录下，即使重装系统后也无需重新安装pelican。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
virtualenv .pelican
. .pelican/bin/activate
pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成之后，用pelican-quickstart命令可以创建一个新的博客，只需要按照提示回答几个问题。创建完成之后，博客的设置保存在pelican.conf.py文件里，如果需要的话，可以手动修改。同时还会生成一个Makefile（如果没有选N的话），以后生成和发布网页都可以用make命令自动完成。&lt;/p&gt;
&lt;p&gt;Pelican支持jinja2模板，主题保存在安装目录（通常是python的site-packages）下的themes里。可以在pelican.conf.py里用“THEME = 主题名”来选择要用的主题。最新版本的pelican支持使用路径名，比如“THEME = /path/to/you/theme”，这样就不需要把主题放在安装目录下了。Pelican的是模版系统语法很直白，比较容易看懂，修改起来也很容易。&lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;这里&lt;/a&gt; 汇集了很多主题，可以选择一款钟意的做样本来构建自己的博客。&lt;/p&gt;
&lt;p&gt;Pelican支持ReStructuredText和markdown两种标记语言，可以任选一种来撰写博文。个人的感觉是markdown语法比较简单，容易上手，不过ReStrucuturedText的功能更强大，甚至有人可以用它写一整本书的。因为看到关于pelican的资料都是用前者，所以我也就自然而然的选择了这种格式。语法可以参考它的 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickref.html"&gt;快速入门&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;静态网页的是无法实现评论功能的，因为评论必须通过CGI将数据POST到服务器上。不过生活在云计算的时代，应该发扬拿来主义，直接使用第三方提供评论系统。好处在于不需要折腾，不担心备份，而且利于推广。第三方评论系统的原理是通过javascript脚本在网页上动态生成评论框，用户提交评论的时候，会把数据POST到第三方评论系统的服务器上，这样即使你的网页空间不支持CGI，也一样可以提供评论功能。使用第三方评论系统，需要通过修改主题里的templates来实现。网上找到的Pelican主题多是老外写的，清一色采用disqus作为评论系统。身在天朝，当然要用充满了乡土气息的朝内版本。这里推荐JiaThis旗下的 &lt;a class="reference external" href="http://uyan.cc"&gt;友言&lt;/a&gt; 。以前在wordpress里用过，感觉不错。注册了友言账号之后，点击“获取代码”，平台选择“通用平台”，会得到下面这样一段html代码。把这段代码添加到theme/templates/article.html里，放在你想要显示评论的地方，通常都是在页面的最后，或者直接替换掉里面disqus的部分。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- UY BEGIN --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uyan_frame&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://v2.uyan.cc/code/uyan.js?uid=xxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- UY END --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写技术文章，少不了要帖代码。Pelican可以通过pygments实现语法高亮。Pygments把源码转换成html，源码中的不同元素被赋予不同的class，通过css就可以定制配色方案。写css对我来说相当痛苦，pygments里有一些内置的style，不过好像并没有提供现成的css文件。在github上找到一个 &lt;a class="reference external" href="https://github.com/mhutchin/dump-pygments-css"&gt;zsh脚本&lt;/a&gt; ，可以把pygments里的内置style dump出来保存为css。也可以直接用别人dump出来的 &lt;a class="reference external" href="https://github.com/Anomareh/pygments-styles-dump"&gt;文件&lt;/a&gt; 。把要用的css放在主题里的static/css目录下，然后在theme/templates/base.html里增加对这个css的引用。为了方便尝试不同的配色方案，我还在配置文件里添加一个选项：PYGMENTS_STYLE，然后在模板的base.html里加上下面几句。这样只要修改pelican.conf.py就可以很方便的更换配色方案。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% if PYGMENTS_STYLE %}
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/theme/css/pygments/{{ PYGMENTS_STYLE }}.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pelican创建项目时生成的Makefile包括了上传文件到网站空间的命令，支持ssh、ftp、dropbox三种上传方式。其中ftp是比较常用的，一般的网站空间都会支持ftp上传。上传的方法是用lftp的mirror命令，直接把整个目录同步到服务器。加上--only-newer参数可以只上传更新过的文件，减少重复的传输。&lt;/p&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2012-05-10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用pelican一段时间之后，我发现了一个问题：虽然我用了--only-newer参数，但是每次上传的时候依然会把所有的文件都重新上传一次。找了一下原因，发现在用make生成html文件的时候，会先删除整个output目录，然后重新生成全部文件，所以每次make之后，所有文件都是新的，都会重新上传。这大概是静态blog的一个不足之处。想想如果以后积累了成百上千篇博文，每次编译和上传所需要的时间，搞不好会变得很恐怖，不知道有没有办法解决。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2013-10-23&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近用lftp上传的时候出现了下面这样的错误。&lt;/p&gt;
&lt;p&gt;Fatal error: Certificate verification: certificate common name doesn't match requested host name '...'&lt;/p&gt;
&lt;p&gt;查了一下，是由于SSL的缘故。修改Makefile里的lftp命令，禁用SSL，问题就解决了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lftp ftp://&lt;span class="nv"&gt;$FTP_USER&lt;/span&gt;@&lt;span class="nv"&gt;$FTP_HOST&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;set ftp:ssl-allow no; mirror -R --only-newer $LOCAL_DIR $REMOTE_DIR ; quit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="blog"></category></entry><entry><title>快盘开放平台OAuth</title><link href="/blog/kuaipan-oauth.html" rel="alternate"></link><updated>2012-04-06T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-06:kuaipan-oauth.html</id><summary type="html">&lt;p&gt;最近发现金山快盘 &lt;a class="reference external" href="http://www.kuaipan.cn/developers/document.htm"&gt;开放API&lt;/a&gt; 了，以前一直头疼没有Linux客户端，现在有了API，完全可以自己实现一个简单的客户端。&lt;/p&gt;
&lt;p&gt;开放平台采用OAuth 1.0的认证方式，认证过程分3步。第一步是申请一个临时token，也就是通知服务器要进行授权操作，服务器会准备后面两步需要的相应资源。第二步引导用户访问授权页面，登陆帐号进行授权。第三步获取正式的访问token。&lt;/p&gt;
&lt;p&gt;看了官方文档，觉得授权过程不是很复杂，于是想自己写写试试。写了一段python代码，但是第一步就不能通过，服务器段总是返回401，错误信息是“request expired”。检查了一下，没发现timestamp有问题，搞不清问题出在哪儿。Pypi上找了一下，发现一个现成的包oauth，里面还自带了客户端和服务器端的例子程序，于是拿来改了一下，终于成功授权。&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request_token_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signature_method_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先用consumer_key和consumer_secret创建一个OAuthRequest，目标url指向开放平台提供的requestToken。然后用HMAC-SHA1对请求进行签名，签名算法参数signature_method_hmac_sha1是一个OAuthSignatureMethod_HMAC_SHA1类型的对象，由oauth包提供。第三步调用do_request()方法执行请求，从服务器端取得临时token。这里需要修改一下。例子里在执行http请求时是通过header传递参数的，但是快盘的API只支持url方式传递参数，用OAuthRequest.to_url()方法可以获得请求对应的url。用urllib2里的urlopen()函数打开url，并读取返回响应。修改之后的代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# via url&lt;/span&gt;
        &lt;span class="c"&gt;# OAuthToken&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_url&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_url&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外返回结果是json格式，oauth里面也没有提供相应的处理方法，需要自己写。我在OAuthToken里加了from_json()方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oauth_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oauth_token_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OAuthToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_confirmed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;callback_confirmed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c"&gt;# 1.0, no callback confirmed.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;span class="n"&gt;from_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;staticmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;p&gt;这一步跟例子区别很大，需要用户访问指定页面并登录授权。服务器会给出相应的授权码作为凭据，这个授权码应该是用作后续请求的verifier，不过根据快盘的文档，为了简化操作，这个verifier目前没有使用，这一步只要给出url让用户登陆授权即可。授权页面地址如下。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.kuaipan.cn/api.php"&gt;https://www.kuaipan.cn/api.php&lt;/a&gt;?ac=open&amp;amp;op=authorise&amp;amp;oauth_token=&amp;lt;YourTemporaryToken&amp;gt;&lt;/p&gt;
&lt;p&gt;第三步：&lt;/p&gt;
&lt;p&gt;用临时token获取正式的access token。过程跟第一步基本相同，不过在创建request和签名的时候需要用到第一步获得的临时token。过程如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signature_method_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成上面三步，授权就算成功了，用access token可以调用快盘提供的各种API。调用API同样可以通过OAuthRequest来进行。API中的额外参数，可以在创建OAuthRequest对象的时候通过parameters参数指定。比如下面这个语句创建一个create_folder请求，带两个参数root和path。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_BASE_URL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;create_folder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;app_folder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过我尝试了多次，创建目录总是不能成功，返回状态400，错误消息“bad location”，貌似是path参数不对。目前还不清楚是什么原因。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>用Bash解一道编程题</title><link href="/blog/bash-solution-of-a-python-problem.html" rel="alternate"></link><updated>2012-03-31T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-31:bash-solution-of-a-python-problem.html</id><summary type="html">&lt;p&gt;EuroPython 2011的 &lt;a class="reference external" href="https://code.google.com/codejam/contest/1277486/dashboard"&gt;一道题目&lt;/a&gt; 。大意是说：半人马座统一之前由很多小国家组成，如果一个国家的名字是辅音字母结尾，那么这个国家由国王统治；如果是元音结尾，就是女王统治；如果是y结尾，则处在混乱状态，无人统治。输入文件是一个国家名字的列表，要求输出每个国家的统治者。题目不难，所以我想用bash来解决。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;for &lt;/span&gt;l in &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;    fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Case #&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$l&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; is ruled by &amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$l&lt;/span&gt;|tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;if  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;|grep &lt;span class="s1"&gt;&amp;#39;y$&amp;#39;&lt;/span&gt;&amp;gt;/dev/null; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nobody.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;|grep &lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u]$&amp;#39;&lt;/span&gt;&amp;gt;/dev/null; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a queen.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a king.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用cat读取输入文件，然后逐行处理。第12行用tr命令把国家名字替换成小写。第13和16行分别用grep进行正则表达式匹配，判断是否以y或者元音字母结尾。&lt;/p&gt;
&lt;p&gt;这段代码的输出结果通过了检查，但是比较了一下性能，发现跟相应的python版本差距很大，执行时间相差50倍。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:17:16&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries.sh A-small-practice1.in &amp;gt; sh.out

real    0m1.991s
user    0m0.198s
sys 0m0.842s
&lt;span class="o"&gt;[&lt;/span&gt;temp 11:17:44&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python a.py A-small-practice1.in py.out

real    0m0.040s
user    0m0.032s
sys 0m0.003s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;造成性能差的原因，可能是因为bash脚本中调用了其他的程序，每一次调用都需要创建新进程，并且要通过管道进行进程间通信。在上面脚本里，每次循环至少要调用echo4次、grep一次、tr一次，使用管道3次，这些操作都需要进行系统调用，带来极大的性能开销，反映在time结果上就是sys时间是python版本的280倍之多。由此得到性能优化的方向：尽量使用bash的内置功能，减少外部程序调用。&lt;/p&gt;
&lt;p&gt;Bash其实已经提供了内建正则表达式匹配功能，通过=~运算符实现。用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$regexp&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以把脚本中的grep调用全部去掉。另外脚本中每一行结果分两次输出，可以合并成一次，减少一次echo调用。新的脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="k"&gt;for &lt;/span&gt;l in &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;    fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$l&lt;/span&gt;|tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nv"&gt;reg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y$&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;reg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u]$&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$reg1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nobody.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$reg2&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a queen.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a king.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Case #&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$l&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; is ruled by $who&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再测性能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:46:44&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries-tuned.sh A-small-practice1.in &amp;gt; sh.out

real    0m0.820s
user    0m0.101s
sys 0m0.151
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;性能提高了不少，但是执行时间仍然是python版本的20倍！看起来性能瓶颈可能在tr。一方面是前面分析的创建进程和管道通信的开销，反映在sys时间上；另一方面，user时间也比较大，可能是tr的实现机制所致，这种基于正则表达式的替换用来进行大小写转换有点儿杀鸡用牛刀的感觉。Bash里面没有找到比较简单的办法替代tr，但是可以修改reg1和reg2，在条件判断的时候把大小写考虑进去，同样可以达到目的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;reg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[y|Y]$&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;reg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u|A|E|I|O|U]$&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再测性能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:56:14&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries-tuned2.sh A-small-practice1.in &amp;gt; sh.out

real    0m0.056s
user    0m0.043s
sys 0m0.003s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;已经相当接近了，不过总的执行时间仍然比python多出了40%，多出来的部分主要在usr，应该是Bash本身的问题了。&lt;/p&gt;
</summary><category term="bash"></category><category term="programming"></category></entry><entry><title>Vim文本替换</title><link href="/blog/vim-replacement.html" rel="alternate"></link><updated>2012-03-31T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-31:vim-replacement.html</id><summary type="html">&lt;p&gt;Vim命令s(substitute)用来进行字符串替换。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;基本模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;:s/pattern/string&lt;/p&gt;
&lt;p&gt;替换当前行中第一个匹配模式pattern的字符串为string。Pattern可以是正则表达式。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;前缀&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在s之前添加前缀可以指定要替换的行范围。前缀 m, n表示对m到n之间所有行执行替换操作。m和n可以为行号或者“.”、“$”，“.”表示当前行，“$”表示最后一行。前缀%表示所有行。&lt;/p&gt;
&lt;p&gt;前缀中也可以使用正则表达式。比如Vim用户手册里的例子：&lt;/p&gt;
&lt;p&gt;: ?^Chapter?,/^Chapter/s=grey=gray=g&lt;/p&gt;
&lt;p&gt;?表示向上搜索（backwards），/表示向下搜索（forward）。这条命令表示在上一个以Chapter开头的行和下一个以Chapter开头的行之间，对所有行执行替换操作。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;后缀&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后缀参数/?可以控制替换操作，常用参数有下面几种：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="43%" /&gt;
&lt;col width="57%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;替换前请求确认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;替换行中所有的匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;忽略大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;分隔符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了/之外，#、+、=等字符也可以用作替换命令中的分隔符。当pattern或者string中有字符“/”时，可以用转义字符“”进行区分，也可以直接用#、+或者=代替/作为命令分隔符。&lt;/p&gt;
</summary><category term="vim"></category></entry><entry><title>自动备份到U盘</title><link href="/blog/auto-backup-to-usb.html" rel="alternate"></link><updated>2012-03-21T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-21:auto-backup-to-usb.html</id><summary type="html">&lt;p&gt;手上有几个U盘和存储卡闲着没用，刚好最近写东西比较多，想着用一个U盘来作专用备份盘，既保护了劳动成果，又发挥了余热。&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;U盘插上之后自动同步备份目录里的文件到U盘，无需任何手动操作；&lt;/li&gt;
&lt;li&gt;可以指定某个U盘做备份盘，其他盘不受影响；&lt;/li&gt;
&lt;li&gt;可以指定多个需要备份的目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现文件同步，rsync是当之无愧的首选工具。但是rsync不能实现自动同步。要做到U盘插上之后自动同步，需要借助udev。Udev是Linux的设备管理程序。当有即插即用设备接入系统之后，内核检测到新设备，通过netlink向用户态udev的用户态守护进程udevd发送一个消息，udevd根据用户指定的规则执行相应的操作，动态创建设备文件。只要 &lt;a class="reference external" href="http://www.reactivated.net/writing_udev_rules.html"&gt;添加自己的规则&lt;/a&gt; ，就可以实现自动备份。&lt;/p&gt;
&lt;p&gt;Udev的规则文件放在/etc/udev/rules.d目录下，规则中每一行包含一个或者多个逗号隔开的语句，其中最后一个语句是执行的操作，前面的语句是执行该操作需要满足的条件。&lt;/p&gt;
&lt;p&gt;规则文件如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# avoid system disk&lt;/span&gt;
KERNEL!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sd[b-z][0-9]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backup_end&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# import UUID&lt;/span&gt;
IMPORT&lt;span class="o"&gt;{&lt;/span&gt;program&lt;span class="o"&gt;}=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/blkid -o udev -s LABEL %N&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# do something when device added&lt;/span&gt;
ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_LABEL&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SETH&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/seth/bin/backup.sh %N&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# exit&lt;/span&gt;
&lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backup_end&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一行判断设备在内核中的名字，如果不是正则表达式”sd[b-z][0-9]“所描述的形式，则直接跳转到backup_end，结束脚本。这一句用来跳过系统盘sda。&lt;/p&gt;
&lt;p&gt;第二行调用blkid命令获得该设备上文件系统的卷标(label)，并用IMPORT命令将输出结果导入为环境变量。blkid的用法参见man page。注意这里blkid命令必须写完整路径，否则无法执行。&lt;/p&gt;
&lt;p&gt;第三行判断上面导入的环境变量ID_FS_LABEL是否为指定的值，如果是，并且当前动作为add，即添加设备，则执行脚本backup.sh。&lt;/p&gt;
&lt;p&gt;这样我们就实现了对设备的监控，当指定的U盘接入时，就会自动执行备份脚本。脚本backup.sh如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# device used to store duplicates&lt;/span&gt;
&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="c"&gt;# mount point for the device&lt;/span&gt;
&lt;span class="nv"&gt;dst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/media/backup
&lt;span class="c"&gt;# a list of directories seperated by colon&lt;/span&gt;
&lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/seth/Documents/correlation:/home/seth/Documents/datastructure
mkdir -p &lt;span class="nv"&gt;$dst&lt;/span&gt;
mount &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$dst&lt;/span&gt;
&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;: &lt;span class="nv"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nv"&gt;$src&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; -p arr
&lt;span class="k"&gt;for &lt;/span&gt;d in &lt;span class="s2"&gt;&amp;quot;${arr[@]}&amp;quot;&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;rsync -r &lt;span class="nv"&gt;$src&lt;/span&gt; &lt;span class="nv"&gt;$dst&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
umount &lt;span class="nv"&gt;$dst&lt;/span&gt;
rmdir &lt;span class="nv"&gt;$dst&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里主要就是对指定目录逐个进行同步。难点就是对字符串src的处理，需要把它分割转换成数组。具体解释可以参考 &lt;a class="reference external" href="http://codingstandards.iteye.com/blog/1164910"&gt;这里&lt;/a&gt; 。&lt;/p&gt;
</summary><category term="automation"></category><category term="bash"></category></entry><entry><title>十分钟Emacs入门</title><link href="/blog/10m-emacs-tut.html" rel="alternate"></link><updated>2012-03-16T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-16:10m-emacs-tut.html</id><summary type="html">&lt;p&gt;本文的主要内容来自John M. Gabriele所写的 &lt;a class="reference external" href="http://www.unexpected-vortices.com/clojure/10-minute-emacs-for-clojure.html"&gt;Clojure简明入门教程&lt;/a&gt; ，其中关于Emacs的部分写得简洁明了，最适合像我一样心急又想吃热豆腐的癞蛤蟆，特地拿来收藏学习。&lt;/p&gt;
&lt;p&gt;在Emacs里，文件在buffer里进行编辑。Emacs主窗口一次只显示一个buffer，但是可以对窗口进行分割。同时还有一些其他的缓冲区显示文件以外的信息（比如，某个缓冲区会显示你当前打开的所有文件）。&lt;/p&gt;
&lt;p&gt;Emacs编辑命令都是Ctrl和Alt的组合键，但是Alt通常被称作Meta。Emacs用户习惯把Ctrl-a写成C-a，把Alt-x写成M-x。&lt;/p&gt;
&lt;p&gt;如果你还在学习中，对编辑命令的键盘绑定还不熟的话，可以通过菜单来运行命令，对应的键盘绑定就显示在菜单项的旁边。Emacs可以像普通的GUI编辑器一样使用：方向键、Home、End、PgUp/PgDn的用法都完全相同。用“Ctrl-方向键”将以单词和段落为单位移动光标。鼠标是OK的。不过，每一个Emacs用户上辈子都是折翼的天使（这句是我自己加的），到最后你可能还是要学习emacs的快捷键，这样来得更high。&lt;/p&gt;
&lt;p&gt;Emacs采用层次化的方式把一些命令安排在其他命令的“下面”（类似于菜单）。也就是说，要执行某些命令，必须先执行一条前缀命令，然后在这个上下文环境下才能执行需要的命令。比如，文件操作的前缀命令是C-x，先按下C-x，然后Emacs会等待下一个快捷键。C-x C-f打开文件，C-x C-s保存文件。再举个例子：C-h是帮助命令的前缀，C-h t打开内置的Emacs指南。&lt;/p&gt;
&lt;p&gt;在放手去do之前，再给个提示：C-g可以终止任何命令，帮你摆脱困境（有时候需要连按两次才行）。&lt;/p&gt;
&lt;p&gt;下面是一些常用的快捷键：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="71%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;C-x C-f&lt;/td&gt;
&lt;td&gt;打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x k Ret&lt;/td&gt;
&lt;td&gt;关闭当前文件（关闭缓冲区）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x C-s&lt;/td&gt;
&lt;td&gt;保存文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x C-c&lt;/td&gt;
&lt;td&gt;退出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-Space&lt;/td&gt;
&lt;td&gt;开始文本选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-g&lt;/td&gt;
&lt;td&gt;取消当前命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-s&lt;/td&gt;
&lt;td&gt;增量搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-w&lt;/td&gt;
&lt;td&gt;剪切&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-w&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-y&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-/&lt;/td&gt;
&lt;td&gt;撤销（undo）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-/&lt;/td&gt;
&lt;td&gt;自动补全&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-f&lt;/td&gt;
&lt;td&gt;向前移动光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-b&lt;/td&gt;
&lt;td&gt;向后移动光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-f&lt;/td&gt;
&lt;td&gt;向前移动一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-b&lt;/td&gt;
&lt;td&gt;向后移动一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-n&lt;/td&gt;
&lt;td&gt;移动到下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-p&lt;/td&gt;
&lt;td&gt;移动到上一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-n&lt;/td&gt;
&lt;td&gt;向下滚动视窗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-p&lt;/td&gt;
&lt;td&gt;向上滚动视窗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-a&lt;/td&gt;
&lt;td&gt;移动到行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-e&lt;/td&gt;
&lt;td&gt;移动到行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-{&lt;/td&gt;
&lt;td&gt;向上移动一个段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-}&lt;/td&gt;
&lt;td&gt;向下移动一个段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-v&lt;/td&gt;
&lt;td&gt;下翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-v&lt;/td&gt;
&lt;td&gt;上翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-&amp;lt;&lt;/td&gt;
&lt;td&gt;移动到缓冲区顶部（文件头）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-&amp;gt;&lt;/td&gt;
&lt;td&gt;移动到缓冲区底部（文件尾）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x 2&lt;/td&gt;
&lt;td&gt;水平分割窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x 3&lt;/td&gt;
&lt;td&gt;垂直分割窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x o&lt;/td&gt;
&lt;td&gt;移动光标到另一窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x b Ret&lt;/td&gt;
&lt;td&gt;在当前显示其他缓冲区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-x 0&lt;/td&gt;
&lt;td&gt;关闭一个窗口（分割之后）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;再补充几个：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="47%" /&gt;
&lt;col width="53%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;C-d&lt;/td&gt;
&lt;td&gt;删除光标上的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEL&lt;/td&gt;
&lt;td&gt;删除光标前的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-d&lt;/td&gt;
&lt;td&gt;删除光标后的单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;M-DEL&lt;/td&gt;
&lt;td&gt;删除光标前的单词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-k&lt;/td&gt;
&lt;td&gt;从光标位置删除到行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-y&lt;/td&gt;
&lt;td&gt;恢复最近一次删除的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-S-Backspace&lt;/td&gt;
&lt;td&gt;删除整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C-h b&lt;/td&gt;
&lt;td&gt;显示所有的快捷键&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后，记住输入“M-x 命令名称”可以执行任何命令。比如，删除文件里所有行末的空白：“M-x delete-trailing-whitespace”。&lt;/p&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在X下，Ctrl+Space通常被占用作输入法切换，所以最好重新定义这个快捷键。Emacs里各种快捷键组合几乎都给占用了，找了半天才有一个Ctrl+tab，将就用把。把下面这行加到~/.emacs文件里。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(global-set-key [(control tab)] ‘set-mark-command)&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;学习Emacs的一个好办法：把主窗口分成左右两边，在一边打开常用快捷键列表，另一边编辑文件，边用边学。&lt;/li&gt;
&lt;li&gt;一些不错的参考资料&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.unexpected-vortices.com/emacs/quick-ref.html"&gt;http://www.unexpected-vortices.com/emacs/quick-ref.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.nongnu.org/emacs-tiny-tools/keybindings/"&gt;http://www.nongnu.org/emacs-tiny-tools/keybindings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://lifegoo.pluskid.org/wiki/Emacs.html"&gt;http://lifegoo.pluskid.org/wiki/Emacs.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.rutgers.edu/LCSR-Computing/some-docs/emacs-chart.html"&gt;http://www.cs.rutgers.edu/LCSR-Computing/some-docs/emacs-chart.html&lt;/a&gt;&lt;/p&gt;
</summary><category term="emacs"></category><category term="tutorial"></category></entry><entry><title>Linux下自动关机</title><link href="/blog/linux-auto-shutdown.html" rel="alternate"></link><updated>2012-03-14T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-14:linux-auto-shutdown.html</id><summary type="html">&lt;p&gt;为了限制自己熬夜，决定设置电脑自动关机。Windows下用计划任务就可以了，Linux下可以用crond，但是稍微麻烦一点儿。&lt;/p&gt;
&lt;div class="section" id="version-1"&gt;
&lt;h2&gt;Version 1&lt;/h2&gt;
&lt;p&gt;最简单的实现，用crontab定时执行poweroff命令。在shell中运行crontab -e，添加定时关机的任务：&lt;/p&gt;
&lt;p&gt;0 2 * * 1-5    poweroff&lt;/p&gt;
&lt;p&gt;crontab的格式可以参考它的manpage，前5项分别是：分钟、小时、日期、月份和星期几，后面是需要执行的命令。上面这一行的意思就是周一至周五的每天凌晨2点执行poweroff。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-2"&gt;
&lt;h2&gt;Version 2&lt;/h2&gt;
&lt;p&gt;上面这个办法虽然可以实现定时关机的功能，但是缺少点儿用户交互。如果写东西写到到半夜，还没有保存就忽然自动关机了，必定非常郁闷。关机之前最好给个提示，并且允许用户在特殊情况下取消关机操作。Gnome提供了一个很好的命令行工具 &lt;a class="reference external" href="http://library.gnome.org/users/zenity/stable/index.html.en"&gt;zenity&lt;/a&gt; ，可以显示一些常用的对话框并进行简单的交互。我们可以用一个shell脚本对zenity和poweroff命令进行包装实现用户交互。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:0
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;zh_CN.utf8

zenity --question --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;天色不早了&amp;quot;&lt;/span&gt; --text&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;主人，来滚床单吧？&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;poweroff
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用了zenity的question对话框，如果用户点击了“是”，zenity返回0，否则返回1。根据这个返回值（Bash中变量$?表示上一条命令的返回值）来决定是否关机。&lt;/p&gt;
&lt;p&gt;注意crond是一个后台守护进程，其运行环境跟图形界面的终端下面不同，如果要正确执行这条命令，需要设置两个环境变量。一个是DISPLAY，指定用于显示的图形前端。具体的值可以在终端里echo $DISPLAY察看。另外一个是LANG，如果要显示中文，需要设置LANG=zh_CN.utf8，否则命令行中的中文字符串不能正确解释，会出现选项错误。我就在这个问题上卡了好半天。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-3"&gt;
&lt;h2&gt;Version 3&lt;/h2&gt;
&lt;p&gt;版本2会一直等待用户输入，没有输入的情况下不会关机，还是有点儿不给力。最好能够像windows一样，到点儿弹出一个对话框，并且显示一个倒计时。在倒计时结束前，用户可以取消关机操作。用Zenity的progress对话框就可以实现这个功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:0
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;zh_CN.utf8

&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30
&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; -lt &lt;span class="nv"&gt;$total&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;count*100/total&lt;span class="k"&gt;))&lt;/span&gt;
        sleep 1
        &lt;span class="o"&gt;((&lt;/span&gt;count+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; | zenity --progress --title&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;天色不早了&amp;quot;&lt;/span&gt; --text&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;主人，苍老师喊你去滚床单！&amp;quot;&lt;/span&gt; --auto-close --auto-kill

poweroff
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zenity –progress将显示一个带进度条的对话框，并且从标准输入读取一个0-100的数值作为当前进度。–auto-close表示进度到100后自动关闭对话框。–auto-kill表示如果点击“取消”则终止父进程。这样如果用户没有输入，则30秒之后zenity退出，继续执行下一条poweroff命令；如果用户点击“取消”，则脚本被kill掉，不会关机。&lt;/p&gt;
&lt;p&gt;最终版本的脚本可以在 &lt;a class="reference external" href="http://pastebin.com/hMKRkjQV"&gt;pastebin&lt;/a&gt; 获取。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="bash"></category><category term="automation"></category></entry><entry><title>我和编程语言不得不说的故事</title><link href="/blog/i-and-prog-lang.html" rel="alternate"></link><updated>2012-03-08T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-08:i-and-prog-lang.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="/blog/i-and-os.html"&gt;上回书&lt;/a&gt; 说过哥在中学阶段自学BASIC和C语言，这次就从大学开始。正式成为IT学徒之后，自然折腾得更起劲。大一基本上还是C语言，最经典的三本书：C程序设计语言、C专家编程、C和指针，都翻过。虽然看得不扎实，但是也获益非浅，所以说看书一定要看好书。那时候做的都是些很蛋疼的事情，比如在dos下面画图形界面。为了这个还经常在图书馆里翻那种超旧的、落满灰的书找资料。比较难得的是，那时候就已经有了封装的意识。大一下做C语言课设，我暑假的时候在家里就把要用的一些什么数据结构、图形界面都写成函数，调试好了。后来在deadline之前，熬了三个晚上把这些东西捏和成了最后的系统，有窗口有菜单，还支持鼠标和快捷键，并且刻意模仿了windows里的一些效果。居然还用了事件驱动的概念，把键盘和鼠标的中断全部封装成事件放在队列里，然后挨个处理。还是那时候干劲足啊！&lt;/p&gt;
&lt;p&gt;最BT的是，有一段时间做梦都是C语言。&lt;/p&gt;
&lt;p&gt;后来参加社团活动，从某位非计算机专业+Linux爱好者师兄那儿了解到scheme，号称是MIT的编程入门语言。于是整天从抱着图书馆借来的Structure and Interpretation of Computer Program生啃。这种事情，即使放在现在，也是很另类。其实那个时候也没有太多的想法，一是觉得MIT很牛叉，二是觉得scheme里面那些括号很好玩，对于S表达式、lambda算子、尾递归、函数式编程都没有什么概念（其实现在也是半懂不懂）。当时除了看书和偶尔写下小程序之外，也没什么用。后来学计算方法的时候，终于让我逮住机会显摆了一把。哥用scheme写了课程设计的拉格朗日插值算法。因为害怕老师看不懂给0分，所以还用C语言写了另外一个版本一起交上去。&lt;/p&gt;
&lt;p&gt;再然后大概就是python，从图书馆的《python核心编程》开始的（本科的时候超喜欢往图书馆跑）。后来操作系统课程设计，要做图形界面，于是小试牛刀。Python + wxWindow = 搞定！因为这个，也让我对python的印象好很多。大四做编译原理的课程设计，我选了个根据DFA画状态图的题目，又是用python搞定的，不过图形库换成了tk。直到现在，需要写些小程序进行数据处理和分析的时候，python还是我的首选。说实话，最开始用python，是把它当成Java的替代品，图个方便。&lt;/p&gt;
&lt;p&gt;既然折腾linux，就不能不碰shell脚本。这些年一直在用，虽然不算高手，但也颇有心得。经典案例就是大四的时候帮实验室的师兄做性能测试。跑一次少则几十分钟，多则N个小时，全套下来，一共有几十个项目要测。我可不想一直在闹哄哄的机房里泡着。所以哥写了个脚本，只要把测试项目的参数写到文件里，然后启动脚本，就可以回家睡觉了，等程序跑完自动把结果email到邮箱。其实shell脚本就是一种很好的粘合剂。KISS是Unix的一贯原则，每样程序只关注一件事，并且把它做到最好，再用各种粘合剂把它们组合起来，就是一个强大的系统。类似的还有很多，比如perl，还有人在尝试用scheme、lisp、python这些语言来替代shell。&lt;/p&gt;
&lt;p&gt;有一段折腾chrome插件，又去搞了一阵子javascript。倒是挺简单，基本上不用怎么学就可以上手。有人说，javascript是最被误解的一种语言。我曾经一直认为它就是用来做网页动态效果的，没什么大用，确实严重低估了它的重要性。传统b/s模式下计算任务主要在服务器端，浏览器基本就充当一个前端界面的作用，要想充分利用客户端的资源，必须c/s，比如网游。但是Web 2.0之后，浏览器端脚本所占的比重越来越大，所谓的富浏览器端应用，我觉得就是两种模式的融合。其实这个趋势是必然的，现在电脑手机的处理器越来越强，不用浪费。Javascript作为最重要的浏览器脚本语言，恰好成为了沟通二者的桥梁。Html5出来之后，api丰富了很多，能够更加充分的利用浏览器端的本地资源，什么本地存储，音频视频，3D加速，甚至是硬件传感器，统统搞定。最近常常看到一些人用javascript实现了以往只有在桌面应用程序中才能实现的功能，比如 &lt;a class="reference external" href="https://filetea.me/default/"&gt;P2P文件传输&lt;/a&gt; ，又比如 &lt;a class="reference external" href="http://www.grantgalitz.org/gameboy/"&gt;Gameboy模拟器&lt;/a&gt; ，甚至是 &lt;a class="reference external" href="http://bellard.org/jslinux/"&gt;x86模拟器&lt;/a&gt; 。更有甚者，像chrome OS，boot2geko这些项目，直接把浏览器作为用户界面的基础，成为操作系统的核心组件（据说ios也是？）。Google很明显看到了这个趋势，所以大力发展chrome，最近还整了一个新的浏览器脚本语言dart出来。同时还在搞一个叫做native client的技术，虽然走的是另一条路，但出发点是一样的。相信未来的计算系统一定是本地资源和服务器端的高度整合，云中有我，我中有云，水乳交融，缠绵悱恻。&lt;/p&gt;
&lt;p&gt;寒假在家无聊的时候，又开始折腾SAE。Python和java版本还在邀请测试阶段，只能用php。说到SAE，必须多句嘴。虽然跟GAE取了一样的名字，但是差距还是很明显的。SAE基本就是照搬了LAMP那一套，加上一些新浪服务的API，比如微博，充其量就是以前那种虚拟主机的升级版，跟真正的PaaS还是有一定差距。当然这样也有好处，就是现有的东西移植上去很容易。所以哥也找了个开源的项目owncloud，想把它移植到SAE上。Web开发这一块不怎么熟悉，不过php的语法倒是不陌生。对php没有特别深刻的印象，不过作为一种web开发专用语言，php还是相当称职的。另外最近看到有人用它开发ios app，挺神奇的。&lt;/p&gt;
&lt;p&gt;对于另外两个很主流的语言，Java和C++，我一向是比较不屑的。Java之所以流行，在我看来就是因为它把很多功能做成了标准库，原来比较麻烦的事情现在很容易就可以搞定，让程序员有一种自己忽然变强大了的错觉。另外号称的跨平台，也是一个道理。所谓跨平台，就是别人把平台相关的部分都做好了，你只用做平台无关的部分。如果底下没做好，你给我跨一个试试，小心扯着蛋！”一次编译，处处运行”还是挺有吸引力的，但是代价就是JVM造成的性能低下，更何况Java也没有做到真正的“处处运行”。&lt;/p&gt;
&lt;p&gt;当然Java的做法也没错。有位牛人说过： Civilization advances by extending the number of important operations which we can perform without thinking about them。以前处理个字符串还要纠结半天，现在可以信手拈来，这就是进步！&lt;/p&gt;
&lt;p&gt;至于C++，虽然是C语言的近亲，但是我偏偏提不起兴趣。对这个问题，我一直颇为介怀，直到后来看到大神Linus对C++的评论，批得那叫一个惨啊！C++脱胎于C，跟C兼容，但是这个不但没有成为优势，反而拖了后腿。相比C，它多了面向对象，但是面向对象里面的最常用的那一部分东西，用C语言一样可以做到，详情参见Linux内核。相比Java和一些更高级的语言，它又缺少自动内存管理这样重要的机制。C++里的指针经常被人诟病，因为它是C语言的遗留物。在一个纯粹的面向对象环境里，指针操作是很荒谬的。C++就像是新旧两代语言之间的一个过渡产品，高不成低不就的感觉。而我欣赏的，是更加纯粹的语言，或者像C语言那样贴近机器，可以精确的控制到内存中每一个bit的使用，又或者像python那样，可以完全抛开物理细节，自由的表达自己的思想。&lt;/p&gt;
&lt;p&gt;巴掌打完，该给甜枣了。C++的贡献还是要肯定的。前面引用了一位外国人的名言，现在要引用一个的中国人的话：文明的进步是新旧势力妥协的结果（好吧，此人正是区区在下）。真正革命性的idea不是那么容易被接受的，往往需要先向下兼容现有技术，才能逐渐取代之。但是即使是妥协，也已经打破了现有的格局，把整个世界拉向了自己的轨道。不仅技术领域如此，社会领域也是一样。期待翻天覆地的革命家往往都失败了，幸存下来的都是懂得妥协的人。巴黎公社这种超前时代的存在，失败是必然的，但是具有××特色的○○主义，却可以延续。所以妥协并不是什么坏事，变和不变相妥协，获胜的永远是变的一方。打江山易，守江山难，当你渴望一切维持现状不再改变的时候，就危险了，因为你没有妥协的余地。不幸的是，哥就是一个不会妥协的人。咱的脑子是纯数码的，非0即1，没有中间值，典型的二元化思维。&lt;/p&gt;
&lt;p&gt;近几年，貌似设计一种语言变得越来越容易，隔三岔五就蹦出个新品种，像什么go，io，dart，julia，zimbu等等等等，动不动就号称是未来的语言或者某某killer这样的。当然，需求多元化之后，确实需要更多的品种来满足大家的口味（即使是 &lt;a class="reference external" href="http://code.google.com/p/grass-mud-horse/"&gt;草泥马语&lt;/a&gt; 也有它的用武之地），但是这些语言能不能成功，还有待时间的检验。虽然各种语言五花八门，不过有一个趋势还是比较明显，那就是lisp的上镜率正在逐渐升高。函数式编程的思想已经越来越广泛的被接受，很多当下流行的编程语言都从中吸取了养分。Lisp本身也开始在一些产品中的到应用，并且出现了像clojure这样颇具潜力的新型变种。无责任预言一下，lisp很快会火！&lt;/p&gt;
&lt;p&gt;如果说机器是0，人类是1，那么编程语言的发展就是从0逐渐向1移动的过程。越先进的语言，越接近人类的思维方式。当然，不管发展到什么程度，底层的语言都还是需要的，只是出镜率会越来越低，使用的比例会越来越小。我们可以为每种语言取一个0到1之间的值来表示它的进化程度，然后根据各种语言代码所占的比例算出一个数学期望，那么这个期望值一定是从0到1逐渐升高的，最终会无限接近1。Paul Graham说终极编程语言应该是一种类似lisp的东西。我对此表示怀疑。因为lisp虽然表达能力很强，但是它并没有更接近人类的思维，甚至很多方面比结构化的C语言更难理解。我觉得终极编程语言应该是无限接近人类的思维模式，也就是你在编程的时候，根本意识不到自己是在编程！未来的计算机，操作系统就是一个超级解释器加上实现各种功能的library，每个用户都是程序员，每天都在编写自己的程序来解决自己的问题。不过不一定要敲键盘，可以用语音、肢体动作、甚至脑波直接输入。世事都是循环往复的，若干年前在操作系统大器未成的时候，计算机上唯一的软件就是编译器/解释器，用户做什么事情都得自己编程（所以bill gates成立微软的开山之作不是dos，而是basic）。也许以后我们还会回到这样的生活，只是编程的方式已经不可同日而语了。&lt;/p&gt;
</summary><category term="programming"></category></entry><entry><title>自动转换MP3的ID3 Tag</title><link href="/blog/mp3tag-auto-convert.html" rel="alternate"></link><updated>2012-03-06T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-06:mp3tag-auto-convert.html</id><summary type="html">&lt;p&gt;网上下载的mp3良莠不齐，最烦的是id3 tag的编码不统一，很多用的是GBK，在Linux下是乱码。虽然有很多转换工具，但是手动转换实在太麻烦，最好能自动搞定。&lt;/p&gt;
&lt;p&gt;基本思路是在浏览器里下载了mp3文件之后，自动调用tag转换工具。不幸的是浏览器本身没有提供这种功能。好在Linux是强大的，它有另一种更强大的机制： &lt;a class="reference external" href="http://www.ibm.com/developerworks/cn/linux/l-inotifynew/"&gt;inotify&lt;/a&gt; 。这是一种内核通知机制，允许进程对文件系统事件进行监控。当被监听的文件/目录上发生指定的操作时，它会发送一个消息给监听进程。我们只需要监听浏览器的下载目录，发现新下载的mp3文件就转换一下。Tag的转换推荐使用 &lt;a class="reference external" href="http://linuxtoy.org/archives/mp3tagiconv.html"&gt;mp3tagiconv&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;使用inotify需要内核支持，主流发行版的内核里都已经默认开启。Inotify提供一组系统调用用来设定监听进程，有人已经写好了很方便的命令行工具inotify-tools。这套程序包括两个命令，inotifywait和inotifywatch。前者会阻塞直到收到通知，然后打印通知信息并退出；后者后持续监听，退出的时候把所有的通知一起输出。一般发行版应该都包含了这个工具。&lt;/p&gt;
&lt;p&gt;现在可以对下载目录进行监控了，接下来的问题就是，怎么判断用户刚刚下载了一个文件？第一个想法是根据close来判断，下载的时候必定要write，完成之后要close，inotify可以监听close_write。后来发现chrome下载文件的时候，会创建临时文件.crdownload，完成后重命名。Close看来是不行了，但是既然要重命名，那监听move_to就OK了。如果是其他浏览器，可能要酌情修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;inotifywait -e moved_to &lt;span class="o"&gt;[&lt;/span&gt;DIR&lt;span class="o"&gt;]&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这行脚本的意思是，调用inotifywait监听[DIR]的move_to事件，然后把输出结果赋值给event变量。2&amp;gt;/dev/null表示把stderr重定向到/dev/null。&lt;/p&gt;
&lt;p&gt;我们知道用户刚下载了一个文件，但是还不知道是不是mp3文件。判断文件类型，比较靠谱的做法是用file命令，它会根据文件的magic number判断类型，不管扩展名改成什么，都逃不过它的法眼。这里就偷个懒，直接根据扩展名来判断。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;|grep &lt;span class="s1"&gt;&amp;#39;\.mp3$&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用 &lt;a class="reference external" href="http://net.pku.edu.cn/~yhf/tutorial/tao_regexps_zh.html"&gt;正则表达式&lt;/a&gt; 来判断文件的扩展名，’.mp3$’表示所有以.mp3结尾的字符串。如果grep的结果非空，表示这个文件是mp3，转换之。然后循环往复，监而控之。&lt;/p&gt;
&lt;p&gt;完整的bash脚本见 &lt;a class="reference external" href="http://pastebin.com/nPTrjitg"&gt;pastebin&lt;/a&gt; 。&lt;/p&gt;
</summary><category term="linux"></category><category term="bash"></category><category term="automation"></category></entry><entry><title>八一八我用过的操作系统</title><link href="/blog/i-and-os.html" rel="alternate"></link><updated>2012-03-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-05:i-and-os.html</id><summary type="html">&lt;p&gt;闲来蛋疼，忽然想清点一下自己用过的各种OS，不知不觉又想起以前的很多事情，顺便回顾一下自己的准IT生涯。&lt;/p&gt;
&lt;p&gt;最早开始接触计算机，知道OS这个概念，是从初中开始。学校里面有个机房，里面几十台也不知道是386还是486的电脑，装的全是经典的MS-DOS 6.22。每次数学老师兼任的计算机老师带我们进去上课的时候都搞得特别神圣，不过教的也就是那么一点点常用命令。后来跟同学学会了一个win命令，可以启动图形界面，也就是传说中的windows，不记得是3.1还是3.2了。虽然有图形好看多了，但是也不过就是dos的一个漂亮的壳而已。&lt;/p&gt;
&lt;p&gt;那个时候已经开始有网吧了，不对，是游戏房，还不能上网。一个小房间，几台电脑，每台旁边都围着好几个人。网吧里用的貌似已经是windows 95了，不过我这种好孩子是不会去那种地方的。&lt;/p&gt;
&lt;p&gt;在那个时候哥就已经无师自通，学会了BASIC编程（其实最早是从学习机上学的），最喜欢折腾的就是DOS里面的QBASIC。并且颇具慧眼，在完全没有人指点的情况下，毅然抛弃了Pascal、Fortran等一干语言，开始了C语言的启蒙。启蒙教材就是谭浩强的那本，注意是黄色封面的第二版，不是后来大学书摊上遍地都是的那种绿色封面的第三版！&lt;/p&gt;
&lt;p&gt;这是所有一切的开始！！！我怀疑我的下半生的走向是不是在那时候就已经决定了！&lt;/p&gt;
&lt;p&gt;不久之后，有个叔叔家买了台电脑，好歹是颗奔腾的心，可以跑win 95了。于是我就经常各种借口过去蹭，不过做的事情主要是跟堂弟一起。。。玩游戏！那时候印象最深的两个游戏，一个是神话级的仙剑，另一个，也是神话级的，生化危机。&lt;/p&gt;
&lt;p&gt;初中毕业之后，哥家里也买了电脑。这里必须要感谢一下俺爹俺娘，很有远见的，在日子不算宽裕的情况下，全力支持了我对计算机的热情。那时候基本上还是win 98一统江湖。就像“瘟酒吧”的16位/32位混合内核一样，这是一个幸福和烦恼共存的年代。漂亮好用的图形界面让人沉迷其中，时常抽风的属性又让人直想骂娘。依然记得曾经在网上看到某位mm把经典的蓝屏画面做成T恤穿在身上，高耸的胸部衬托着熟悉的蓝底白字，让人无限瞎想。后来xp出来了，起初也是骂声一片，硬件要求太高，所谓的革命性满足不了用户的期待，直到后来的sp2才算翻身。这个阶段估计很多人都经历过。&lt;/p&gt;
&lt;p&gt;这中间还折腾过两个比较小众的版本：windows的千禧版（ME）和win 2k。ME就是98的升级版，区别不大，而2k用的是NT的纯32位内核，稳定性要好得多。顺便鄙视一下微软，虽然有模有样的把windows分成服务器版和个人版，但是二者基本上没有区别，服务器版的控制面板里面一样可以找到“游戏控制器”，纯属忽悠消费者，跟张良卖剪刀没啥区别。&lt;/p&gt;
&lt;p&gt;另一个要得瑟一下的事就是，哥在那个时候已经用上了一样东西，虽然当时还比较小众，但是日后却大红大紫，堪称居家旅行，拷贝数据之必备利器。没错，那就是——U盘！高二，我买了第一个U盘，朗科，32MB，后来在大学的时候寿终正寝了。那个时候闪存技术才刚刚出现不久，还没有得到广泛认可，如今10年过去了，闪存对IT的影响还在不断加深，从消费电子产品到高端服务器。&lt;/p&gt;
&lt;p&gt;上了大学，哥继续走小众化路线，开始捣腾Linux，事实证明哥再一次走在了时代的前面。虽然第一年没有电脑，但也阻止不了我心向往之。刚开始接触的是Red Hat。那些年，很多人的第一次都给了小红帽，而现在估计很多人是从充满异域风情的非洲来客Ubuntu开始的，压根儿没有见过以前linux有多么简陋，多么揪心。当然更多人用android就已经算是跟linux的最亲密接触了。之后不久，ubuntu靠着过硬的素质和免费送光盘的魄力开始风行全球，哥又一次成为先驱者。不过那时候的ubuntu跑起来还比较慢，尤其是在我的破电脑上，所以我又换成了它的直系亲属debian，这是整个大学阶段用的主要系统之一。期间尝试过gentoo，但是自己编译软件实在太慢了，经常要整宿整宿的开机挂着，折腾了一段时间就受不鸟了。&lt;/p&gt;
&lt;p&gt;除了Linux之外，Unix一族的其他系统也没有放过，主要就是其中的两大分支：FreeBSD和Solaris，前者是4.4BSD的继承人，后者延续了SVR4的血脉。曾经一度觉得solaris很优秀，想深入钻研一下，不过稍微深入一点就发现，这个系统虽然设计很好，也有很多先进的技术，但是推广做的不好，接收程度太低，门槛儿太高，相比走社区和草根路线的linux来讲，难成大器，所以果断放弃。从现在的情况来看，这个选择还是比较明智的。苹果开始用intel cpu之后，出现了各种破解的Mac OS版本，然后在某果粉同学的怂恿下，在笔记本上装了leopard。因为硬件支持实在不好，用着也不习惯，就放弃了。&lt;/p&gt;
&lt;p&gt;大学阶段最high的是，曾经有长达数月的时间完全不用windows，所有的事情都在linux下搞定，不管是课程实验还是魔兽，有认证物证暂住证！不过估计是因为搞得太小众了，以我如此优越的条件，大学四年居然没有mm找我修过电脑！&lt;/p&gt;
&lt;p&gt;后来读研了，做项目做实验都是用Linux，基本就变成主业了。这时候开始喜欢朴实无华但是稳定可靠的CentOS，RHEL的社区版本。项目用的开发系统都被我换成了这个，自己笔记本上也装了。不过CentOS的内核版本比较老，对新硬件支持不好，所以又把自己的笔记本上系统换成了用ubuntu的衍生版本mint，浅绿色基调的界面非常清爽，比ubuntu屎黄屎黄的调调要好很多。&lt;/p&gt;
&lt;p&gt;RHEL出到6以后，CentOS开发滞后，很久没有跟上新版本，所以我就换用了另一个社区版Scientific Linux，同样是基于RHEL的代码，但人家是传说中CERN用的系统，听着就够拉风。&lt;/p&gt;
&lt;p&gt;然后gnome3出来之后，哥表示很喜欢，所以又把笔记本上的系统换成了Fedora 15，后来升级成F16，一直用到现在。这个阶段实在是没有以前那种精力去瞎折腾了。&lt;/p&gt;
&lt;p&gt;说操作系统，当然也不能不提手机。人穷志短，没那么多钱换手机，不过还是基本上赶上了诺记的辉煌时代。S40、S60v2、v3都用过。刚开始接触s60的时候，诺记还在智能手机圈里一枝独秀，横行无忌，那时候手机还是2.x寸的小屏幕，虽然号称“智能”，其实比非智能的也强不了多少。但是哥已经清楚的意识到这一块前途不可限量，绝对是未来的热点之一。不过没想到的是，一部iPhone能在瞬间把它推到一个前所未有的高度。&lt;/p&gt;
&lt;p&gt;以前有个师兄说过，把兴趣变成工作，就悲剧了。现在回想一下，太有道理了，我就是一步一步的把兴趣逐渐变成工作，果然就悲剧了。。。&lt;/p&gt;
&lt;p&gt;从中学到现在，信息越来越通达，最早的信息来源基本上就是一本《电脑爱好者》杂志，后来高中的时候买书买杂志越来越方便了，也开始接触网络。到了大学基本上就离不开网络了，同时开始接触开源软件和社区，从中也增长了不少见识。读研究生之后又被迫进入所谓的学术圈。现在，每天接触各种业界资讯，社区动态，学术进展，视野前所未有的开阔，不但有大量的新闻资讯，各种深入浅出的技术分析文章，取之不尽的开放源代码，还有看到想吐的学术论文，每天处理的信息比以前一个月接触的信息还多。信息越来越丰富的同时，思维反而越来越僵化，越来越不敢想，感觉越来越不敏锐。大概外来信息太多，把自己的想法给框住了，结果反而失去了活力。&lt;/p&gt;
</summary><category term="Operating System"></category></entry><entry><title>移植owncloud到SAE</title><link href="/blog/owncloud-sae.html" rel="alternate"></link><updated>2012-02-02T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-02-02:owncloud-sae.html</id><summary type="html">&lt;p&gt;寒假在家无聊，找点事情打发一下时间。最近比较关注新浪的App Engine，想在上面做点儿什么。写新的东西吧，一是目前没想法，二是设计比较麻烦，还是移植吧。于是想到了owncloud，KDE的一个子项目，貌似还没有人移植。如果能在SAE上运行owncloud，就可以用很低的成本拥有一个私有的云存储服务器，还是挺吸引人的。&lt;/p&gt;
&lt;p&gt;大致看了一下OC的代码和SAE的文档，移植的主要难点在文件存储这一块。OC需要用服务器的本地文件系统存储文件，但是SAE不支持本地文件系统写操作，文件只能存储到它的分布式文件系统里。这个系统目前很不完善，缺乏POSIX的很多特性，比如很多文件属性没有，而且对目录的支持也不完善，这个是最关键的。先从简单的开始做起，完成一个不支持层次目录的版本。&lt;/p&gt;
&lt;p&gt;OC的代码层次比较清晰，其中文件存储这一块分了两层。一层是抽象层（lib/files.php和lib/filestorage.php），为OC的各个app提供跟底层无关的文件访问API。另外一层是后端存储引擎（lib/filestorage/），就是跟存储方式相关的具体实现。目前有两个引擎：local.php和remote.php。前者就是用本地文件系统做存储后端，后者是远程存储，具体是个什么东东我还不是很清楚。&lt;/p&gt;
&lt;p&gt;那么主要任务就是添加一个SAE的专用存储后端（sae.php）。先把local.php整个copy过来，里面其实就是定义了一个OC_Filestorage的子类OC_Filestorage_Local，各个方法的含义基本上很明确了。参考这个，实现一个新的类OC_Filestorage_SAE。之后还要在lib/base.php里加上一句registerStorageType，注册新的存储后端。&lt;/p&gt;
&lt;p&gt;因为不支持目录，所以其它有些地方还需要进行一些相应的修改。比如OC里默认在DATADIR/files/目录下为每个用户创建一个目录用于存储文件，现在只能全部存储在根目录下。&lt;/p&gt;
&lt;p&gt;另外，OC在安装的时候通过交互式界面（lib/setup.php）填写配置信息，然后把配置信息写到config/config.php文件里。而SAE里不能修改本地文件。目前的做法是事先写好配置，然后调用一个新的setup.php，根据配置信息进行初始化。&lt;/p&gt;
&lt;p&gt;完成的代码发布在github，基于最新发布的owncloud3，详细说明见README。&lt;/p&gt;
&lt;p&gt;不知道SAE近期有没有继续完善其分布式存储系统的计划，不过通过这个移植过程，我倒是产生了一个想法：用SAE的kvdb和storage实现一个功能完善的分布式文件系统。用kvdb存储元数据（inode和目录等等），storage存储数据，通过php streamWrapper进行封装，这样就可以像本地文件一样通过open()，read()，write()等函数来访问。如果有了这个东东，再移植OC或者类似的系统，难度应该会小很多。&lt;/p&gt;
</summary><category term="cloud"></category><category term="php"></category></entry><entry><title>Chrome插件开发小结</title><link href="/blog/chrome-ext-dev.html" rel="alternate"></link><updated>2011-11-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2011-11-05:chrome-ext-dev.html</id><summary type="html">&lt;p&gt;这几天写了个简单的chrome扩展，总结一下。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Manifest很重要。Manifest.json决定了这个扩展程序可以使用哪些资源和API，如果写错了，正确的代码也无法执行。这种做法有一个好处是强迫你先做好设计，先想清楚自己需要用到哪些东西，而不是盲目的写代码。这个问题上我犯过不止一次错误，急躁的毛病还是要改改。&lt;/li&gt;
&lt;li&gt;用console输出调试信息。调试程序最简单最直接的办法就是在代码里加调试输出，然后查看输出结果就可以了解程序执行的过程和关键数据。C里面用printf()，Javascript里面可以用alert()弹出对话框输出信息。但是弹出窗口很不方便，特别是输出较多的时候。另外对于background page，是不能弹出对话框的。所以更好的做法是用console.log()输出的console。有些页面（比如popup）是不能直接输出到console的，可以调用chrome.extension.getBackgroundPage().console.log()输出到background page的console。查看log可以用下面方法：对于Content script，直接在当前页面按Ctrl + Shift + I打开调试工具，在console标签里查看；对于Background page，在“选项”的“扩展程序”页面里面查看，选上“开发人员模式”，然后每个插件展开后都会有一个backgroud page的链接（如果有background page的话），点击就可以打开background page的控制台。&lt;/li&gt;
&lt;li&gt;找别人的代码来参考。我从来不喜欢死看教程，很多东西找段代码一看就什么都明白了。可以到github等项目托管网站或者一些代码搜索网站上找别人的代码作参考。直接搜你想查的函数，可以得到很多结果。&lt;/li&gt;
&lt;li&gt;学会用回调。Chrome插件用Javascript开发，而回调是Javascript的一个重要特性。Chrome提供的API里面很多是基于回调的，甚至连一个简单的tabs.getSelected()得到当前选中的tab，都要用回调。所以理解回调的原理，学会用回调很重要。回调是在异步通信中用来返回结果给消息发送者的。理解回调的一个关键点是，执行回调的和发送请求的（也就是设置回调函数的）是两个并发的线程。由于是异步非阻塞的，回调函数的执行时间完全取决于消息接收方的响应速度，getSelected()函数返回之后它的回调函数并没有返回。Javascript里面的回调可以用匿名函数的方式直接写在参数表里，这种写法很具有迷惑性，让人误以为函数返回之后回调也执行完了，我就在这个上面栽了跟头。在写这个扩展程序的过程中，我使用了一个for循环逐条处理搜索结果，并用sendRequest()向background page发送消息，但是我在回调函数里引用了循环里的变量，每次循环结束这些变量都会改变，因此当回调执行时，取到的值已经不是我想要的了。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="chrome"></category><category term="javascript"></category></entry><entry><title>Fedora下安装Common Lisp开发环境</title><link href="/blog/emacs-lisp.html" rel="alternate"></link><updated>2011-10-25T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2011-10-25:emacs-lisp.html</id><summary type="html">&lt;p&gt;需要用到的软件：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sbcl.org/"&gt;Sbcl&lt;/a&gt; ，比较流行的一种Common Lisp实现；
Emacs ，用作开发环境，虽然比较复杂，但是比原来的命令行好用多了；
&lt;a class="reference external" href="http://common-lisp.net/project/slime/"&gt;Slime&lt;/a&gt; ，Emacs下的一个交互式lisp开发环境；
&lt;a class="reference external" href="http://www.quicklisp.org/beta/"&gt;Quicklisp&lt;/a&gt; ，Common Lisp包管理系统。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用yum安装emacs和sbcl。&lt;/li&gt;
&lt;li&gt;然后按如下步骤安装quicklisp。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下载quicklisp安装脚本：
wget &lt;a class="reference external" href="http://beta.quicklisp.org/quicklisp.lisp"&gt;http://beta.quicklisp.org/quicklisp.lisp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;启动sbcl：
sbcl –load quicklisp.lisp&lt;/p&gt;
&lt;p&gt;安装quicklisp：
(quicklisp-quickstart:install)&lt;/p&gt;
&lt;p&gt;添加quicklisp到启动文件，以后启动sbcl会自动加载quicklisp
(ql:add-to-init-file)&lt;/p&gt;
&lt;p&gt;3. 用quicklisp安装slime
(ql:quickload &amp;quot;quicklisp-slime-helper&amp;quot;)&lt;/p&gt;
&lt;p&gt;安装脚本会自动下载需要的文件，执行完之后会给出一段elisp代码，按照说明把代码加入.emacs文件。&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;启动emacs，M-x slime启动slime，进入交互式cl编程环境，大功告成！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了第一步安装sbcl和emacs之外，其他步骤跟发行版无关，应该同样适用于Ubuntu等其他版本。如果还嫌麻烦，直接用Lispbox。&lt;/p&gt;
</summary><category term="emacs"></category><category term="lisp"></category></entry><entry><title>有图有真相：实验分析Google按图搜索</title><link href="/blog/google-search-by-img-experiments.html" rel="alternate"></link><updated>2011-06-19T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2011-06-19:google-search-by-img-experiments.html</id><summary type="html">&lt;p&gt;Google推出按图搜索，貌似效果比较震撼。Google的搜索算法真的强大到能像人一样仅凭图片就识别出内容吗？我对此表示怀疑。Google的搜索引擎又是怎么做到按图搜索的？我不是研究这个的，只能做几个简单的实验进行分析，管中窥豹，贻笑大方。&lt;/p&gt;
&lt;div class="section" id="first-blood"&gt;
&lt;h2&gt;实验1 First Blood&lt;/h2&gt;
&lt;p&gt;图片 苍井老师的写真&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/1_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/1_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;这里Google给出的搜索结果包括三个方面（对应图中1, 2, 3）：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Best guess for this image，Google“猜”出来的图片内容&lt;/li&gt;
&lt;li&gt;Visually similar images，相似图片&lt;/li&gt;
&lt;li&gt;Pages that include matching images，包含该匹配图片的页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很显然，得到结果的顺序应该是3→1→2（这在后面的实验里会得到验证）。首先搜索图片库，寻找相同的图片（判断两张图片是否相同的方法很可能是通过比较像素来进行的），然后得到包含这些图片的网页。再根据网页里的文本信息推测图片的含义，所以在这里才能推测出图片里的人是我们敬爱的苍井老师。最后根据图片本身的特征（比如色彩、灰度、轮廓什么的，我不是太懂）搜索类似的图片，再辅以前面的推测结论进行筛选，得到相似图片。&lt;/p&gt;
&lt;p&gt;这张图片本身就是从网上找来的，所以找到比较多的结果也并不奇怪。&lt;/p&gt;
&lt;p&gt;这里可以看到，虽然有了aoi sora作为关键字，还是没有能完全剔除掉4这样的无关结果。这跟文本搜索是类似的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;实验2 部分匹配&lt;/h2&gt;
&lt;p&gt;从实验1的图片里截取部分，进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 大半张脸&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="大半张脸" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 整个胸部&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="整个胸部" src="http://seth-images.qiniudn.com/search-by-img-exp/2_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_4.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;通过这个实验，应该可以断定，像素匹配的比例是判断两个图片是否相同的重要依据。只要匹配的像素达到一定比例，就认为两张图片匹配。图片1因为截取的部分少，匹配的比例也小，所以图片索引里的那些相同图片都被认为是不同的；而图片2截取的部分多，匹配比例也大，就能够成功的找到相同图片。&lt;/p&gt;
&lt;p&gt;不过图片1虽然没有成功的找到匹配的结果，但是成功的识别出了人脸，所以相似图片结果里没有出现很离谱的物体。&lt;/p&gt;
&lt;p&gt;另外这里也可以看到，如果成功匹配，就会找到很多包含相同图片的网页（Pages that include matching images），根据这些网页上频繁出现的关键词，就可以推测出图片的内容；反之则只有一些看起来相似的图片（Visually similar images）。这充分说明1的结果是根据3来的，同时会作用于2。&lt;/p&gt;
&lt;p&gt;BTW：不得不佩服google的强大，仅凭胸部就能认出苍井老师。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;实验3 干扰因素&lt;/h2&gt;
&lt;p&gt;图片1 添加文字&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师+文字" src="http://seth-images.qiniudn.com/search-by-img-exp/3_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 添加图形&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师+凤姐" src="http://seth-images.qiniudn.com/search-by-img-exp/3_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;为了偷懒，这两个结果我就不贴图了，想看可以自己去试。一句话，不管是办证还是凤姐，都没能掩盖苍井老师的光芒。原理应该跟实验2的部分匹配类似，只要匹配部分达到一定比例，就认为是相同的，这样自然就把我添加的那些干扰因素排除在外了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;实验4 变形&lt;/h2&gt;
&lt;p&gt;改变图片的宽高比进行，用加长版苍井老师去搜索。&lt;/p&gt;
&lt;p&gt;图片 加长夜用型的苍井老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="加长夜用型的苍井老师" src="http://seth-images.qiniudn.com/search-by-img-exp/4_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/4_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;这里就不太明白是怎么搜出这个结果的，而且还就单单搜出这么一个结果。由于匹配结果太少，而且还是中文，所以Google终于没能认出苍井老师来，看来Google真的要好好学学中文了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;实验5 变色&lt;/h2&gt;
&lt;p&gt;改变图片的颜色位数进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 256色复古版苍老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="256色苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/5_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 16色复古苍老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="16色苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/5_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;16色搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="16色搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/5_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;256色的情况下，图片失真还比较小，仍然可以正确匹配；16色的情况下，也没有完全失败，还是找到了少量的结果，不过相似图片的结果，就差得相当远了。可见颜色在相似图片搜索中的重要作用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;实验6 更复杂的变化&lt;/h2&gt;
&lt;p&gt;用Photoshop的一些特效对原始图片进行处理，然后进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 50%杂色&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="50%杂色" src="http://seth-images.qiniudn.com/search-by-img-exp/6_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;杂色搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="杂色50搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/6_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 距离25的动感模糊&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="距离25的动感模糊" src="http://seth-images.qiniudn.com/search-by-img-exp/6_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;动感模糊搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/6_4.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片1色彩组成要比原图复杂很多，但基本轮廓仍然比较清晰，所以相似图片里基本还都是人形，而且肉眼上来看，色彩也跟图片1比较接近。这说明色彩是相似图片搜索的重要依据，专业术语我讲不清楚，不过原理可能跟gift类似。&lt;/p&gt;
&lt;p&gt;图片2色彩构成基本没变，只是轮廓模糊了许多，所以相似图片里面多了些猫猫狗狗。这从反面说明，Google对轮廓识别也有一套。另外这里图片模糊了，guess的结果也模糊了，这个太囧了。看一下这里的结果数，只有72，由于结果相关页面太少，因此推测的结果也不够准确，结合前面的实验，充分说明Google的guess，是基于大量相关页面进行。&lt;/p&gt;
&lt;p&gt;这两个都能正确搜索出结果，看起来很强大。不过仔细思考一下，可能还是个比例问题。这两个PS特效无非是修改原图上的部分像素来造成视觉效果，只要修改的像素不超过一定比例，在Google的匹配算法里仍然会被认为是和原图相同的。&lt;/p&gt;
&lt;p&gt;时间关系，PS里其他的效果，就不一一测试了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;实验7 终极挑战&lt;/h2&gt;
&lt;p&gt;从电影里截取一张苍井老师的面部特写进行搜索。&lt;/p&gt;
&lt;p&gt;图片 《复仇者之死》截图&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;电影截图&lt;/p&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;截图结果&lt;/p&gt;
&lt;p&gt;这个结果毫不意外，就算是Google，现在也不可能强大到真的根据图片的“内容”去搜索。不过我觉得，这种情况恰恰是人们最需要的。比如你走在路上，发现一个不明物体，兴致勃勃的拍张照片想去Google一下，结果得到的只是形状或颜色相似的另一些不明物体，这个时候你一定会对所谓的按图搜索感到无比失望。不过这确实是目前技术所限，不能奢求太多。&lt;/p&gt;
&lt;p&gt;不过这里还是要说Google对轮廓的识别还是比较强大的，相似图片里虽然没有苍井老师，但也没有出现比较离谱的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;通过前面的实验，应该可以说明按图搜索到底是个什么东东了。其功能无外乎三点：相同图片的搜索、相似图片的搜索和图片内容的推测。而原理就是通过对图片的像素进行比较，根据匹配的比例判断两张图片是否相同。用这个方法在Google庞大的图片库里进行搜索，找出相关的图片，然后顺藤摸瓜，在找到相关的网页，如果运气好，就可以根据这些网页推测出图片的含义。如果找不到相同的结果，就根据图片的色彩和轮廓，找相似的结果。&lt;/p&gt;
&lt;p&gt;目前来看，相同图片的搜索已经做得很不错。相似图片搜索的结果虽然也不错，但其实并没有太大的实用价值。虽然距离理想的状态仍然很远，不过我们应该肯定它的贡献。从一个外行的角度来看，至少在三点上做得很不错：&lt;/p&gt;
&lt;p&gt;一是不同尺寸的图片之间的比较。虽然都是像素比较，但是两张尺寸完全相同的图片对比起来，肯定比经过缩放/裁剪之后再比较要容易很多。&lt;/p&gt;
&lt;p&gt;二是轮廓的识别和分类，这个前面已经说过了，确实比较强大。&lt;/p&gt;
&lt;p&gt;三是根据结果页面推断图片内容。这个我同样外行，估计是根据关键词来的。在所有这些结果页面重复出现的关键词，很可能就是这个图片的内容。当然，也有可能结合了词性（比如说只选择名词）以及图片的轮廓类型（就像前面的实验里，能识别出人形，就不会找一些猫猫狗狗来充数）。&lt;/p&gt;
&lt;p&gt;总而言之，图像搜索任重而道远，革命尚未成功，IT仍需努力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;番外&lt;/h2&gt;
&lt;p&gt;讲了Google，就不能不提百度。百度也已经推出了类似的功能“识图”，貌似还在不断的改进之中，前几天甚至连上传图片都还没有搞定。详细的实验不做了，大致试用了一下，截止到今天晚上，应该基本上实现了相同图片的搜索，效果跟Google已经比较接近了。但是另外两项功能就完全木有啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;阮一峰老师的博客上有两篇比较好的文章介绍相似图片搜索的原理： &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html"&gt;1&lt;/a&gt; ,  &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html"&gt;2&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="google"></category><category term="search"></category><category term="experiment"></category></entry></feed>