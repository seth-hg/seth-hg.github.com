<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Sucks</title><link href="/blog/" rel="alternate"></link><link href="/blog/feeds/misc.atom.xml" rel="self"></link><id>/blog/</id><updated>2014-09-26T00:00:00+08:00</updated><entry><title>是时候谈谈就业的问题了</title><link href="/blog/bat.html" rel="alternate"></link><updated>2014-09-26T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-09-26:bat.html</id><summary type="html">&lt;p&gt;首先高校、研究所就不考虑了，吃不了那碗饭，老老实实去互联网公司当民工，靠能耐吃饭。如今中国的互联网，百度、阿里、腾讯三足鼎立，俗称BAT。三家各占山头，在自家主营业务上优势比较明显，但同时又觊觎着别人盘子里的大餐。其中阿里和腾讯的市值都超过千亿美元，百度只是百亿级别。阿里巴巴上市之后，成为国内最值钱的互联网公司，其市值超过百度和腾讯之和。从 &lt;a class="reference external" href="http://www.cyzone.cn/a/20140903/262375.html"&gt;上个季度的财报&lt;/a&gt; 来看，腾讯的营收规模最大，阿里的利润最高（净利率接近80%，远高于其他两家），而百度则落后不少。&lt;/p&gt;
&lt;p&gt;百度的主要收入来自搜索广告。根据 &lt;a class="reference external" href="http://data.cnzz.com/"&gt;CNZZ的数据&lt;/a&gt; ，百度占据搜索市场50%以上的份额。但是由于业务太过单一，限制了赚钱的能力，所以无论收入还是利润，跟另外两家都有比较大的差距。&lt;/p&gt;
&lt;p&gt;百度主打工程师文化和技术创新牌，但是实际情况是，近几年来，一只眼盯着墙外的Google，亦步亦趋（翻译、图片/语音搜索，百度Eye，无人驾驶，百度大脑）；另一只眼盯着国内的互联网公司，做二次山寨（微博、百付宝、文库、BAE、网盘）。虽然说一直在尝试拓展业务，但是收效甚微。而在核心的搜索业务上，从个人使用感觉来看，搜索质量没有明显的提升。最近遭遇到360的挑战，希望百度能打起精神，护住自己的菊花。&lt;/p&gt;
&lt;p&gt;另一方面，百度虽然用户量大，但是很难绑住用户，比如我经常用百度搜索（在google和duckduckgo相继被墙的前提下），但是很少用百度帐号。网盘免费的离线下载是个好点子，但是国家一严打，李彦宏只能哭晕在厕所了。&lt;/p&gt;
&lt;p&gt;不过在移动互联网时代，百度也有新的机遇。根据今年 &lt;a class="reference external" href="http://www.iqiyi.com/w_19rso5qnn5.html?list=19rrmqsdfe#vfrm=8-8-0-1"&gt;百度世界大会&lt;/a&gt; 上透露的信息，移动搜索已经占到总流量的30%，而语音搜索也占到了10%。另外在搜索请求的类型上，搜索服务信息的请求越来越多，这是百度进军O2O业务的一个重要优势。百度世界大会上，李彦宏特别强调了传统行业的朋友，也是希望吸引更多线下商家来关注百度的广告推广。百度的另一个优势是地图，地理位置信息是移动互联网和O2O的重要资源，不过阿里在收购了高德之后，也会在这方面发力，挑战百度的地位。&lt;/p&gt;
&lt;p&gt;阿里是电商界的霸主，淘宝、天猫就是奶牛。阿里的主要收入来自交易佣金和在线营销，成交量越大，赚钱的能力也就越强，所以这几年双十一、双十二搞得不亦乐乎，在用户疯狂抢购的同时，自己也赚得盆满钵满。相比百度的分散投资，阿里近几年更多的专注于自己的电商业务，也推出了不少让用户拍手叫好的产品和服务，比如退运险、余额宝。从我使用淘宝的感受来讲，阿里确实做到了为用户的利益着想，很多改进虽然并不是很显眼，但是让人感觉非常贴心。&lt;/p&gt;
&lt;p&gt;阿里近几年的快速增长主要来自网购用户数量的增加。也有分析认为，电商市场不可能无限制的增长，一旦买家数量趋于饱和，就不可能继续增长了。目前国内网民使用网购的比例已经超过50%，再加上垂直电商的逐渐成熟，必定会限制阿里进一步增长的空间。不过目前的电商交易额只是整个零售业的冰山一角，在线下还有巨大的发展空间，这也是各家公司都特别注重移动业务和O2O的原因。在这一块儿，百度有移动搜索，占据了信息分发的重要渠道，还有地图的优势，阿里有支付宝钱包，而腾讯的微信也是一把利器。&lt;/p&gt;
&lt;p&gt;另外一个问题，电商行业可能面临 &lt;a class="reference external" href="http://research.pedaily.cn/201303/20130305344310.shtml"&gt;政策风险&lt;/a&gt; 。比如近两年一直在提的 &lt;a class="reference external" href="http://news.zol.com.cn/438/4388644.html"&gt;淘宝收税&lt;/a&gt; 的问题，一旦政策落实，必定对淘宝的业务产生一定影响。可以预见，政策的出台是必然的，不论扶持还是监管，都会对整个行业产生冲击。不过既然习总出访都带上马云了，估计也不会过度打压。马云长成那样，习总都能带出去，说明是真爱。&lt;/p&gt;
&lt;p&gt;腾讯在即时通信、社交网络和网游这三大块都占有绝对优势，但是收入70%以上来自网游。2014年第一季度，腾讯游戏的收入更是 &lt;a class="reference external" href="http://news.17173.com/content/2014-08-05/20140805114515392.shtml"&gt;冲上了世界第一&lt;/a&gt; 。近期有腾讯收购盛大的传闻，如果成真，盛大的文学和游戏将进一步强化腾讯娱乐业务的优势地位。以前挺看不起娱乐这块，但其实娱乐是人除了吃喝拉撒之外的另一个基本需求，物质生活越富足，对娱乐的需求也就越强烈，所以这块市场潜力巨大，特别实在广大人民群众生活水平提高的情况下。别的不说，就看电影市场，国产电影不管片子有多烂，只要有几个明星再好好宣传一下，票房也能上亿，就知道这个蛋糕有多大。连好莱坞都忍不住要往大片里面塞中国元素，讨好中国市场。对于这块肥肉，百度和阿里显然也不会无动于衷。百度投资爱奇异，想在视频这块分一杯羹。阿里今年也推出了手游平台，想在游戏市场抢腾讯的饭碗。&lt;/p&gt;
&lt;p&gt;说到这里顺便跑个题，前不久听了爱奇异的宣讲会，感觉现在做的真心不错。别的不说，只要把广告精准定位做好，绝对可以击败优酷。在广告这个问题上优酷简直就是战五渣。互联网公司靠广告挣钱很正常，但你这完全是漫无目的的轰炸式广告，跟传统媒体没有任何区别，哪里突出互联网的优势了？你说我一光棍，一天给我放十几二十遍杜蕾丝广告，还想留住用户？长此以往，用户反感，广告效果也不好，哪个商家还会到你这SB网站上投广告？优酷之所以看起来成功，纯粹是因为起步早，钻政策的空子，靠大量没有授权的盗版资源抢到了用户。其实那系统就是垃圾，既没有个性推荐，又没有广告定位，水平还停留在互联网石器时代，早晚有天要滚蛋。&lt;/p&gt;
&lt;p&gt;腾讯业务的优势在于业务比较综合，并且像手Q、微信这些已经成为很多人离不开的通信工具了，连电信运营商都眼红。另一方面，腾讯用户基数巨大。根据 &lt;a class="reference external" href="http://wearesocial.net/blog/2014/08/socials-monday-mashup-224/"&gt;今年8月份的一个报告&lt;/a&gt; ，QQ和QQ空间的月活跃用户数仅次于非死不可，位居全球二、三位，而微信和腾讯微博分别排在第5和第10。新浪微博则没进前十。不过这个数据可能有争议。在去年12月 &lt;a class="reference external" href="http://www.businessinsider.com/the-worlds-largest-social-networks-2013-12"&gt;Bussiness Insider发布的报告&lt;/a&gt; 里，第二位是YouTube，QQ空间排在第三，新浪微博第四，微信第10。不管怎么说，腾讯拥有庞大的用户群，这一点是毋庸置疑了。而且这些用户是通过关系网紧密的连接在一起的，并不是孤立的个体，所以不太容易出现大规模的用户叛逃。这些年来尝试过做IM的不在少数，新浪有UC，阿里有旺旺，还有舶来品MSN，没一个能撬动QQ的墙脚。有了这个用户群体，才有腾讯在营收规模上的优势。但是腾讯这些年也出过不少昏招，很多盈利能力比较差的业务拖了后腿，这可能是利润率比较低的主要原因。腾讯先后把自己的搜索和电商业务转让，就是为了剥离了不良资产，同时拉拢合作伙伴。&lt;/p&gt;
&lt;p&gt;在移动业务方面，微信算是歪打正着了，虽然功能上跟手机QQ有很大的冲突，顶着内斗的压力做出来，但是做得很用心，也得到了用户的认可。根据我了解的一些情况，有些上了年纪的人不会用QQ，但是很乐意用微信。对于腾讯来说，创造微信这个新的品牌，一改QQ给人留下的小孩儿玩具的印象，其实也是很有意义的。在增加了支付功能之后，微信也成为腾讯在移动电商领域的法宝。微信部门上升为一个独立的BG，也看得出来其受重视的程度。&lt;/p&gt;
&lt;p&gt;分析到此为止，最后提一个终极问题供大家思考：如果遭遇严重的经济危机，在大环境不景气的情况下，BAT三家谁的业务更坚挺？虽然说苦逼码农赚的只是白菜钱，但是也不妨碍我们体验一下卖白粉的感觉，意淫可比手淫过瘾多了。&lt;/p&gt;
&lt;p&gt;补充一个关于几大互联网公司员工跳槽的资料：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tech.hexun.com/2013-02-25/151443400.html"&gt;知名互联网企业员工跳槽原因揭秘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及离职创业的情况：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tech.ifeng.com/bat3m/detail_2014_08/07/37906786_0.shtml?3Sd--www.cangboyule88.com--haoern.html"&gt;创业者11派系圈大盘点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://itjuzi.com/person"&gt;IT桔子——人物列表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.36kr.com/p/215682?ref=index_feature_topics"&gt;腾讯系创业者报告&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>闪存的工作原理</title><link href="/blog/flash-memory.html" rel="alternate"></link><updated>2014-08-24T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-08-24:flash-memory.html</id><summary type="html">&lt;p&gt;闪存时当下非常热门的存储介质之一，不论是在工业界还是学术界，都&lt;/p&gt;
&lt;p&gt;闪存是用半导体集成电路实现非非易失性数据存储的设备，其基本单元是浮栅晶体管。&lt;/p&gt;
&lt;p&gt;浮栅晶体管是一种特殊结构的MOSFET。普通的MOSFET（图1）有源极、漏极和栅极三个端口，嵌在半导体硅基质里，互不联通，因此在通常情况下，MOSFET是不导电的。如果在栅极和源极之间加上一个电压Vgs，硅基质受到电场的感应就会产生自由电子，当Vgs高于某个值的时候，MOSFET变成导体，电流可以通过沟道在源极和漏极之间流通。这个电压值就是MOSFET的开启电压，也叫阈值电压，用符号VT表示。浮栅晶体管（图2）的结构跟普通MOSFET类似，不同的是它有两个栅极，上面是控制栅，下面是浮动栅。这个结构的特点是它的阈值电压VT是可变的，可以通过在浮栅中存储一定量的电子来改变阈值电压。浮栅的周围包裹这一层二氧化硅绝缘层，&lt;/p&gt;
&lt;p&gt;初始情况下，浮栅中没有电子，VT较低。&lt;/p&gt;
&lt;p&gt;如果在漏极和栅极加上高电压，使沟道是打开的，电子从源极流向漏极。由于热电子注入效应，部分高能电子会穿过硅基质和二氧化硅绝缘层之间的势垒，进入浮栅。当栅极高电压撤去之后，这些电子就被困在浮栅里，达到存储数据的目的。&lt;/p&gt;
&lt;p&gt;当浮栅中有电子时，&lt;/p&gt;
&lt;p&gt;阈值电压就会升高。浮栅其中电子的多少，决定了晶体管的阈值电压Vth的高低，闪存就是通过这种方式来存储数据的。浮栅周围包裹着一层二氧化硅绝缘层，进入其中的电子会被困住，因此可以实现非易失性存储。&lt;/p&gt;
&lt;p&gt;SLC闪存和MLC闪存在物理结构上是一样的，区别是&lt;/p&gt;
&lt;p&gt;Page 3
编程操作：在&lt;/p&gt;
&lt;p&gt;对于MLC闪存，如果要存储n个bit的信息，Vth就要有至少2^n种不同的取值。MLC闪存在进行编程的时候，采用递增的方式，逐步提高Vth到需要的值。每次的增量是∆VP，因此MLC闪存的写速度要比SLC闪存慢得多，而且写操作的时间跟∆VP成正比。&lt;/p&gt;
&lt;p&gt;擦除操作：在源极和栅极之间加上反向高电压，利用量子隧道效应将浮栅中的电子吸引到源极，Vth回复到初始状态。&lt;/p&gt;
&lt;p&gt;编程完成之后，浮栅晶体管并不能永久的保持这个状态，经过足够长的时间，FG中的电子会逐渐逸出，Vth会逐渐降低。而且擦写的过程会对器件造成破坏性的影响（热电子退化），擦写次数越多，Vth能够维持的时间也就越短。这也是闪存寿命有限的物理根源。&lt;/p&gt;
&lt;p&gt;Page 4/5
闪存中保存数据有一定的出错率，这个概率称作原始位错误率（RBER）。&lt;/p&gt;
&lt;p&gt;所谓写穿状态，是指在一定的时间范围内，发生不可纠正错误的概率高于某个阈值。&lt;/p&gt;
&lt;p&gt;近年来对闪存的研究不断升温&lt;/p&gt;
&lt;p&gt;台湾xxx使用二氧化硫做绝缘层，结合热辅助技术，实现了闪存的自我修复，将最大擦写次数提升至1亿次以上，大大延长了闪存的寿命。&lt;/p&gt;
</summary></entry><entry><title>《大数据时代》读书笔记</title><link href="/blog/big-data-revolution.html" rel="alternate"></link><updated>2014-05-11T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-05-11:big-data-revolution.html</id><summary type="html">&lt;p&gt;Updated：2014-08-31&lt;/p&gt;
&lt;p&gt;刚刚读完《大数据时代》，结合最近读的一些其他有关大数据方面的书，总结一下。本书共3大部分8个章节，讨论了大数据对人们思维模式、商业模式等所造成的影响，未来的发展趋势和挑战。书中的分析深入透彻，并且包括了大量的真实案例，值得一读。另外还有一本比较出名的《大数据云图》，主要描述了大数据在各个领域的应用前景，但是深度远不及本书，更多的只是堆砌事实，略读即可。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;一、样本=总体&lt;/h2&gt;
&lt;p&gt;统计学中的采样是个比较有争议的问题，采样方法不当可能产生具有偏见甚至完全错误的结论。但是随着数据采集、存储和处理能力的增强，采样已经不再是必须的了，可以直接把所有数据当作样本。量变产生质变，从全体数据中能够发现样本中所不能体现的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;二、混乱&lt;/h2&gt;
&lt;p&gt;大数据时代，数据的总量将成为决定性因素。为了追求数据总量，往往需要牺牲精确性。尽管如此，大数据量带来的优势将压倒不精确造成的问题。这其实是个概率问题，除非错误数据所占的比例很高，否则这些错误对整体结果的影响不会太大。比如对10000个数据点进行回归分析，其中有几十错误完全数据完全是可以忽略的。&lt;/p&gt;
&lt;p&gt;放弃对精确性可以带来两个好处：1) 大大增加了可用数据量，扩展了时间和空间尺度上的观测范围，有利于发现细微的趋势；2) 数据的实时性更好，能够及时发现变化趋势。放弃精确性转而追求数据总量的另一个理由是：简单算法用在大量数据上要比复杂算法应用在少量数据上更有效。书中举了Google翻译作为例子。Google并没有针对语言特点设计复杂的算法，而是直接利用互联网上大量不精确的网页信息作为语料，达到了更好的效果。&lt;/p&gt;
&lt;p&gt;为了增加数据总量可能遇到的另外一个问题是数据格式和结构的混乱。NoSQL数据库的兴起正是为了满足对大量非结构化数据存取的需求。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vs"&gt;
&lt;h2&gt;三、相关关系 vs 因果关系&lt;/h2&gt;
&lt;p&gt;通过数据挖掘，可以发现不同事物之间相关关系，进而利用这种关系。典型的应用就是推荐系统，如果购物网站发现用户购买商品A和购买商品B之间存在很强的相关性，就可以向购买了商品A的用户推荐商品B以增加销量。但是，我们仍然不知道也不需要知道为什么用户会同时购买A和B。&lt;/p&gt;
&lt;p&gt;相关关系并不等于因果关系，而是因果关系的一个超集。如果两个事件之间存在必然的因果关系，则在数据上一定会表现出相关性，反之则未必。由于数据的局限性，两个事件之间的相关性可能只是偶然的。《信号与噪声》里举了一个很好的例子：在1967年到1997年的31年中，股市的涨跌跟超级杯夺冠的球队具有很强的相关性，但是之后几年却出现了完全不同的结果。&lt;/p&gt;
&lt;p&gt;用相关关系代替因果关系的好处是：1）挖掘相关关系的成本更低、速度更快。要严格的证明因果关系可能需要进行复杂和昂贵的实验，甚至还会违背伦理道德，而发现相关关系只需要相对廉价的计算。而且随着技术的进步，计算的成本会越来越低，速度也越来越快。2）基于数据而得出的相关关系，可以有效的避免人类的偏见。书中认为：基于相关关系进行的预测才是大数据的核心。&lt;/p&gt;
&lt;p&gt;使用相关关系是概率思维的一种表现。两个相关的事物之间不一定有因果关系，但是这种可能性很大，特别是使用的数据量足够大的时候。因此相关关系可以成为因果关系的替代品，这跟第二章中使用不精确性数据的原因是类似的。在《信号与噪声》里，作者也提到了在进行预测的时候，需要放弃确定性思维，而改用概率的方式进行思考：预测结果不是一个孤立的点，而是在某个范围内的概率分布。所以现代版的福尔摩斯遇到华生的时候，绝对不会断言后者去过阿富汗，而是会说“你去过阿富汗的概率是99%”之类的话。就像《V字仇杀队》里说的：“There is no certainty, only opportunity”。&lt;/p&gt;
&lt;p&gt;个人认为，相关性只是暂时的解决方案，事物之间隐藏的因果关系才是终极答案。相关关系有助于帮助我们简化对世界的认识。现实世界是非常复杂的，很多潜在的因果关系由于人类认识的局限性不能够被发现，而相关关系正好解决了这个问题。随着研究的深入，越来越多的相关关系将得到合理的逻辑解释，从而转变成因果关系。从这个角度来讲，大数据完全可以作为发现新知识的一种手段。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;四、数据化&lt;/h2&gt;
&lt;p&gt;数据化是应用大数据技术的前提。数据化不等于数字化，数字化仅仅将现实世界中的信息转化成0和1表示的二进制序列。而数据化则是对信息进行量化，以便于计算机的处理。数据化从原始社会就已经开始，并且一直在不断发展，只是在计算机技术出现之后才产生了飞跃。书中举了很多不同领域的例子，比如文字、地理位置、社交关系等，来说明信息量化的重要意义。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;五、发掘数据的潜在价值&lt;/h2&gt;
&lt;p&gt;收集数据通常是为了特定的目的，达到这个目的仅仅是利用了数据的基本价值，还有更多的潜在价值有待发觉。并且数据不同于物质，可以反复使用，其价值并不会减少。相反，当越来越多新用途出现，数据的价值将会不断增加。书中列举了6中从数据中发掘潜在价值的模式：&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;二次利用，即发掘数据的新用途。&lt;/li&gt;
&lt;li&gt;数据重组，结合多个不同的数据集，产生1+1&amp;gt;2的效果。&lt;/li&gt;
&lt;li&gt;可扩展数据，收集数据的同时，把一些看似不相关的数据也一并收集。这样做所需的额外成本很低，但是却可能带来意想不到的收益。&lt;/li&gt;
&lt;li&gt;数据折旧，过时数据有时会破坏新数据的价值，在处理的过程中需要进行折旧处理。&lt;/li&gt;
&lt;li&gt;数据废气，一些通常被认为是无用的和有缺陷的数据也能够产生价值。&lt;/li&gt;
&lt;li&gt;开放数据，政府开放数据，能够催生更多的创新性应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于其巨大价值，数据将会和其他有形资产一样计入公司的总资产。比如Facebook，上市时的估价就远远高于其有形资产的价值。因为潜在价值的存在，对数据进行估值会变得更加困难。解决的办法是从使用者创造的价值中提取一定比例作为使用数据的报酬。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;六、角色&lt;/h2&gt;
&lt;p&gt;大数据价值链主要由3种角色构成：数据拥有者、技术拥有者和想法拥有者。这里跟原书里的表述有所不同，但含义是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据拥有者&lt;/strong&gt; 更多的是传统企业，包括线上的和线下的。它们在过往的运营中出于各种目的积累了大量数据，但是并不一定会使用这些数据，或者仅仅利用了数据的基本价值。它们可以出售这些数据给其它用户而获得而外的收益。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术拥有者&lt;/strong&gt; 类似MapR这样专注于改进大数据平台和解决方案的公司。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想法拥有者&lt;/strong&gt; 能够创造性的使用数据，挖掘潜在价值，典型的代表就是各种创业公司。&lt;/p&gt;
&lt;p&gt;在初期阶段，改进技术的需求会比较强烈。但是技术会越来越普及、越来越廉价，单纯的技术拥有者可能很快会淡出中心舞台。大数据的价值将逐渐向这条链的两端转移，因此掌握数据和数据的使用方法才是关键。&lt;/p&gt;
&lt;p&gt;除了这三种主要角色，还会有一些其他新角色产生：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据中间商&lt;/strong&gt; 也就是经销商，他们从数据拥有者手里收购数据，转售给数据使用者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据科学家&lt;/strong&gt; 行业专家的主导地位将被数据科学家取代。作者举了很多例子来证明，只要掌握了数据技术，即使对某个领域并不了解，也能够做出显著的贡献。类似于计算机科学，虽然在产生之初只是多个学科的交叉，但是巨大的应用前景将促使数据科学发展成一个全新的学科。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;七、风险&lt;/h2&gt;
&lt;p&gt;大数据可能带来的三种风险：&lt;/p&gt;
&lt;p&gt;第一个是隐私问题。最近几年隐私问题已经引起了足够多的关注，不需要再多说了。要解决隐私问题，仅仅使用技术手段是不行的。这里有一个很有意思的例子：利用雅虎公布的匿名搜索记录鉴定出某个用户的真实身份。这说明只要拥有足够的数据，即使经过匿名化处理，也不能保证个人的隐私。所以那些在匿名社交网络上吐槽的，呵呵，不要以为不留名就没有人知道你是谁。&lt;/p&gt;
&lt;p&gt;另一个问题是用数据来判断和惩罚人类的潜在行为。大数据已经开始用于预防犯罪，如果再进一步用来惩罚潜在的犯罪行为，就会成为巨大的隐患。参见《少数派报告》。&lt;/p&gt;
&lt;p&gt;第三种可能的风险是数据独裁，也就是对数据的过度依赖。俗话说“尽信书不如无书”，对数据也一样。过度依赖数据也会适得其反。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;八、管理&lt;/h2&gt;
&lt;p&gt;正如印刷机的出现带来了相应的出版、审查、版权等制度一样，大数据时代也需要全新的管理规范。&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;隐私保护：对应上一章中第一种风险。解决这个问题需要让数据的使用者为其行为承担责任，促进使用者建立制度来评估自身的行为，从而规避或减轻伤害。隐私问题由来已久，现代社会人的各种言行都会留下不同形式的记录，这些记录一旦落到别有用心的人手里就可能对个人造成伤害。典型的案例就是最近Brandan Eich被迫辞去Mozilla CEO职务，就因为N年前捐款支持了某反同性恋的政客，被一帮跳梁小丑逼宫。在大数据时代，对数据的收集和挖掘都将达到空前的高度，隐私风险也会更加突出。&lt;/li&gt;
&lt;li&gt;保证个人动因：个人应该会其行为负责，而不是倾向。对应上一章中第二种风险。&lt;/li&gt;
&lt;li&gt;数据程序猿：不是传统意义上的程序员，而是计算机、数学家和统计学专家，职能类似于审计人员，可以对大数据系统的方方面面进行评估，以确保数据的正确使用。&lt;/li&gt;
&lt;li&gt;反垄断：防止少数组织垄断数据，保证市场活力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;思考&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;大数据的兴起是否会左右文化的发展？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先大数据会影响文化传播。信息技术发展到今天，信息的传播已经不成问题。一条爆炸性的新闻可能瞬间就传遍大半个地球。但是大数据技术的应用，会改变信息的传播方式。现在，信息更多的依赖搜索引擎、推荐引擎而传播，这会使部分热门信息更容易得到广泛的传播，也会让某些小众信息被淹没在数据洪流中。这种传播方式的改变，很可能会对文化的发展产生重大影响。&lt;/p&gt;
&lt;p&gt;大数据对文化产品也会产生影响。数据技术已经在影视作品的制作过程中发挥了的作用，比如 &lt;a class="reference external" href="http://www.nytimes.com/2013/02/25/business/media/for-house-of-cards-using-big-data-to-guarantee-its-popularity.html?pagewanted=all&amp;amp;_r=0"&gt;热播美剧《纸牌屋》&lt;/a&gt; 就是Netflix根据自己的用户统计数据投资拍摄的。而 &lt;a class="reference external" href="http://news.sina.com.cn/m/2014-02-20/095729516998.shtml"&gt;国产网络剧《爱情公寓4》&lt;/a&gt; 也使用了类似的方法。同样，数据技术也被用于电影票房的预测，以帮助制片方进行风险控制。比如 &lt;a class="reference external" href="http://www.epagogix.com/"&gt;Epagogix公司&lt;/a&gt; 就提供根据剧本预测票房的服务。《大数据云图》中也提到大数据在设计、建筑等领域的应用。不难想象，大数据技术未来也会应用到更多文化相关的领域。也许很快就会有以大数据为基础的书籍、唱片、甚至是艺术作品。这必定会对社会文化的发展产生重要的影响。说到艺术作品，我就想起了达芬奇的《维特鲁威人》，可以把它看做艺术作品，但是其中使用了相当精确的数据来展现完美的人体比例，不知道这能不能算是数据技术在艺术领域的应用案例。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;国内动态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在中国方面，近期最有影响力的事件大概要算百度大数据引擎的推出。百度已经索引了大量的中文网页，掌握了大量的用户查询信息，并且也在 &lt;a class="reference external" href="http://idl.baidu.com/"&gt;大力发展深度学习等相关技术&lt;/a&gt; 。最近还 &lt;a class="reference external" href="http://cn.wsj.com/gb/20140517/tec090509.asp"&gt;挖来了机器学习领域的大牛Andrew Ng&lt;/a&gt; ，要在硅谷建立研发中心。另一方面，百度陆续推出了一系列基于其云平台的 &lt;a class="reference external" href="http://baidu.tmall.com/"&gt;硬件产品&lt;/a&gt; 。硬件的微薄利润，百度的用意显然不在于此，而是在于这些终端设备所能够收集到的数据。相比前几年各大互联网公司一窝蜂的推自己的手机抢占移动终端，百度这一步走得很聪明。&lt;/p&gt;
&lt;p&gt;另外一个细节是，如果你注意过就会发现，以前的百度搜索结果，链接是直接指向原始网页的，但是现在已经变成了一个指向百度的链接，再通过跳转到达原始网页。Google很早就采用了这种做法，目的也是为了收集用户的点击数据。百度的这个改变表明它对用户产生的数据越来越重视了。在云计算这一次浪潮中，百度绝对是失败的，不但出手晚，方向也选错了，所以对大数据这个机遇是相当重视的。&lt;/p&gt;
&lt;p&gt;至于阿里巴巴，大数据在电子商务和商业智能中的应用已经无需多说。阿里巴巴掌握了大量的电商数据，现在已经乐得合不拢嘴。阿里上市，马云成为中国首富，充分说明了投资者的认可。&lt;/p&gt;
&lt;p&gt;大数据的另一片沃土是社交网络。不过相比电商和搜索，社交网络数据的价值密度更低。而且中国有自己的国情，很多人不喜欢公开谈论自己，微博上满世界飞的都是心灵鸡汤和小贴士，造成了虚假繁荣的假象。除此之外，社交网络还要面临政府审查的巨大压力。所以企鹅同学感觉有点儿悬，好在用户基数够大，靠着QQ和微信占领了PC和手机两大平台，发展的空间还是不小的。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="big data"></category><category term="reading"></category></entry><entry><title>喵星人偷拍DIY</title><link href="/blog/cat-watcher.html" rel="alternate"></link><updated>2014-05-02T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-05-02:cat-watcher.html</id><summary type="html">&lt;p&gt;去年有只流浪猫在隔壁院生了一窝小猫，我花了几个月成功的把它们勾搭了过来。勾了不能白勾，我决定整一个监控装置观察喵行人的活动。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;Arduino控制摄像头拍照，并通过串口把照片传输给树莓派。为了避免无意义的拍照，用红外传感器对周围进行检测，只有发现有动物活动时才开始拍照。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;准备材料&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;硬件&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Arduino：Uno、Leonardo、Mega都可以，我用的还是11年买的Duemilanove。&lt;/li&gt;
&lt;li&gt;DFRobot传感器扩展板：推荐用这个，接传感器和摄像头都比较方便。&lt;/li&gt;
&lt;li&gt;LinkSprite Y201串口摄像头：VC0706芯片，清晰度尚可，优点是自带红外补光灯，夜视效果不错；缺点是焦距短、视野小，而且价格偏高，普通USB摄像头几十块就可以搞定。&lt;/li&gt;
&lt;li&gt;数字红外传感器&lt;/li&gt;
&lt;li&gt;树莓派：换成其它单板机、Mini PC、机顶盒、路由器基本都可以，只要能运行Linux和下面的软件。&lt;/li&gt;
&lt;li&gt;USB电源：Arduino和摄像头的功耗都不算大，加上树莓派的750mA，1A电源基本够用，如果有2A的更好。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;软件&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Arduino IDE&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/adafruit/Adafruit-VC0706-Serial-Camera-Library"&gt;Adafruit VC0706 Library&lt;/a&gt; ：来自ladyada摄像头驱动。&lt;/li&gt;
&lt;li&gt;Python 2.7: Raspbian系统自带，其它可能需要自行安装。&lt;/li&gt;
&lt;li&gt;pyserial：Python串口通信。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.phash.org"&gt;phash&lt;/a&gt; + &lt;a class="reference external" href="https://github.com/acdha/python-phash"&gt;python-phash&lt;/a&gt; ：检测相似图片。&lt;/li&gt;
&lt;li&gt;Flask + jinja2 + &lt;a class="reference external" href="http://www.doknowevil.net/litebox/"&gt;Litebox&lt;/a&gt; ：实现一个简单的Web相册。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;硬件连接&lt;/h2&gt;
&lt;img alt="cat watcher camera" src="http://seth-images.qiniudn.com/cat-watcher-camera.jpg" /&gt;
&lt;p&gt;Y201有4根线，上图所示从右下到左上分别是：电源线（VCC），地线（GND），Tx和Rx，接法如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;VCC接扩展板上的5V电源，必须是5V，接3.3V补光灯不能正常工作。&lt;/li&gt;
&lt;li&gt;GND接扩展板上任意地线。&lt;/li&gt;
&lt;li&gt;Tx, Rx分别接在Arduino两个数字I/O端口上，分别记做PIN_SS_Rx和PIN_SS_Tx。由于Arduino只有一个硬件串口，用来和树莓派通信了，因此和Y201的通信只能用软串口。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;红外传感器有3根线：电源线、地线和一个数字输出口，当探测范围内有人或动物出现时，数字输出口为高电平，否则为低电平。可以直接插在传感器扩展版上的任意空闲数字端口，记做PIN_IR_SENSOR。&lt;/p&gt;
&lt;p&gt;接好线后效果如下图所示：&lt;/p&gt;
&lt;img alt="cat watcher arduino" src="http://seth-images.qiniudn.com/cat-watcher-arduino.jpg" /&gt;
&lt;p&gt;Arduino直接用数据线连接树莓派的USB接口，通信和供电一并解决。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;软件源码&lt;/h2&gt;
&lt;div class="section" id="arduino"&gt;
&lt;h3&gt;Arduino&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;Adafruit_VC0706.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PIN_IR_SENSOR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;SoftwareSerial&lt;/span&gt; &lt;span class="n"&gt;cameraconn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SoftwareSerial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PIN_SS_Rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIN_SS_Tx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Rx, Tx&lt;/span&gt;
&lt;span class="n"&gt;Adafruit_VC0706&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_VC0706&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cameraconn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;38400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// setup the camera&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;ir_detected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_sensor_pin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ir_detected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//Serial.println(&amp;quot;detected&amp;quot;);&lt;/span&gt;
                &lt;span class="c1"&gt;// take a photo&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;takePicture&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed taking picture&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// get image file size&lt;/span&gt;
                &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frameLength&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readPicture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;bytesToRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// reset the camera&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用软串口跟相机通信速度很慢，40KB+的一张照片居然要十多秒才能读完。修改SoftwareSerial库的头文件SoftwareSerial.h，加大缓冲区（_SS_MAX_RX_BUFF），可以稍微加快一点儿。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;树莓派&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;serial&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;

&lt;span class="n"&gt;default_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/dev/ttyUSB0&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;default_baud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;38400&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Taking snapshots with arduino camera.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;baud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Serial baudrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Output directory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Serial port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_port&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_baud&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baud&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;setting up camera...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;waiting...&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed to take picture&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;detected, receiving data...&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.jpg&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;-%H-%M-%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;framelen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;framelen&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;framelen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bytes saved to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;

    &lt;span class="c"&gt;# reset camera&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reseting camera...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;一个简单的相册&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;

&lt;span class="n"&gt;photos_per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;photo_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static/photos&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;per_page&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total_count&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;per_page&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_prev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_edge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;right_current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_edge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;left_edge&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left_current&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
                &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right_current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
               &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;right_edge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
                &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;lt;int:page&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photo_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;photos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;
    &lt;span class="n"&gt;pagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Photos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;photos_per_page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_for_other_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view_args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url_for_other_page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_for_other_page&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;改进方案&lt;/h2&gt;
&lt;p&gt;尽管加了红外传感器，在实际使用中还是会拍下很多没有意义的照片，原因有三：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;红外传感器检测范围比较大，而摄像头视野比较窄，经常拍不到；&lt;/li&gt;
&lt;li&gt;光线暗的时候摄像头会自动打开红外补光灯，可能会干扰红外传感器；&lt;/li&gt;
&lt;li&gt;喵星人长时间呆着不动的时候，连续拍照也没有意义。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个问题只有在树莓派上解决了，好在BCM2835还有一定的计算能力。接收到Arduino传过来的照片之后，比较新照片跟前一张照片，如果二者相似，就可以丢弃当前照片。这个可以用pHash来实现。pHash是一个用来检测媒体文件相似度的算法。普通的hash算法为了增加破解的难度需要“雪崩效应”，也就是输入数据发生一点微小的变化，输出指纹也会变得面目全非。pHash则正好相反，相似的输入会产生相似的输出，因此只要比较前后两张照片的指纹，就可以判断是否相似。&lt;/p&gt;
&lt;p&gt;下面代码实现一个异步的图片去重类。由于背景是固定的，任意两张照片之间的相似度都很高，所以这里的过滤相似图片的默认阈值也设得比较高。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;phash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cross_correlation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_digest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="n"&gt;tmpfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/run/shm/ooxxoo.jpg&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.995&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmpfile&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setDaemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thresh&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c"&gt;# process all submitted jobs&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filedata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tmpfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
                        &lt;span class="n"&gt;cross_correlation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thresh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filedata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;完成！&lt;/h2&gt;
&lt;p&gt;成品效果如下图，用一个纸盒子做成Arduino外壳和摄像头支架，丑了点儿，将就能用。摄像头部分放在外面窗台上，窗口留个缝让USB数据线穿过来连到屋里的树莓派。&lt;/p&gt;
&lt;img alt="cat watcher final" src="http://seth-images.qiniudn.com/cat-watcher-final.jpg" /&gt;
&lt;p&gt;这两天刚刚装上，马上就拍到两只喵星人在搞基，( ⊙ o ⊙ )。。。&lt;/p&gt;
&lt;img alt="cat watcher ooxx" src="http://seth-images.qiniudn.com/cat-watcher-ooxx.jpg" /&gt;
&lt;/div&gt;
</summary><category term="cats"></category><category term="python"></category><category term="arduino"></category></entry><entry><title>整数分解算法</title><link href="/blog/factorization-algorithm.html" rel="alternate"></link><updated>2014-04-01T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-04-01:factorization-algorithm.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Integer_factorization"&gt;整数分解&lt;/a&gt; 就是质因数分解，把一个合数分解成几个质数乘积的形式。整数分解是计算机领域的一个重要算法，在计算复杂性理论、密码学等领域有重要的应用。&lt;/p&gt;
&lt;p&gt;要分解整数N，可以用递归的方法，先找到N的一个质因数a，然后再递归的对N/a进行分解，直到剩下的数为质数不能继续分解为止。这样问题就转化为寻找N的一个质因数。一个最简单的思路是逐个测试区间(1, sqrt(N)]内的每个质数，看能否被N整除。如果N是合数，则一定能找到一个质数a使得N整除a。这种方法叫作 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Trial_division"&gt;试除法&lt;/a&gt; ，用的是穷举的思想，容易理解但是效率很低。当N比较大的时候，这个方法就会比较慢。&lt;/p&gt;
&lt;p&gt;这里介绍另外一种算法—— &lt;a class="reference external" href="http://www.csh.rit.edu/~pat/math/quickies/rho/"&gt;Pollard's Rho算法&lt;/a&gt; 。本质其实是类似的，也是对一个集合中的数字逐个进行测试，直到找到需要的质因数为止，但是测试数列产生的方法和测试的方法都不同。Pollard Rho算法并不是简单的用所有可能的质数去试，而是采用了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Monte_Carlo_method"&gt;蒙特卡洛方法&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;测试数列S用递推的方式产生：定义一个多项式函数f(x)，通常采用f(x) = k * x&lt;sup&gt;2&lt;/sup&gt; + c的形式，令x&lt;sub&gt;1&lt;/sub&gt; 为最小的质数2，并且x&lt;sub&gt;n+1&lt;/sub&gt; = f(x&lt;sub&gt;n&lt;/sub&gt;)。&lt;/p&gt;
&lt;p&gt;数学常识告诉我们，函数f(x)是发散的。如果一直递推下去，S中的数无穷无尽。这里就要用到模运算，也就是取余数。在模运算里，说a = b是指a和b除以同一个数n得到的余数相同，记作：&lt;/p&gt;
&lt;blockquote&gt;
a = b (modulo n)&lt;/blockquote&gt;
&lt;p&gt;模运算具有可传递性，而且这种传递性对于加减乘除和乘方运算都成立，也就是说，对于下面等式：&lt;/p&gt;
&lt;blockquote&gt;
a + b = c (modulo n)&lt;/blockquote&gt;
&lt;p&gt;对于任意a' = a (modulo n)，把上式中的a换成a'，等式仍然成立。&lt;/p&gt;
&lt;p&gt;利用模运算对对f(x)做一下修改：&lt;/p&gt;
&lt;blockquote&gt;
f(x) = k * x&lt;sup&gt;2&lt;/sup&gt; + c (modulo N)&lt;/blockquote&gt;
&lt;p&gt;这样S就成了一个有限的数列，因为最多之可能有N-1个数。可以知道，数列中一定会出现某一项x&lt;sub&gt;j&lt;/sub&gt; = x&lt;sub&gt;i&lt;/sub&gt; ，并且i &amp;lt; j，根据模运算的传递性，则有f(x&lt;sub&gt;j&lt;/sub&gt;) = f(x&lt;sub&gt;i&lt;/sub&gt;)，数列进入一个循环。当然这个循环很可能不是从数列的第一项就开始的，而是从中间的某一项，这样就带了一个小“尾巴”，就像希腊字母ρ，这也是该算法被命名为rho的原因（Pollard是发明者的名字）。&lt;/p&gt;
&lt;p&gt;寻找质因数的测试过程如下：对S中的每一个x&lt;sub&gt;k&lt;/sub&gt; （k为奇数），算出(x&lt;sub&gt;k&lt;/sub&gt; - x&lt;sub&gt;k/2&lt;/sub&gt;)和N的最大公约数（Greatest Common Divisor）g，如果g不为1，则g是N的一个质因数。用这种方法一定可以找到N的一个质因数。该算法的Python实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pollardRho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c"&gt;#uso come funzione (x^2 + c)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;factorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16843009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pollardRho&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用Pollard's Rho算法寻找质因数的过程具有一定的随机性，也跟函数f(x)的选择是否恰当有关，对它的时间复杂度分析比较困难。一个并不严谨的结论是：对于任意n，该算法最多有1/2的概率能在O(n&lt;sup&gt;1/4&lt;/sup&gt;)步之内找到一个质因数。&lt;/p&gt;
&lt;p&gt;整数分解算法还有很多，Pollard's Rho算法只是比较有代表性的一种，有很多方法都是以它为基础进行改进的，其它方法可以参考Wikipedia。&lt;/p&gt;
</summary><category term="algorithm"></category><category term="programming"></category><category term="python"></category></entry><entry><title>带通配符的数字</title><link href="/blog/number-with-wildcards.html" rel="alternate"></link><updated>2014-03-18T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2014-03-18:number-with-wildcards.html</id><summary type="html">&lt;p&gt;偶尔看到CSDN英雄会上的一道 &lt;a class="reference external" href="http://hero.csdn.net/OnlineCompiler/Index?ID=351&amp;amp;ExamID=346"&gt;编程题目&lt;/a&gt; ，觉得挺有意思就试着做了一下。&lt;/p&gt;
&lt;p&gt;题目是这样的：给出一个带有通配符'?'的数字W和另一个数字X，要算出W有多少中组合大于X。其中'?'可以表示0到9的任意数字，且W和X的长度相同，在1到10之间。&lt;/p&gt;
&lt;p&gt;一个简单的思路是用递归算法，当W中包含n个'?'（n &amp;gt; 0）时，一定可以把它写成wa+?+wb这种形式，其中wa是纯数字，不含通配符，而wb包含n-1个通配符。按照同样的方式可以把X也写成类似的形式：xa+xp+xb，其中xp是W中'?'对应的位，xa、xb和wa、wb分别等长。于是有下面的递推：&lt;/p&gt;
&lt;ol class="upperalpha simple"&gt;
&lt;li&gt;如果wa &amp;lt; xa，则W一定小于X，此时结果为0&lt;/li&gt;
&lt;li&gt;如果wa &amp;gt; xa，则不论'?'取何值，W一定大于X，此时结果为10^n&lt;/li&gt;
&lt;li&gt;如果wa = xa，则考虑'?'的取值，有三种情况&lt;ol class="loweralpha"&gt;
&lt;li&gt;当'?'大于xp时，W一定大于X，这种情况下可能的组合一共有 (9-xp)*10^(n-1)。&lt;/li&gt;
&lt;li&gt;当'?'等于xp时，W是否大于X取决与wb和xb的大小关系，问题就转化成求wb有多少种组合大于xb了。可以用同样的算法递归解决。&lt;/li&gt;
&lt;li&gt;当'?'小于xp时，W一定小于X，忽略不计。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以这种情况下的最终结果由1、2两部分组成。&lt;/p&gt;
&lt;p&gt;理清了思路之后代码也就很简单了。C语言版的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                        &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                        &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_aw_ax&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// get input&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_larger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里问题还没有解决，因为性能不过关。在CSDN上测试代码的时候告诉我执行时间超过3秒。&lt;/p&gt;
</summary><category term="programming"></category></entry><entry><title>Python Challenge 2</title><link href="/blog/python-challenge-2.html" rel="alternate"></link><updated>2013-10-29T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2013-10-29:python-challenge-2.html</id><summary type="html">&lt;div class="section" id="whom"&gt;
&lt;h2&gt;15. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/uzi.html"&gt;whom?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这一关的提示信息主要来自图片中的日历，上面圈出的日期是1*6年1月26日。既然问题是“whom?”，那么答案一定是跟这一天有关的某个人。网页的源文件里有两行注释:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- he ain&amp;#39;t the youngest, he is the second --&amp;gt;&lt;/span&gt;
...
&lt;span class="c"&gt;&amp;lt;!-- todo: buy flowers for tomorrow --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不是最年轻的，是第二年轻的，那么这一天应该是生日。网上查了一下，1月26日出生的名人，出生年份末位是6的，只有几个，明显都不靠谱。再看第二条注释里写得是为明天买花，也许应该是1月27日出生的人。再查一下，还真有一个比较靠谱的：莫扎特。试试mozart.html，果然进入了下一关。不过这里根本没有用到任何编程。其实这题的本意，应该是让我们推算出年份，而不是直接去上网搜索。日历上显示1月26日是星期一，所以我们先要找出以1开头以6结尾并且1月26日是星期一的所有年份，然后其中倒数第二个就是我们要的答案。另外还有一个线索，日历右下角显示2月份有29天，那么这一年必须是闰年。我的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1996&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isleap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-me-get-this-straight"&gt;
&lt;h2&gt;16. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/mozart.html"&gt;let me get this straight&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同样是图片题，图中有很多的粉红色线段，看起来每条长度应该是一样的，并且两端都白点。“get this straight”，是不是就是指把每一行中的粉红色线段对齐呢？试一下，结果就出来了，下一关是romance。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mozart.gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="eat"&gt;
&lt;h2&gt;17. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/romance.html"&gt;eat?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;to be continued&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Data Science在线课程第1、2周</title><link href="/blog/datasci-1.html" rel="alternate"></link><updated>2013-05-17T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2013-05-17:datasci-1.html</id><summary type="html">&lt;p&gt;在Coursera上报了个Data Science的课程，一共8周。课程内容相当丰富，并且有机会参与第三方机构提供的project解决实际问题，还有一个可选的作业需要用Amazon AWS处理大约1TB的数据，相当的有点儿意思。&lt;/p&gt;
&lt;p&gt;感兴趣的请参考链接： &lt;a class="reference external" href="https://www.coursera.org/course/datasci"&gt;课程主页&lt;/a&gt;  &lt;a class="reference external" href="https://github.com/uwescience/datasci_course_materials"&gt;作业资料&lt;/a&gt;  &lt;a class="reference external" href="https://www.dropbox.com/sh/uwrt35dklb9s6db/bzET2Rz8X4/datasci"&gt;视频和幻灯片&lt;/a&gt;  &lt;a class="reference external" href="https://spark-public.s3.amazonaws.com/datasci/Coursera-Data-Science-Ubuntu.ova"&gt;课程虚拟机&lt;/a&gt; (&lt;a class="reference external" href="https://spark-public.s3.amazonaws.com/datasci/Coursera-Data-Science-Ubuntu.ova?torrent"&gt;Torrent&lt;/a&gt;)&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;第一周：导论&lt;/h2&gt;
&lt;p&gt;按照规矩，第一堂课通常是扯淡为主，装B为辅。讲一讲概念和意义，再举几个栗子，轻松写意，不在话下。根据我的理解，所谓Data Science，是指综合运用 &lt;strong&gt;多种技术&lt;/strong&gt; ，加上一点 &lt;strong&gt;hacking&lt;/strong&gt; 技巧，针对某一 &lt;strong&gt;特定领域&lt;/strong&gt; 的问题，从原始数据中提取有价值信息的过程。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;多种技术&lt;/strong&gt; 几乎包括了当下所有热门的技术，比如关系数据库、NoSQL、并行处理、云计算、统计学、机器学习、数据挖掘、可视化等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hacking&lt;/strong&gt; 在面对海量数据的时候，常规手段很难满足性能的要求，需要深度优化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定领域&lt;/strong&gt; 并非纯粹的计算机科学，而是计算机技术在其他学科的应用，属于交叉学科。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前在研究领域，各个学科都面临者数据处理的挑战。比如太空望远镜返回的图片，生物基因序列，传感器网络的监控数据，社交网络产生的信息等等，都是重要的研究素材，需要能够及时、有效的处理。Data Science以这些数据为主要研究对象，关注的是对数据的整理、解读以及重新表述。从这个角度来将，未来所有的科学都会是data science，重要性不言而喻。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="twitter"&gt;
&lt;h2&gt;作业1：Twitter情感分析&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题1：抓取twitter数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个问题是热身的，课程材料里面已经提供了Python代码，只要在twitter创建一个app，把key和secret填到代码里，然后运行就ok了。得到的数据都是json格式的，用python的json.loads()函数可以转换成dictionary。为了方便后面的工作，我改了一下代码，过滤掉了所有非英语的条目。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题2： 计算tweet的情感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AFINN-111.txt文件里包括了一些常见的英文词汇的情感值，取值在-5到5之间。以此为基础，可以通过对tweet中所有词汇的情感值求和来估算其情感值。未知词汇情感值按0来计算。具体做法是：提取出tweet的text属性，用正则表达式（re.findall()）找出其中所有连续的英文字符（不考虑非英语内容），统一转换成小写，然后在AFINN里面查找相应的情感值，求和。目前只能做这么多了，如果要考虑拼写错误或者非标准的写法，问题就复杂了。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题3： 计算新词语的情感值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据已知词汇的情感值，可以算出tweet的情感值，反过来根据tweet的情感值，也可以大致估算未知词汇的情感值。这里没有给出具体的算法，只给了一个 &lt;a class="reference external" href="http://www.cs.cmu.edu/~rbalasub/publications/oconnor_balasubramanyan_routledge_smith.icwsm2010.tweets_to_polls.pdf"&gt;参考文献&lt;/a&gt; 。参考其中的方法，我的做法是这样的：对每一个未知词汇，统计它在积极和消极的tweet中出现的次数，用前者除以后者，得到的就是这个词汇的近似情感值。为了跟AFINN的表示方法保持已知，我取了个对数，这样结果的正数表示积极，负数表示消极。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题4： 计算词频&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个问题在3里已经解决了。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题5： 哪个州最姓福？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在问题2的基础上，对来自不同州的tweet的情感值分别求和，结果最大的州最姓福，要求输出两个字母的州名缩写。这里涉及的主要问题是如何判断tweet发出的位置。问题1得到的数据里包括了两个属性place和coordinates，可作为判断依据。优先使用place，这个是经过twitter解析之后的位置，格式规范而且比较准确，直接检查里面是否包括某个州的名字就可以了。&lt;/p&gt;
&lt;p&gt;如果只有coordinates，可以用下面方法大致判断其所在的州：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://dev.maxmind.com/geoip/legacy/codes/state_latlon"&gt;这个表&lt;/a&gt; 给出了美国各个州的平均坐标。对于一个给定的坐标点，可以计算出它跟表中每个点的距离（按照球面算，算法参考 &lt;a class="reference external" href="http://stackoverflow.com/questions/6366408/calculating-distance-between-two-latitude-and-longitude-geocoordinates"&gt;这里&lt;/a&gt; ），距离哪个州最近，就认为该点属于哪个州。&lt;/p&gt;
&lt;p&gt;当然这个方法很不精确，不过对于这个作业来说足够了。&lt;/p&gt;
&lt;p&gt;当place和coordinates属性都为空的时候，可以参考user信息，用user的location属性来代替。因为这个信息是用户自己填写的，所以既不能保证真实可靠，也不能保证格式规范，要处理起来非常麻烦，这里只能偷懒了，“假定”用户诚实而又严谨。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;问题6： Top 10 hash tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计hash tag出现的频率，输出频率最高的10个。跟4差不多，只是多了一个计算top 10的步骤。这个做起来也很简单，python的heapq模块提供了函数nlargest()。假设之前统计的hash tags出现次数保存在一个名为tag_counts的dictionary，那么只需要一句话就可以搞定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlargest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个参数10是输出结果的个数。第二个是输入数据，必须是iterable对象。最后一个参数key是一个callable对象，简单说就是函数，在排序的时候用这个函数来取得比较大小用的键值，这里用一个匿名函数实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;第二周：关系数据库和关系代数&lt;/h2&gt;
&lt;p&gt;这周的课程信息量略大。读本科的时候关系数据库这门课上了有大半个学期。而这里涉及到的内容似乎比上课时讲得还多，不但讲了关系代数、SQL语言，还对DBMS的内部原理进行了一点简单的介绍。具体就不总结了，写不过来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;作业2：基于数据库的文本分析&lt;/h2&gt;
&lt;p&gt;前面几个题目很无聊，就是复习一下SQL。后面两个是模拟搜索引擎的原理，还比较有意思。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(h) 计算相似性矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表frequency: &amp;lt;docid, term, count&amp;gt;记录了一些文档中词汇出现的次数。把这个表看作一个稀疏矩阵D(docid为行，term为列)，相似性矩阵就是D跟自己的转置相乘。前面一题里已经解决了 &lt;a class="reference external" href="http://stackoverflow.com/questions/6582191/sql-query-for-multiplication"&gt;用SQL实现矩阵乘法&lt;/a&gt; 的问题，这里无非是多了一个转置而已，做起来也很简单，只要把SQL语句里的行和列互换一下就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;计算完整的相似性矩阵要花很长时间，可以在from语句后面加个条件where a.docid &amp;lt; b.docid，这样可以只计算一般，另一半是完全对称的。不过这样还是要用很长时间，而题目只要求提交10080_txt_crude和17035_txt_earn两个文档的相关性，所以完全可以用where a.docid='10080_txt_crude' and b.docid='17035_txt_earn'。&lt;/p&gt;
&lt;p&gt;这里得到的是未经正规化的相似性，实际中使用的通常是余弦相似性。把词频矩阵D中的每一行看作一个文档的N维特征向量，那么两个文档的相似性就是它们各自的特征向量在N维空间的夹角的余弦，夹角越小，相似性越高。关于余弦相似性可以参考 &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html"&gt;阮一峰的博客&lt;/a&gt; , 讲得很细致。这里只要稍微扩展一下，实现起来并不困难。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(i) 关键词搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了相似性矩阵的算法，关键词搜索就变得很简单。把关键词列表也当作一个特殊的文档，加入到frequency表中，计算相似性矩阵。这里只关心包含关键词列表的结果，跟关键词列表相似性比较高的文档就是搜索结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;washington&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;taxes&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;treasury&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="big data"></category><category term="online courses"></category></entry><entry><title>Linux中的Buffer和Cache</title><link href="/blog/linux-buffer-cache.html" rel="alternate"></link><updated>2012-10-04T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-10-04:linux-buffer-cache.html</id><summary type="html">&lt;p&gt;在Linux系统中查看内存使用情况（free，vmstat，/proc/meminfo）的时候，会有buffer和cache两项数据，一直搞不清这两个有什么区别，最近看到Robert Love &lt;a class="reference external" href="http://www.quora.com/What-is-the-difference-between-Buffers-and-Cached-columns-in-proc-meminfo-output"&gt;在Quora上的解答&lt;/a&gt; ，总算是明白了。&lt;/p&gt;
&lt;p&gt;在Linux内核中，cache是指文件系统的page cache，所有对普通文件（不包括设备文件）的I/O都是通过page cache进行的。读文件时，会直接从page cache中返回数据。如果缓存不命中，则从磁盘读取请求的页面并加入到page cache中，然后返回。写文件则直接把page cache中对应的页面标记位dirty，然后由后台线程pdflush完成写回磁盘的操作。有一种情况例外：当进程使用direct I/O方式进行文件读写，此时会不会经过page cache。Linux对page cache采用惰性回收机制，只有当可用内存不足时才会从page cache中回收，因此系统中常常有大量内存空间被page cache占用。这样的做法最大限度的减少了磁盘I/O。&lt;/p&gt;
&lt;p&gt;Buffer则是指块设备I/O的缓冲区，其中保存的是不属于任何文件的一些数据块，比如文件系统的元数据，还有进行direct I/O所产生的缓存数据，也会存储在buffer里。Buffer的寿命要比cache短很多，通常当块级I/O请求完成，buffer就会很快释放，因此buffer所占用的空间通常很小。但是也有例外情况：如果开启了laptop-mode，内核对写入磁盘的数据会缓存比较常的时间，然后再一次性写入磁盘。这种方式适用于笔记本，可以让磁盘较长时间的保持spin down状态，以减少磁盘能耗。从2.4开始的内核实现中，buffer和page cache已经不做区分，可以把buffer理解成属于设备文件的page cache。&lt;/p&gt;
</summary><category term="linux"></category><category term="memory"></category></entry><entry><title>Python Challenge</title><link href="/blog/python-challenge.html" rel="alternate"></link><updated>2012-09-29T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-09-29:python-challenge.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.pythonchallenge.com/"&gt;Python Challenge&lt;/a&gt; 是一个python编程游戏。游戏里的每一关通过图片和文字给出提示信息，需要通过推理和编程来找到通往下一关的线索。网站还提供了一个wiki，汇总了各个关卡的不同解答方法，不过你需要先解出当前关卡之后才能看到。查看方法参见wiki首页上的说明。这些代码是学习python编程的好材料，值得细细推敲。&lt;/p&gt;
&lt;div class="section" id="warm-up"&gt;
&lt;h2&gt;0. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/0.html"&gt;warm up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;计算2的38次方，方法多多，最简单的是用python的乘方运算符“**”。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-making-trans"&gt;
&lt;h2&gt;1. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/map.html"&gt;what about making trans?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;很容易看出来，规则是每个字符的ASCII码加2得到新字符，所以有了下面代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;#the given text#&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后来想了一下，转换过程还可以换中写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解码出来一看，提示可以用maketrans()。。。水平太菜，否则看到本页的标题，就应该联想到这个方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocr"&gt;
&lt;h2&gt;2. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/ocr.html"&gt;ocr&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;数据和提示都在本页源码里，要求是找出出现次数最少的字符，也就是要对文本里面出现过的各种字符进行计数。于是有了下面代码：&lt;/p&gt;
&lt;p&gt;打印出结果一看，有几个字母只都出现了一次，显然它们组合起来就是下一关的地址。因为之前看了一点资料，所以我已经知道这里的结果是equality。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是我这里的解法实际上看不出来这几个字母在文本出的出现顺序，于是想办法改进一下。把字母出现的次数乘以100，再加上出现的次序，这样最后一排序，结果一目了然。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="re"&gt;
&lt;h2&gt;3. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/equality.html"&gt;re&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一看提示，觉得必须是正则表达式啊，何况本页的标题都提示了。不过还是犯傻了，以为只有一组匹配。后来看了别人的解答才明白是要找出所有的匹配组合，然后把每组中的small letter连起来。。。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="follow-the-chain"&gt;
&lt;h2&gt;4. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/linkedlist.php"&gt;follow the chain&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提示已经很明显了，“follow the chain”。用urllib.urlopen()读取页面“&lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=XXXX"&gt;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=XXXX&lt;/a&gt;”，得到的文本里面会有next nothing的提示。一直迭代直到没next为止。中间到80多次的时候会出现一个中断，不碍事，按照提示除以2继续。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;urlbase&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlbase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里直接用s.spilt()[-1]的方法取nothing的值其实不太准确，更准确的做法是找到“next nothing”串。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="peak-hell"&gt;
&lt;h2&gt;5. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/peak.html"&gt;peak hell&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个比第一关更坑爹。第一关不知道maketrans()至少还有笨办法可以解出来，这题不知道pickle根本没戏。我这种水平也只能靠google了。&lt;/p&gt;
&lt;p&gt;数据文件banner.p是一个经过pickle序列化的list，用pickle.loads()可以把文本转换成python对象（这个跟之前用过的json是一样的），转换的结果是一个list。然后根据这个list“画出”banner，就可以去下一关了。&lt;/p&gt;
&lt;p&gt;代码我就不剽窃了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-there-are-pairs"&gt;
&lt;h2&gt;6. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/channel.html"&gt;now there are pairs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;到这一关，我才知道第5关神马的简直弱爆了：这里没有任何文本提示。总是作弊就没意思了，自己先琢磨一下吧！&lt;/p&gt;
&lt;p&gt;老规矩查看页面源码，发现第一行注释里有个zip的提示，图片内容又是zip（拉链），那么解题的关键一定就是zip。&lt;/p&gt;
&lt;p&gt;Python里有个zip()函数，是不是需要用zip()进行处理得到结果呢？可是处理什么？这里没有给出任何需要处理的数据啊。&lt;/p&gt;
&lt;p&gt;本着破罐破摔的态度，我试了一下zip.html，居然有结果！得到的是一条提示信息：&lt;/p&gt;
&lt;p&gt;yes. find the zip.&lt;/p&gt;
&lt;p&gt;看来zip的方向是对了，不过还是不知道zip指什么。。。&lt;/p&gt;
&lt;p&gt;一觉醒来之后突然来了灵感，既然可以把channel换成zip，为什么不能把html换成zip呢？find the zip，是不是指zip压缩包呢？试了一下，果然！真正的题目原来在channel.zip里。&lt;/p&gt;
&lt;p&gt;跟第4关差不多，也是要不断找next nothing。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;90052&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;910&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果，在46145.txt里终止，有一句话：Collect the comments。文本里面没有comment，那应该就是zip文件里的comments了，看来还要处理压缩文件。搜索之，python还真能处理zip文件。提取出每个文件的注释，得到的还是一串没有意义的字符。观察了一下，里面出现的字母只有E、Y、O、N、G、X这6个，虽然不知道规律是什么，但是已经可以猜到结果就是oxygen了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smarty"&gt;
&lt;h2&gt;7. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/oxygen.html"&gt;smarty&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;第7关唯一的提示信息就是图片了，看来少不了要用PIL了。本来以为有什么捷径，调用某个函数就能解析出图片中类似条码的那一块东西，但是找来找去也没发现什么。只好再一次祭出笨办法。&lt;/p&gt;
&lt;p&gt;分析了一下，图片中的“条码”是许多块深浅不同的灰色块组成的，把这些块的颜色打出来一看，发现每一块的颜色值都是(x, x, x, 255)的形式，试着把所有的x按ASCII码表转换成字符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oxygen.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;608&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;_p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;果然得到了信息：&lt;/p&gt;
&lt;p&gt;smart guy, you made it. the next level is [105, 10, 16, 101, 103, 14, 105, 16, 121]&lt;/p&gt;
&lt;p&gt;这个list里共有9个元素，其中100以上的几个可以翻译成字符i、e、g、i、y，这显然不是答案。&lt;/p&gt;
&lt;p&gt;仔细想想就发现前面的解法有问题，如果两个连续的色块颜色一致，按上面的算法就会被识别成一个。所以这里的10实际上可能是110。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;“”&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;替换之后再转成字符，得到下一关的地址integrity。&lt;/p&gt;
&lt;p&gt;话说这题还真不能单靠程序来解，必须先找通过观察找到一些参数，比如“条码”的覆盖范围和每个色块的宽度。不过看过别人给的标准答案之后，还是自叹不如，倒不是不会用，是真想不起来还有这些用法。熟悉python，还需再接再厉！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-hard"&gt;
&lt;h2&gt;8. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/def/integrity.html"&gt;working hard?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;图片上隐藏着一个连接，不过需要用户名和密码才能打开。用户名和密码在页面源码的注释里，当然也是编码之后的。提示是inflate，应该跟压缩有关。观察发现un和pw的开头都是”BZ”，莫非是bzip2压缩过的？Google一下，python里面有模块bz2，试解压之，得到huge和file。记住用户名和密码，因为以后关卡的网页都需要这个账号才能打开。&lt;/p&gt;
&lt;p&gt;这一关还是比较容易的，标题大概就是暗示我们在hard working之余稍微放松一下吧！Next level！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-the-dots"&gt;
&lt;h2&gt;9. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/good.html"&gt;connect the dots&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看到这个标题，我以为跟图片上那些个黑点有关。后来发现源码里给出的first和second，里面的数值似乎是两两一组的，并且是渐变的。莫非这才是坐标？用PIL里面的画线函数试一下，果然，画出了一头牛！第一反应是cow，结果不对，它告诉我“it’s a male”。那就是bull了，过关！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;ImageDraw&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;good.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;first_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;second_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写完重新看了一下，觉得first到first_p的转换是不是有点儿多余了？有一种强烈的直觉告诉我：python如此强大的语言应该不会强迫我写这些没什么含金量的语句的。仔细看了一下PIL的文档，line()函数的参数xy不一定要是tuple的list，也可以直接用数值的list，那么这里其实可以直接用first和second作参数，根本不需要转换。有点好奇line()函数是怎么同时支持两种不同类型参数的，要判断参数类型，还是有其他办法？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-you-looking-at"&gt;
&lt;h2&gt;10. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/bull.html"&gt;what are you looking at?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提示：len(a[30]) = ? 图片隐藏链接指向sequence.txt，里面有一个数列a，看来是要找出a[30]的值，这个只能靠人脑了。很遗憾，i failed！搜索了一下这个数列，发现居然还是个比较有名的问题，数学上叫做外观数列（look-and-say sequence），也叫莫里斯数列，规律就是后一项是对前一项的描述，比如1211表示前一项是“1个2，1个1”。如果用纯数学的方法来求解，需要用到非常复杂的公式，不过对于计算机和人脑来说，就是个重复应用规则的过程，一个递归函数就可以搞定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mycount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好吧，从python的角度来看，这段代码一点儿也不sexy，特别是当我看了参考答案之后，这里正则表达式用得太妙了。另外wikipedia上给出的代码使用了generator，但是本质上跟参考答案是一样的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="odd-even"&gt;
&lt;h2&gt;11. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/5808.html"&gt;odd even&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;又是坑爹的一关，有用的信息只有一张图片，还有含义不甚明了的标题。不过仔细来看，这图片好像是两张不同图片合成的？是不是要把他们分离出来？经过反复试验，发现只要把奇数行奇数列或者偶数行偶数列的像素提取出来组成新的图片，就可以得到答案。这大概就是标题“odd even”的含义吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cave.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.bmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外我还不幸的发现，在Windows下用PIL，貌似最后保存文件只能用bmp格式，是我安装有问题？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dealing-evil"&gt;
&lt;h2&gt;12. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/evil.html"&gt;dealing evil&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;又是一个纯图片的谜题，我讨厌这个。开始以为跟上一关一样，要从图片里分离出隐藏信息，结果折腾了N久没有结果，只好求助于网络。结果发现要找的居然不是这个evil1.jpg。。。&lt;/p&gt;
&lt;p&gt;打开evil2.jpg，显示not jpg, gfx。下载evil2.gfx，得到一个数据文件。这里就要用到evil1.jpg了，上面显示的是将扑克牌分成5份，所以这里要做的是把evil2.gfx分成5份，就是5张不同的图片。&lt;/p&gt;
&lt;p&gt;下面的代码也是借来的，写得真是简洁，学习了！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;evil2.gfx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;.jpg&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看了官方给出的参考答案，要更完善一点。这里的5幅图片格式不同，需要用PIL来判断。这里用StringIO把字符串模拟成文件，然后通过Image.open()方法导入为图像。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;evil2.gfx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# every fifth byte, starting at i&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="call-him"&gt;
&lt;h2&gt;13. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/disproportional.html"&gt;call him&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;图片上的5键里隐藏了链接，指向../phonebook.php，打开得到一个XML，显示错误“Invalid document end at line 1, column 1”，显然是要提交参数。提示信息是“phone that evil”，“that evil”是不是指上一关中的evil2.gfx？试试把这个POST上去。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.pythonchallenge.com/pc/phonebook.php&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;evil2.gfx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果还是错误：“XML error: Not well-formed (invalid token) at line 1, column 1”。看起来是要提交一个XML文档。仔细看前面得到的XML，methodResponse比较眼熟，有点儿像是RPC，想起来有个叫XML-RPC的东西，上Wikipedia上一看，果然，返回的结果正好符合XML-RPC的定义，再看python的文档里面，有xmlrpclib。看来错不了，这里的“call him”指的是XML-RPC call。现在只需要搞清楚method和params。&lt;/p&gt;
&lt;p&gt;提示给的是“phone that evil”，那么method大概就是phone()，先试一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xmlrpclib&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.pythonchallenge.com/pc/phonebook.php&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmlrpclib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;disproportional&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到结果：He is not the evil。路子对了，参数不对。试过能想到的各种情况都不成功，只好求助网络，发现上一关里还有个evil4.jpg，用IE打开能看到“Bert is evil! go back!”（chrome里只能看到一个图片显示失败的标志）。把参数换成“Bert”，得到“555-ITALY”。。。居然还没结束。&lt;/p&gt;
&lt;p&gt;想想电话号码应该全是数字，按照手机键盘把ITALY换成数字“48259”，再试，还是不对。再次求助网络，原来结果就是italy，囧。。。&lt;/p&gt;
&lt;p&gt;那就去意大利吧！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="walk-around"&gt;
&lt;h2&gt;14. &lt;a class="reference external" href="http://www.pythonchallenge.com/pc/return/italy.html"&gt;walk around&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面是面包，下面是一张10000×1的图片，变形成100×100（否则还真看不见）。页面源码的注释里还有提示：remember: 100*100 = (100+99+99+98) + (…&lt;/p&gt;
&lt;p&gt;是不是要把这10000×1的图片按某种规则转换成100×100的？上面图片里的面包是一圈一圈向里收缩的，看起来这就是规律，注释里面的等式就是这个规律，100, 99, 99, 98四个数分别是第一圈四条边的长度，最后组合起来应该是这么一个序列：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="4"&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规律还是很明显，我的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wire.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的图片是一只猫，把上个本关链接中的italy换成cat，进入的页面上有一只猫的照片，上方的文字说：它的名字叫uzi。找了很久，发现这个网页上没有任何提示信息，最后才发现，原来下一关的题目不再这里，而是在uzi.html。&lt;/p&gt;
&lt;p&gt;&amp;lt;未完待续…&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>关于今日项目演示的总结</title><link href="/blog/presentation-lessons.html" rel="alternate"></link><updated>2012-07-08T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-07-08:presentation-lessons.html</id><summary type="html">&lt;p&gt;演示是推广和展示的好机会，除了做得东西本身要靠谱，怎么去陈述也很重要。再好的东西也需要包装，说白了就是要吹。但是吹也是很讲水平的，吹不好牛皮容易破。&lt;/p&gt;
&lt;p&gt;陈述的关键在于短时间内让人明白你做的是什么东西，意义何在。虽然听众都是砖家，但是砖家也不是啥都懂，讲的不好不清楚，砖家就真的变砖了。今天的演示不算成功，总结下来，有如下收获：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;专有名词、英文缩写的使用要慎重，如果是已经广为人知的名词或缩写，比如ftp之类的，当然没有问题。但是如果是比较小众的，除非是必不可少，否则尽量不要用。陈述中忽然蹦出来这么一个词，很容易吸引听众的注意力，然后他又不明白这个词是什么意思，就会影响对整个陈述的理解。如果必须要用，就要解释清楚。&lt;/li&gt;
&lt;li&gt;少讲技术细节。有限的时间内不可能把技术细节讲清楚，对于不懂具体技术的人，讲得越多越难理解，而所谓专家，大部分都是这种人。而他们绝大多数情况下也不会关心这些细节。讲述中主要关注工作的内容、成果，还有目的和意义。具体实现细节，除非有人问，否则就不要提。&lt;/li&gt;
&lt;li&gt;重点讲做成了的东西，正在做的和打算做的最多提一下。现在讲的是成果，做出来才算，总是讲没做成的东西，会让人觉得你心里没底。&lt;/li&gt;
&lt;li&gt;尽量跟大家熟知（或者可能熟知）的东西联系起来。比如要说云计算，就要尽可能跟亚马逊、Google扯上关系。大树底下好乘凉，把自己的东西跟这些成功的产品联系起来，会让更有说服力。同时，从心理学的角度来讲，如果砖家在一大堆自己闻所未闻的东西中间，突然听到这么一个自己知道的，也更容易留下深刻的印象。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term=""></category></entry><entry><title>快盘开放平台OAuth</title><link href="/blog/kuaipan-oauth.html" rel="alternate"></link><updated>2012-04-06T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-04-06:kuaipan-oauth.html</id><summary type="html">&lt;p&gt;最近发现金山快盘 &lt;a class="reference external" href="http://www.kuaipan.cn/developers/document.htm"&gt;开放API&lt;/a&gt; 了，以前一直头疼没有Linux客户端，现在有了API，完全可以自己实现一个简单的客户端。&lt;/p&gt;
&lt;p&gt;开放平台采用OAuth 1.0的认证方式，认证过程分3步。第一步是申请一个临时token，也就是通知服务器要进行授权操作，服务器会准备后面两步需要的相应资源。第二步引导用户访问授权页面，登陆帐号进行授权。第三步获取正式的访问token。&lt;/p&gt;
&lt;p&gt;看了官方文档，觉得授权过程不是很复杂，于是想自己写写试试。写了一段python代码，但是第一步就不能通过，服务器段总是返回401，错误信息是“request expired”。检查了一下，没发现timestamp有问题，搞不清问题出在哪儿。Pypi上找了一下，发现一个现成的包oauth，里面还自带了客户端和服务器端的例子程序，于是拿来改了一下，终于成功授权。&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request_token_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signature_method_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先用consumer_key和consumer_secret创建一个OAuthRequest，目标url指向开放平台提供的requestToken。然后用HMAC-SHA1对请求进行签名，签名算法参数signature_method_hmac_sha1是一个OAuthSignatureMethod_HMAC_SHA1类型的对象，由oauth包提供。第三步调用do_request()方法执行请求，从服务器端取得临时token。这里需要修改一下。例子里在执行http请求时是通过header传递参数的，但是快盘的API只支持url方式传递参数，用OAuthRequest.to_url()方法可以获得请求对应的url。用urllib2里的urlopen()函数打开url，并读取返回响应。修改之后的代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# via url&lt;/span&gt;
        &lt;span class="c"&gt;# OAuthToken&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_url&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_url&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外返回结果是json格式，oauth里面也没有提供相应的处理方法，需要自己写。我在OAuthToken里加了from_json()方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oauth_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;oauth_token_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OAuthToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback_confirmed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;callback_confirmed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c"&gt;# 1.0, no callback confirmed.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
&lt;span class="n"&gt;from_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;staticmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;p&gt;这一步跟例子区别很大，需要用户访问指定页面并登录授权。服务器会给出相应的授权码作为凭据，这个授权码应该是用作后续请求的verifier，不过根据快盘的文档，为了简化操作，这个verifier目前没有使用，这一步只要给出url让用户登陆授权即可。授权页面地址如下。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.kuaipan.cn/api.php"&gt;https://www.kuaipan.cn/api.php&lt;/a&gt;?ac=open&amp;amp;op=authorise&amp;amp;oauth_token=&amp;lt;YourTemporaryToken&amp;gt;&lt;/p&gt;
&lt;p&gt;第三步：&lt;/p&gt;
&lt;p&gt;用临时token获取正式的access token。过程跟第一步基本相同，不过在创建request和签名的时候需要用到第一步获得的临时token。过程如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_token_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signature_method_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完成上面三步，授权就算成功了，用access token可以调用快盘提供的各种API。调用API同样可以通过OAuthRequest来进行。API中的额外参数，可以在创建OAuthRequest对象的时候通过parameters参数指定。比如下面这个语句创建一个create_folder请求，带两个参数root和path。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;oauth_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_consumer_and_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_BASE_URL&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;create_folder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;app_folder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过我尝试了多次，创建目录总是不能成功，返回状态400，错误消息“bad location”，貌似是path参数不对。目前还不清楚是什么原因。&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>用Bash解一道编程题</title><link href="/blog/bash-solution-of-a-python-problem.html" rel="alternate"></link><updated>2012-03-31T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-31:bash-solution-of-a-python-problem.html</id><summary type="html">&lt;p&gt;EuroPython 2011的 &lt;a class="reference external" href="https://code.google.com/codejam/contest/1277486/dashboard"&gt;一道题目&lt;/a&gt; 。大意是说：半人马座统一之前由很多小国家组成，如果一个国家的名字是辅音字母结尾，那么这个国家由国王统治；如果是元音结尾，就是女王统治；如果是y结尾，则处在混乱状态，无人统治。输入文件是一个国家名字的列表，要求输出每个国家的统治者。题目不难，所以我想用bash来解决。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;for &lt;/span&gt;l in &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;    fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Case #&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$l&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; is ruled by &amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$l&lt;/span&gt;|tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;if  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;|grep &lt;span class="s1"&gt;&amp;#39;y$&amp;#39;&lt;/span&gt;&amp;gt;/dev/null; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nobody.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt;|grep &lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u]$&amp;#39;&lt;/span&gt;&amp;gt;/dev/null; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a queen.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a king.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用cat读取输入文件，然后逐行处理。第12行用tr命令把国家名字替换成小写。第13和16行分别用grep进行正则表达式匹配，判断是否以y或者元音字母结尾。&lt;/p&gt;
&lt;p&gt;这段代码的输出结果通过了检查，但是比较了一下性能，发现跟相应的python版本差距很大，执行时间相差50倍。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:17:16&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries.sh A-small-practice1.in &amp;gt; sh.out

real    0m1.991s
user    0m0.198s
sys 0m0.842s
&lt;span class="o"&gt;[&lt;/span&gt;temp 11:17:44&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python a.py A-small-practice1.in py.out

real    0m0.040s
user    0m0.032s
sys 0m0.003s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;造成性能差的原因，可能是因为bash脚本中调用了其他的程序，每一次调用都需要创建新进程，并且要通过管道进行进程间通信。在上面脚本里，每次循环至少要调用echo4次、grep一次、tr一次，使用管道3次，这些操作都需要进行系统调用，带来极大的性能开销，反映在time结果上就是sys时间是python版本的280倍之多。由此得到性能优化的方向：尽量使用bash的内置功能，减少外部程序调用。&lt;/p&gt;
&lt;p&gt;Bash其实已经提供了内建正则表达式匹配功能，通过=~运算符实现。用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$regexp&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以把脚本中的grep调用全部去掉。另外脚本中每一行结果分两次输出，可以合并成一次，减少一次echo调用。新的脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="k"&gt;for &lt;/span&gt;l in &lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;    fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$l&lt;/span&gt;|tr &lt;span class="s1"&gt;&amp;#39;[A-Z]&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[a-z]&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nv"&gt;reg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y$&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;reg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u]$&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$reg1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nobody.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$reg2&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a queen.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;who&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a king.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Case #&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$l&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; is ruled by $who&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;i+&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再测性能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:46:44&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries-tuned.sh A-small-practice1.in &amp;gt; sh.out

real    0m0.820s
user    0m0.101s
sys 0m0.151
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;性能提高了不少，但是执行时间仍然是python版本的20倍！看起来性能瓶颈可能在tr。一方面是前面分析的创建进程和管道通信的开销，反映在sys时间上；另一方面，user时间也比较大，可能是tr的实现机制所致，这种基于正则表达式的替换用来进行大小写转换有点儿杀鸡用牛刀的感觉。Bash里面没有找到比较简单的办法替代tr，但是可以修改reg1和reg2，在条件判断的时候把大小写考虑进去，同样可以达到目的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;reg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[y|Y]$&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;reg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[a|e|i|o|u|A|E|I|O|U]$&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再测性能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;temp 11:56:14&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./contries-tuned2.sh A-small-practice1.in &amp;gt; sh.out

real    0m0.056s
user    0m0.043s
sys 0m0.003s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;已经相当接近了，不过总的执行时间仍然比python多出了40%，多出来的部分主要在usr，应该是Bash本身的问题了。&lt;/p&gt;
</summary><category term="bash"></category><category term="programming"></category></entry><entry><title>八一八我用过的操作系统</title><link href="/blog/i-and-os.html" rel="alternate"></link><updated>2012-03-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-03-05:i-and-os.html</id><summary type="html">&lt;p&gt;闲来蛋疼，忽然想清点一下自己用过的各种OS，不知不觉又想起以前的很多事情，顺便回顾一下自己的准IT生涯。&lt;/p&gt;
&lt;p&gt;最早开始接触计算机，知道OS这个概念，是从初中开始。学校里面有个机房，里面几十台也不知道是386还是486的电脑，装的全是经典的MS-DOS 6.22。每次数学老师兼任的计算机老师带我们进去上课的时候都搞得特别神圣，不过教的也就是那么一点点常用命令。后来跟同学学会了一个win命令，可以启动图形界面，也就是传说中的windows，不记得是3.1还是3.2了。虽然有图形好看多了，但是也不过就是dos的一个漂亮的壳而已。&lt;/p&gt;
&lt;p&gt;那个时候已经开始有网吧了，不对，是游戏房，还不能上网。一个小房间，几台电脑，每台旁边都围着好几个人。网吧里用的貌似已经是windows 95了，不过我这种好孩子是不会去那种地方的。&lt;/p&gt;
&lt;p&gt;在那个时候哥就已经无师自通，学会了BASIC编程（其实最早是从学习机上学的），最喜欢折腾的就是DOS里面的QBASIC。并且颇具慧眼，在完全没有人指点的情况下，毅然抛弃了Pascal、Fortran等一干语言，开始了C语言的启蒙。启蒙教材就是谭浩强的那本，注意是黄色封面的第二版，不是后来大学书摊上遍地都是的那种绿色封面的第三版！&lt;/p&gt;
&lt;p&gt;这是所有一切的开始！！！我怀疑我的下半生的走向是不是在那时候就已经决定了！&lt;/p&gt;
&lt;p&gt;不久之后，有个叔叔家买了台电脑，好歹是颗奔腾的心，可以跑win 95了。于是我就经常各种借口过去蹭，不过做的事情主要是跟堂弟一起。。。玩游戏！那时候印象最深的两个游戏，一个是神话级的仙剑，另一个，也是神话级的，生化危机。&lt;/p&gt;
&lt;p&gt;初中毕业之后，哥家里也买了电脑。这里必须要感谢一下俺爹俺娘，很有远见的，在日子不算宽裕的情况下，全力支持了我对计算机的热情。那时候基本上还是win 98一统江湖。就像“瘟酒吧”的16位/32位混合内核一样，这是一个幸福和烦恼共存的年代。漂亮好用的图形界面让人沉迷其中，时常抽风的属性又让人直想骂娘。依然记得曾经在网上看到某位mm把经典的蓝屏画面做成T恤穿在身上，高耸的胸部衬托着熟悉的蓝底白字，让人无限瞎想。后来xp出来了，起初也是骂声一片，硬件要求太高，所谓的革命性满足不了用户的期待，直到后来的sp2才算翻身。这个阶段估计很多人都经历过。&lt;/p&gt;
&lt;p&gt;这中间还折腾过两个比较小众的版本：windows的千禧版（ME）和win 2k。ME就是98的升级版，区别不大，而2k用的是NT的纯32位内核，稳定性要好得多。顺便鄙视一下微软，虽然有模有样的把windows分成服务器版和个人版，但是二者基本上没有区别，服务器版的控制面板里面一样可以找到“游戏控制器”，纯属忽悠消费者，跟张良卖剪刀没啥区别。&lt;/p&gt;
&lt;p&gt;另一个要得瑟一下的事就是，哥在那个时候已经用上了一样东西，虽然当时还比较小众，但是日后却大红大紫，堪称居家旅行，拷贝数据之必备利器。没错，那就是——U盘！高二，我买了第一个U盘，朗科，32MB，后来在大学的时候寿终正寝了。那个时候闪存技术才刚刚出现不久，还没有得到广泛认可，如今10年过去了，闪存对IT的影响还在不断加深，从消费电子产品到高端服务器。&lt;/p&gt;
&lt;p&gt;上了大学，哥继续走小众化路线，开始捣腾Linux，事实证明哥再一次走在了时代的前面。虽然第一年没有电脑，但也阻止不了我心向往之。刚开始接触的是Red Hat。那些年，很多人的第一次都给了小红帽，而现在估计很多人是从充满异域风情的非洲来客Ubuntu开始的，压根儿没有见过以前linux有多么简陋，多么揪心。当然更多人用android就已经算是跟linux的最亲密接触了。之后不久，ubuntu靠着过硬的素质和免费送光盘的魄力开始风行全球，哥又一次成为先驱者。不过那时候的ubuntu跑起来还比较慢，尤其是在我的破电脑上，所以我又换成了它的直系亲属debian，这是整个大学阶段用的主要系统之一。期间尝试过gentoo，但是自己编译软件实在太慢了，经常要整宿整宿的开机挂着，折腾了一段时间就受不鸟了。&lt;/p&gt;
&lt;p&gt;除了Linux之外，Unix一族的其他系统也没有放过，主要就是其中的两大分支：FreeBSD和Solaris，前者是4.4BSD的继承人，后者延续了SVR4的血脉。曾经一度觉得solaris很优秀，想深入钻研一下，不过稍微深入一点就发现，这个系统虽然设计很好，也有很多先进的技术，但是推广做的不好，接收程度太低，门槛儿太高，相比走社区和草根路线的linux来讲，难成大器，所以果断放弃。从现在的情况来看，这个选择还是比较明智的。苹果开始用intel cpu之后，出现了各种破解的Mac OS版本，然后在某果粉同学的怂恿下，在笔记本上装了leopard。因为硬件支持实在不好，用着也不习惯，就放弃了。&lt;/p&gt;
&lt;p&gt;大学阶段最high的是，曾经有长达数月的时间完全不用windows，所有的事情都在linux下搞定，不管是课程实验还是魔兽，有认证物证暂住证！不过估计是因为搞得太小众了，以我如此优越的条件，大学四年居然没有mm找我修过电脑！&lt;/p&gt;
&lt;p&gt;后来读研了，做项目做实验都是用Linux，基本就变成主业了。这时候开始喜欢朴实无华但是稳定可靠的CentOS，RHEL的社区版本。项目用的开发系统都被我换成了这个，自己笔记本上也装了。不过CentOS的内核版本比较老，对新硬件支持不好，所以又把自己的笔记本上系统换成了用ubuntu的衍生版本mint，浅绿色基调的界面非常清爽，比ubuntu屎黄屎黄的调调要好很多。&lt;/p&gt;
&lt;p&gt;RHEL出到6以后，CentOS开发滞后，很久没有跟上新版本，所以我就换用了另一个社区版Scientific Linux，同样是基于RHEL的代码，但人家是传说中CERN用的系统，听着就够拉风。&lt;/p&gt;
&lt;p&gt;然后gnome3出来之后，哥表示很喜欢，所以又把笔记本上的系统换成了Fedora 15，后来升级成F16，一直用到现在。这个阶段实在是没有以前那种精力去瞎折腾了。&lt;/p&gt;
&lt;p&gt;说操作系统，当然也不能不提手机。人穷志短，没那么多钱换手机，不过还是基本上赶上了诺记的辉煌时代。S40、S60v2、v3都用过。刚开始接触s60的时候，诺记还在智能手机圈里一枝独秀，横行无忌，那时候手机还是2.x寸的小屏幕，虽然号称“智能”，其实比非智能的也强不了多少。但是哥已经清楚的意识到这一块前途不可限量，绝对是未来的热点之一。不过没想到的是，一部iPhone能在瞬间把它推到一个前所未有的高度。&lt;/p&gt;
&lt;p&gt;以前有个师兄说过，把兴趣变成工作，就悲剧了。现在回想一下，太有道理了，我就是一步一步的把兴趣逐渐变成工作，果然就悲剧了。。。&lt;/p&gt;
&lt;p&gt;从中学到现在，信息越来越通达，最早的信息来源基本上就是一本《电脑爱好者》杂志，后来高中的时候买书买杂志越来越方便了，也开始接触网络。到了大学基本上就离不开网络了，同时开始接触开源软件和社区，从中也增长了不少见识。读研究生之后又被迫进入所谓的学术圈。现在，每天接触各种业界资讯，社区动态，学术进展，视野前所未有的开阔，不但有大量的新闻资讯，各种深入浅出的技术分析文章，取之不尽的开放源代码，还有看到想吐的学术论文，每天处理的信息比以前一个月接触的信息还多。信息越来越丰富的同时，思维反而越来越僵化，越来越不敢想，感觉越来越不敏锐。大概外来信息太多，把自己的想法给框住了，结果反而失去了活力。&lt;/p&gt;
</summary><category term="Operating System"></category></entry><entry><title>移植owncloud到SAE</title><link href="/blog/owncloud-sae.html" rel="alternate"></link><updated>2012-02-02T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2012-02-02:owncloud-sae.html</id><summary type="html">&lt;p&gt;寒假在家无聊，找点事情打发一下时间。最近比较关注新浪的App Engine，想在上面做点儿什么。写新的东西吧，一是目前没想法，二是设计比较麻烦，还是移植吧。于是想到了owncloud，KDE的一个子项目，貌似还没有人移植。如果能在SAE上运行owncloud，就可以用很低的成本拥有一个私有的云存储服务器，还是挺吸引人的。&lt;/p&gt;
&lt;p&gt;大致看了一下OC的代码和SAE的文档，移植的主要难点在文件存储这一块。OC需要用服务器的本地文件系统存储文件，但是SAE不支持本地文件系统写操作，文件只能存储到它的分布式文件系统里。这个系统目前很不完善，缺乏POSIX的很多特性，比如很多文件属性没有，而且对目录的支持也不完善，这个是最关键的。先从简单的开始做起，完成一个不支持层次目录的版本。&lt;/p&gt;
&lt;p&gt;OC的代码层次比较清晰，其中文件存储这一块分了两层。一层是抽象层（lib/files.php和lib/filestorage.php），为OC的各个app提供跟底层无关的文件访问API。另外一层是后端存储引擎（lib/filestorage/），就是跟存储方式相关的具体实现。目前有两个引擎：local.php和remote.php。前者就是用本地文件系统做存储后端，后者是远程存储，具体是个什么东东我还不是很清楚。&lt;/p&gt;
&lt;p&gt;那么主要任务就是添加一个SAE的专用存储后端（sae.php）。先把local.php整个copy过来，里面其实就是定义了一个OC_Filestorage的子类OC_Filestorage_Local，各个方法的含义基本上很明确了。参考这个，实现一个新的类OC_Filestorage_SAE。之后还要在lib/base.php里加上一句registerStorageType，注册新的存储后端。&lt;/p&gt;
&lt;p&gt;因为不支持目录，所以其它有些地方还需要进行一些相应的修改。比如OC里默认在DATADIR/files/目录下为每个用户创建一个目录用于存储文件，现在只能全部存储在根目录下。&lt;/p&gt;
&lt;p&gt;另外，OC在安装的时候通过交互式界面（lib/setup.php）填写配置信息，然后把配置信息写到config/config.php文件里。而SAE里不能修改本地文件。目前的做法是事先写好配置，然后调用一个新的setup.php，根据配置信息进行初始化。&lt;/p&gt;
&lt;p&gt;完成的代码发布在github，基于最新发布的owncloud3，详细说明见README。&lt;/p&gt;
&lt;p&gt;不知道SAE近期有没有继续完善其分布式存储系统的计划，不过通过这个移植过程，我倒是产生了一个想法：用SAE的kvdb和storage实现一个功能完善的分布式文件系统。用kvdb存储元数据（inode和目录等等），storage存储数据，通过php streamWrapper进行封装，这样就可以像本地文件一样通过open()，read()，write()等函数来访问。如果有了这个东东，再移植OC或者类似的系统，难度应该会小很多。&lt;/p&gt;
</summary><category term="cloud"></category><category term="php"></category></entry><entry><title>Chrome插件开发小结</title><link href="/blog/chrome-ext-dev.html" rel="alternate"></link><updated>2011-11-05T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2011-11-05:chrome-ext-dev.html</id><summary type="html">&lt;p&gt;这几天写了个简单的chrome扩展，总结一下。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Manifest很重要。Manifest.json决定了这个扩展程序可以使用哪些资源和API，如果写错了，正确的代码也无法执行。这种做法有一个好处是强迫你先做好设计，先想清楚自己需要用到哪些东西，而不是盲目的写代码。这个问题上我犯过不止一次错误，急躁的毛病还是要改改。&lt;/li&gt;
&lt;li&gt;用console输出调试信息。调试程序最简单最直接的办法就是在代码里加调试输出，然后查看输出结果就可以了解程序执行的过程和关键数据。C里面用printf()，Javascript里面可以用alert()弹出对话框输出信息。但是弹出窗口很不方便，特别是输出较多的时候。另外对于background page，是不能弹出对话框的。所以更好的做法是用console.log()输出的console。有些页面（比如popup）是不能直接输出到console的，可以调用chrome.extension.getBackgroundPage().console.log()输出到background page的console。查看log可以用下面方法：对于Content script，直接在当前页面按Ctrl + Shift + I打开调试工具，在console标签里查看；对于Background page，在“选项”的“扩展程序”页面里面查看，选上“开发人员模式”，然后每个插件展开后都会有一个backgroud page的链接（如果有background page的话），点击就可以打开background page的控制台。&lt;/li&gt;
&lt;li&gt;找别人的代码来参考。我从来不喜欢死看教程，很多东西找段代码一看就什么都明白了。可以到github等项目托管网站或者一些代码搜索网站上找别人的代码作参考。直接搜你想查的函数，可以得到很多结果。&lt;/li&gt;
&lt;li&gt;学会用回调。Chrome插件用Javascript开发，而回调是Javascript的一个重要特性。Chrome提供的API里面很多是基于回调的，甚至连一个简单的tabs.getSelected()得到当前选中的tab，都要用回调。所以理解回调的原理，学会用回调很重要。回调是在异步通信中用来返回结果给消息发送者的。理解回调的一个关键点是，执行回调的和发送请求的（也就是设置回调函数的）是两个并发的线程。由于是异步非阻塞的，回调函数的执行时间完全取决于消息接收方的响应速度，getSelected()函数返回之后它的回调函数并没有返回。Javascript里面的回调可以用匿名函数的方式直接写在参数表里，这种写法很具有迷惑性，让人误以为函数返回之后回调也执行完了，我就在这个上面栽了跟头。在写这个扩展程序的过程中，我使用了一个for循环逐条处理搜索结果，并用sendRequest()向background page发送消息，但是我在回调函数里引用了循环里的变量，每次循环结束这些变量都会改变，因此当回调执行时，取到的值已经不是我想要的了。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="chrome"></category><category term="javascript"></category></entry><entry><title>有图有真相：实验分析Google按图搜索</title><link href="/blog/google-search-by-img-experiments.html" rel="alternate"></link><updated>2011-06-19T00:00:00+08:00</updated><author><name>Seth Huang</name></author><id>tag:/blog,2011-06-19:google-search-by-img-experiments.html</id><summary type="html">&lt;p&gt;Google推出按图搜索，貌似效果比较震撼。Google的搜索算法真的强大到能像人一样仅凭图片就识别出内容吗？我对此表示怀疑。Google的搜索引擎又是怎么做到按图搜索的？我不是研究这个的，只能做几个简单的实验进行分析，管中窥豹，贻笑大方。&lt;/p&gt;
&lt;div class="section" id="first-blood"&gt;
&lt;h2&gt;实验1 First Blood&lt;/h2&gt;
&lt;p&gt;图片 苍井老师的写真&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/1_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/1_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;这里Google给出的搜索结果包括三个方面（对应图中1, 2, 3）：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Best guess for this image，Google“猜”出来的图片内容&lt;/li&gt;
&lt;li&gt;Visually similar images，相似图片&lt;/li&gt;
&lt;li&gt;Pages that include matching images，包含该匹配图片的页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很显然，得到结果的顺序应该是3→1→2（这在后面的实验里会得到验证）。首先搜索图片库，寻找相同的图片（判断两张图片是否相同的方法很可能是通过比较像素来进行的），然后得到包含这些图片的网页。再根据网页里的文本信息推测图片的含义，所以在这里才能推测出图片里的人是我们敬爱的苍井老师。最后根据图片本身的特征（比如色彩、灰度、轮廓什么的，我不是太懂）搜索类似的图片，再辅以前面的推测结论进行筛选，得到相似图片。&lt;/p&gt;
&lt;p&gt;这张图片本身就是从网上找来的，所以找到比较多的结果也并不奇怪。&lt;/p&gt;
&lt;p&gt;这里可以看到，虽然有了aoi sora作为关键字，还是没有能完全剔除掉4这样的无关结果。这跟文本搜索是类似的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;实验2 部分匹配&lt;/h2&gt;
&lt;p&gt;从实验1的图片里截取部分，进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 大半张脸&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="大半张脸" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 整个胸部&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="整个胸部" src="http://seth-images.qiniudn.com/search-by-img-exp/2_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_4.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;通过这个实验，应该可以断定，像素匹配的比例是判断两个图片是否相同的重要依据。只要匹配的像素达到一定比例，就认为两张图片匹配。图片1因为截取的部分少，匹配的比例也小，所以图片索引里的那些相同图片都被认为是不同的；而图片2截取的部分多，匹配比例也大，就能够成功的找到相同图片。&lt;/p&gt;
&lt;p&gt;不过图片1虽然没有成功的找到匹配的结果，但是成功的识别出了人脸，所以相似图片结果里没有出现很离谱的物体。&lt;/p&gt;
&lt;p&gt;另外这里也可以看到，如果成功匹配，就会找到很多包含相同图片的网页（Pages that include matching images），根据这些网页上频繁出现的关键词，就可以推测出图片的内容；反之则只有一些看起来相似的图片（Visually similar images）。这充分说明1的结果是根据3来的，同时会作用于2。&lt;/p&gt;
&lt;p&gt;BTW：不得不佩服google的强大，仅凭胸部就能认出苍井老师。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;实验3 干扰因素&lt;/h2&gt;
&lt;p&gt;图片1 添加文字&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师+文字" src="http://seth-images.qiniudn.com/search-by-img-exp/3_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 添加图形&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="苍老师+凤姐" src="http://seth-images.qiniudn.com/search-by-img-exp/3_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;为了偷懒，这两个结果我就不贴图了，想看可以自己去试。一句话，不管是办证还是凤姐，都没能掩盖苍井老师的光芒。原理应该跟实验2的部分匹配类似，只要匹配部分达到一定比例，就认为是相同的，这样自然就把我添加的那些干扰因素排除在外了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;实验4 变形&lt;/h2&gt;
&lt;p&gt;改变图片的宽高比进行，用加长版苍井老师去搜索。&lt;/p&gt;
&lt;p&gt;图片 加长夜用型的苍井老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="加长夜用型的苍井老师" src="http://seth-images.qiniudn.com/search-by-img-exp/4_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/4_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;这里就不太明白是怎么搜出这个结果的，而且还就单单搜出这么一个结果。由于匹配结果太少，而且还是中文，所以Google终于没能认出苍井老师来，看来Google真的要好好学学中文了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;实验5 变色&lt;/h2&gt;
&lt;p&gt;改变图片的颜色位数进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 256色复古版苍老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="256色苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/5_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 16色复古苍老师&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="16色苍老师" src="http://seth-images.qiniudn.com/search-by-img-exp/5_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;16色搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="16色搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/5_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;256色的情况下，图片失真还比较小，仍然可以正确匹配；16色的情况下，也没有完全失败，还是找到了少量的结果，不过相似图片的结果，就差得相当远了。可见颜色在相似图片搜索中的重要作用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;实验6 更复杂的变化&lt;/h2&gt;
&lt;p&gt;用Photoshop的一些特效对原始图片进行处理，然后进行搜索。&lt;/p&gt;
&lt;p&gt;图片1 50%杂色&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="50%杂色" src="http://seth-images.qiniudn.com/search-by-img-exp/6_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;杂色搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="杂色50搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/6_2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片2 距离25的动感模糊&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="距离25的动感模糊" src="http://seth-images.qiniudn.com/search-by-img-exp/6_3.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;动感模糊搜索结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/6_4.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;图片1色彩组成要比原图复杂很多，但基本轮廓仍然比较清晰，所以相似图片里基本还都是人形，而且肉眼上来看，色彩也跟图片1比较接近。这说明色彩是相似图片搜索的重要依据，专业术语我讲不清楚，不过原理可能跟gift类似。&lt;/p&gt;
&lt;p&gt;图片2色彩构成基本没变，只是轮廓模糊了许多，所以相似图片里面多了些猫猫狗狗。这从反面说明，Google对轮廓识别也有一套。另外这里图片模糊了，guess的结果也模糊了，这个太囧了。看一下这里的结果数，只有72，由于结果相关页面太少，因此推测的结果也不够准确，结合前面的实验，充分说明Google的guess，是基于大量相关页面进行。&lt;/p&gt;
&lt;p&gt;这两个都能正确搜索出结果，看起来很强大。不过仔细思考一下，可能还是个比例问题。这两个PS特效无非是修改原图上的部分像素来造成视觉效果，只要修改的像素不超过一定比例，在Google的匹配算法里仍然会被认为是和原图相同的。&lt;/p&gt;
&lt;p&gt;时间关系，PS里其他的效果，就不一一测试了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;实验7 终极挑战&lt;/h2&gt;
&lt;p&gt;从电影里截取一张苍井老师的面部特写进行搜索。&lt;/p&gt;
&lt;p&gt;图片 《复仇者之死》截图&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;电影截图&lt;/p&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="搜索结果" src="http://seth-images.qiniudn.com/search-by-img-exp/2_1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;截图结果&lt;/p&gt;
&lt;p&gt;这个结果毫不意外，就算是Google，现在也不可能强大到真的根据图片的“内容”去搜索。不过我觉得，这种情况恰恰是人们最需要的。比如你走在路上，发现一个不明物体，兴致勃勃的拍张照片想去Google一下，结果得到的只是形状或颜色相似的另一些不明物体，这个时候你一定会对所谓的按图搜索感到无比失望。不过这确实是目前技术所限，不能奢求太多。&lt;/p&gt;
&lt;p&gt;不过这里还是要说Google对轮廓的识别还是比较强大的，相似图片里虽然没有苍井老师，但也没有出现比较离谱的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;通过前面的实验，应该可以说明按图搜索到底是个什么东东了。其功能无外乎三点：相同图片的搜索、相似图片的搜索和图片内容的推测。而原理就是通过对图片的像素进行比较，根据匹配的比例判断两张图片是否相同。用这个方法在Google庞大的图片库里进行搜索，找出相关的图片，然后顺藤摸瓜，在找到相关的网页，如果运气好，就可以根据这些网页推测出图片的含义。如果找不到相同的结果，就根据图片的色彩和轮廓，找相似的结果。&lt;/p&gt;
&lt;p&gt;目前来看，相同图片的搜索已经做得很不错。相似图片搜索的结果虽然也不错，但其实并没有太大的实用价值。虽然距离理想的状态仍然很远，不过我们应该肯定它的贡献。从一个外行的角度来看，至少在三点上做得很不错：&lt;/p&gt;
&lt;p&gt;一是不同尺寸的图片之间的比较。虽然都是像素比较，但是两张尺寸完全相同的图片对比起来，肯定比经过缩放/裁剪之后再比较要容易很多。&lt;/p&gt;
&lt;p&gt;二是轮廓的识别和分类，这个前面已经说过了，确实比较强大。&lt;/p&gt;
&lt;p&gt;三是根据结果页面推断图片内容。这个我同样外行，估计是根据关键词来的。在所有这些结果页面重复出现的关键词，很可能就是这个图片的内容。当然，也有可能结合了词性（比如说只选择名词）以及图片的轮廓类型（就像前面的实验里，能识别出人形，就不会找一些猫猫狗狗来充数）。&lt;/p&gt;
&lt;p&gt;总而言之，图像搜索任重而道远，革命尚未成功，IT仍需努力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;番外&lt;/h2&gt;
&lt;p&gt;讲了Google，就不能不提百度。百度也已经推出了类似的功能“识图”，貌似还在不断的改进之中，前几天甚至连上传图片都还没有搞定。详细的实验不做了，大致试用了一下，截止到今天晚上，应该基本上实现了相同图片的搜索，效果跟Google已经比较接近了。但是另外两项功能就完全木有啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;阮一峰老师的博客上有两篇比较好的文章介绍相似图片搜索的原理： &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html"&gt;1&lt;/a&gt; ,  &lt;a class="reference external" href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html"&gt;2&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="google"></category><category term="search"></category><category term="experiment"></category></entry></feed>